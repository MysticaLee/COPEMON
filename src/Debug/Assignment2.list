
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08008d50  08008d50  00018d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009200  08009200  000202b0  2**0
                  CONTENTS
  4 .ARM          00000008  08009200  08009200  00019200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009208  08009208  000202b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009208  08009208  00019208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800920c  0800920c  0001920c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  08009210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200002b0  080094c0  000202b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  080094c0  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001102c  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026c1  00000000  00000000  0003130c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d48  00000000  00000000  000339d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd0  00000000  00000000  00034718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000293d3  00000000  00000000  000352e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000de0c  00000000  00000000  0005e6bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f5963  00000000  00000000  0006c4c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161e2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004710  00000000  00000000  00161ea8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b0 	.word	0x200002b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d34 	.word	0x08008d34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b4 	.word	0x200002b4
 80001cc:	08008d34 	.word	0x08008d34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <main>:
volatile int abnormal_detect = 0;
volatile int breath_detect = 0;
volatile int current_press = 0;
volatile int previous_press = 0;

int main(void){
 8000f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f4c:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8000f50:	af08      	add	r7, sp, #32
	initialise_monitor_handles(); // for semi-hosting support (printf)
 8000f52:	f004 fb63 	bl	800561c <initialise_monitor_handles>

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f56:	f002 f90d 	bl	8003174 <HAL_Init>

	/* UART initialization  */
	UART1_Init();
 8000f5a:	f000 fdf1 	bl	8001b40 <UART1_Init>

	//Configure PC13 to EXTI mode
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f5e:	2101      	movs	r1, #1
 8000f60:	2000      	movs	r0, #0
 8000f62:	f001 f869 	bl	8002038 <BSP_PB_Init>

	/* Peripheral initializations using BSP functions */
	BSP_ACCELERO_Init();
 8000f66:	f001 fa0d 	bl	8002384 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8000f6a:	f001 fa61 	bl	8002430 <BSP_GYRO_Init>
	BSP_HSENSOR_Init();
 8000f6e:	f001 fab9 	bl	80024e4 <BSP_HSENSOR_Init>
	BSP_TSENSOR_Init();
 8000f72:	f001 fb57 	bl	8002624 <BSP_TSENSOR_Init>
	BSP_MAGNETO_Init();
 8000f76:	f001 fae3 	bl	8002540 <BSP_MAGNETO_Init>
  	BSP_PSENSOR_Init();
 8000f7a:	f001 fb25 	bl	80025c8 <BSP_PSENSOR_Init>

  	//Configure LD2
  	MX_GPIO_Init();
 8000f7e:	f000 fd21 	bl	80019c4 <MX_GPIO_Init>

  	//Configure PD11
  	EXTI_PD11_Init();
 8000f82:	f000 fe35 	bl	8001bf0 <EXTI_PD11_Init>
  	LSM6DSL_Init();
 8000f86:	f000 fe63 	bl	8001c50 <LSM6DSL_Init>

  	//Variables declaration
  	float temp_data; //Body Temperature Monitoring

  	float accel_data[3]; //Fall Detection
  	int16_t accel_data_i16[3] = { 0 };      // array to store the x, y and z readings.
 8000f8a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	809a      	strh	r2, [r3, #4]

  	float gyro_data[3]; //Pain Detection
  	float gyroscope_data;

  	float magneto_data[3]; //Lying Monitoring
  	int16_t magneto_data_i16[3] = { 0 };  // array to store the x, y and z readings.
 8000f94:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	809a      	strh	r2, [r3, #4]
  	BSP_MAGNETO_GetXYZ(magneto_data_i16);    // read magneto
 8000f9e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 faf8 	bl	8002598 <BSP_MAGNETO_GetXYZ>
  	float humid_data; //Respiratory Monitoring
  	float pressure_data; //Respiratory Monitoring

  	//Threshold
  	int TEMP_THRESHOLD = 33.5;
 8000fa8:	2321      	movs	r3, #33	; 0x21
 8000faa:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
  	int ACC_THRESHOLD[3];
  	ACC_THRESHOLD[2] = 8;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  	int GYRO_THRESHOLD = 10000;
 8000fb4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fb8:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  	int MAG_THRESHOLD[3];
  	MAG_THRESHOLD[0] = -0.6;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  	MAG_THRESHOLD[1] = -13;
 8000fc2:	f06f 030c 	mvn.w	r3, #12
 8000fc6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  	MAG_THRESHOLD[2] = 4;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  	int HUMID_THRESHOLD = 75;
 8000fd0:	234b      	movs	r3, #75	; 0x4b
 8000fd2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
  	int PRESS_THRESHOLD = 1020;
 8000fd6:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8000fda:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

  	int T01;
  	int T02;

  	int num = 0; //transmission number
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

  	//messages for UART
  	char healthy_message[] = "Entering Healthy Mode.\r\n";
 8000fe4:	4bca      	ldr	r3, [pc, #808]	; (8001310 <main+0x3c8>)
 8000fe6:	f507 74f6 	add.w	r4, r7, #492	; 0x1ec
 8000fea:	461d      	mov	r5, r3
 8000fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff4:	c403      	stmia	r4!, {r0, r1}
 8000ff6:	7022      	strb	r2, [r4, #0]
  	char healthy_print[32];
  	sprintf(healthy_print,"%s", healthy_message);
 8000ff8:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8000ffc:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f005 f999 	bl	800633a <strcpy>

	char icu_message[] = "Entering Intensive Care Mode.\r\n";
 8001008:	4bc2      	ldr	r3, [pc, #776]	; (8001314 <main+0x3cc>)
 800100a:	f507 74d6 	add.w	r4, r7, #428	; 0x1ac
 800100e:	461d      	mov	r5, r3
 8001010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001014:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char icu_print[32];
	sprintf(icu_print,"%s", icu_message);
 800101c:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8001020:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f005 f987 	bl	800633a <strcpy>

	char fever_message[] = "Fever is detected\r\n";  // Fixed message
 800102c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001030:	4ab9      	ldr	r2, [pc, #740]	; (8001318 <main+0x3d0>)
 8001032:	461c      	mov	r4, r3
 8001034:	4615      	mov	r5, r2
 8001036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103a:	682b      	ldr	r3, [r5, #0]
 800103c:	6023      	str	r3, [r4, #0]
	char fever_print[32];
	sprintf(fever_print,"%s", fever_message);
 800103e:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001042:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f005 f976 	bl	800633a <strcpy>

	char fall_message[] = "Falling is detected\r\n";
 800104e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001052:	4ab2      	ldr	r2, [pc, #712]	; (800131c <main+0x3d4>)
 8001054:	461c      	mov	r4, r3
 8001056:	4615      	mov	r5, r2
 8001058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001060:	6020      	str	r0, [r4, #0]
 8001062:	3404      	adds	r4, #4
 8001064:	8021      	strh	r1, [r4, #0]
	char fall_print[32];
	sprintf(fall_print,"%s", fall_message);
 8001066:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800106a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f005 f962 	bl	800633a <strcpy>

	char pain_message[] = "Patient in pain!\r\n";
 8001076:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800107a:	4aa9      	ldr	r2, [pc, #676]	; (8001320 <main+0x3d8>)
 800107c:	461c      	mov	r4, r3
 800107e:	4615      	mov	r5, r2
 8001080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	8022      	strh	r2, [r4, #0]
 800108a:	3402      	adds	r4, #2
 800108c:	0c1b      	lsrs	r3, r3, #16
 800108e:	7023      	strb	r3, [r4, #0]
	char pain_print[32];
	sprintf(pain_print,"%s", pain_message);
 8001090:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001094:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f005 f94d 	bl	800633a <strcpy>

	char abnormal_message[] = "Check patient's abnormal orientation!\r\n";
 80010a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010a4:	4a9f      	ldr	r2, [pc, #636]	; (8001324 <main+0x3dc>)
 80010a6:	461c      	mov	r4, r3
 80010a8:	4615      	mov	r5, r2
 80010aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010b6:	e884 0003 	stmia.w	r4, {r0, r1}
	char abnormal_print[32];
	sprintf(abnormal_print,"%s", abnormal_message);
 80010ba:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80010be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f005 f938 	bl	800633a <strcpy>

	char breath_message[] = "Check patient's breath!\r\n";
 80010ca:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010ce:	4a96      	ldr	r2, [pc, #600]	; (8001328 <main+0x3e0>)
 80010d0:	461c      	mov	r4, r3
 80010d2:	4615      	mov	r5, r2
 80010d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010dc:	c403      	stmia	r4!, {r0, r1}
 80010de:	8022      	strh	r2, [r4, #0]
	char breath_print[32];
	sprintf(breath_print,"%s", breath_message);
 80010e0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80010e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 f925 	bl	800633a <strcpy>

	while (1){

		if (mode == 0){
 80010f0:	4b8e      	ldr	r3, [pc, #568]	; (800132c <main+0x3e4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f040 815e 	bne.w	80013b6 <main+0x46e>
			HAL_UART_Transmit(&huart1, (uint8_t*)healthy_print, strlen(healthy_print),0xFFFF);
 80010fa:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f866 	bl	80001d0 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	b29a      	uxth	r2, r3
 8001108:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 800110c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001110:	4887      	ldr	r0, [pc, #540]	; (8001330 <main+0x3e8>)
 8001112:	f003 fafb 	bl	800470c <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, RESET); //LD2 is OFF
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111c:	4885      	ldr	r0, [pc, #532]	; (8001334 <main+0x3ec>)
 800111e:	f002 fc47 	bl	80039b0 <HAL_GPIO_WritePin>
			int counter = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c

			while (mode == 0){
 8001128:	e140      	b.n	80013ac <main+0x464>
				T01 = HAL_GetTick();
 800112a:	f002 f887 	bl	800323c <HAL_GetTick>
 800112e:	4603      	mov	r3, r0
 8001130:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
				T02 = HAL_GetTick();
 8001134:	f002 f882 	bl	800323c <HAL_GetTick>
 8001138:	4603      	mov	r3, r0
 800113a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
				while (T02 - T01 < 250)
 800113e:	e004      	b.n	800114a <main+0x202>
					T02 = HAL_GetTick();
 8001140:	f002 f87c 	bl	800323c <HAL_GetTick>
 8001144:	4603      	mov	r3, r0
 8001146:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
				while (T02 - T01 < 250)
 800114a:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800114e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2bf9      	cmp	r3, #249	; 0xf9
 8001156:	ddf3      	ble.n	8001140 <main+0x1f8>
				counter++;
 8001158:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800115c:	3301      	adds	r3, #1
 800115e:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
				temp_data = BSP_TSENSOR_ReadTemp();      // read temperature sensor
 8001162:	f001 fa7b 	bl	800265c <BSP_TSENSOR_ReadTemp>
 8001166:	ed87 0aa5 	vstr	s0, [r7, #660]	; 0x294


				//Body Temperature Monitoring
				if (temp_data > TEMP_THRESHOLD){ //Print statement immediately when fever is detected
 800116a:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001176:	ed97 7aa5 	vldr	s14, [r7, #660]	; 0x294
 800117a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	dd5a      	ble.n	800123a <main+0x2f2>
					fever_detect = 1;
 8001184:	4b6c      	ldr	r3, [pc, #432]	; (8001338 <main+0x3f0>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]
					//fever_buffer = 1;
					int temp_counter = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
					HAL_UART_Transmit(&huart1, (uint8_t*)fever_print, strlen(fever_print),0xFFFF); //Sending in normal mode
 8001190:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f81b 	bl	80001d0 <strlen>
 800119a:	4603      	mov	r3, r0
 800119c:	b29a      	uxth	r2, r3
 800119e:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80011a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a6:	4862      	ldr	r0, [pc, #392]	; (8001330 <main+0x3e8>)
 80011a8:	f003 fab0 	bl	800470c <HAL_UART_Transmit>

					while (fever_detect == 1){
 80011ac:	e041      	b.n	8001232 <main+0x2ea>
						temp_data = BSP_TSENSOR_ReadTemp();      // read temperature sensor
 80011ae:	f001 fa55 	bl	800265c <BSP_TSENSOR_ReadTemp>
 80011b2:	ed87 0aa5 	vstr	s0, [r7, #660]	; 0x294
						HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80011b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ba:	485e      	ldr	r0, [pc, #376]	; (8001334 <main+0x3ec>)
 80011bc:	f002 fc10 	bl	80039e0 <HAL_GPIO_TogglePin>
						T01 = HAL_GetTick();
 80011c0:	f002 f83c 	bl	800323c <HAL_GetTick>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						T02 = HAL_GetTick();
 80011ca:	f002 f837 	bl	800323c <HAL_GetTick>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
						while (T02 - T01 < 250) //LD2 to blink at 2Hz
 80011d4:	e004      	b.n	80011e0 <main+0x298>
							T02 = HAL_GetTick();
 80011d6:	f002 f831 	bl	800323c <HAL_GetTick>
 80011da:	4603      	mov	r3, r0
 80011dc:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
						while (T02 - T01 < 250) //LD2 to blink at 2Hz
 80011e0:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 80011e4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2bf9      	cmp	r3, #249	; 0xf9
 80011ec:	ddf3      	ble.n	80011d6 <main+0x28e>
						temp_counter++;
 80011ee:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80011f2:	3301      	adds	r3, #1
 80011f4:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278

						if (temp_counter % 40 == 0){ //Print statement every 10s
 80011f8:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 80011fc:	4b4f      	ldr	r3, [pc, #316]	; (800133c <main+0x3f4>)
 80011fe:	fb83 2301 	smull	r2, r3, r3, r1
 8001202:	111a      	asrs	r2, r3, #4
 8001204:	17cb      	asrs	r3, r1, #31
 8001206:	1ad2      	subs	r2, r2, r3
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	1aca      	subs	r2, r1, r3
 8001212:	2a00      	cmp	r2, #0
 8001214:	d10d      	bne.n	8001232 <main+0x2ea>
							HAL_UART_Transmit(&huart1, (uint8_t*)fever_print, strlen(fever_print),0xFFFF);//Sending in normal mode
 8001216:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800121a:	4618      	mov	r0, r3
 800121c:	f7fe ffd8 	bl	80001d0 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	b29a      	uxth	r2, r3
 8001224:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8001228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800122c:	4840      	ldr	r0, [pc, #256]	; (8001330 <main+0x3e8>)
 800122e:	f003 fa6d 	bl	800470c <HAL_UART_Transmit>
					while (fever_detect == 1){
 8001232:	4b41      	ldr	r3, [pc, #260]	; (8001338 <main+0x3f0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d0b9      	beq.n	80011ae <main+0x266>
						}//if loop
					}//while loop
				}//if loop

				//Fall Detection
				int16_t accel_data_i16[3] = { 0 };      // array to store the x, y and z readings.
 800123a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	809a      	strh	r2, [r3, #4]
				BSP_ACCELERO_AccGetXYZ(accel_data_i16);    // read accelerometer
 8001244:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001248:	4618      	mov	r0, r3
 800124a:	f001 f8d9 	bl	8002400 <BSP_ACCELERO_AccGetXYZ>
				//the function above returns 16 bit integers which are 100 * acceleration_in_m/s2. Converting to float to print the actual acceleration.
				accel_data[0] = (float)accel_data_i16[0] / 100.0f;
 800124e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001340 <main+0x3f8>
 8001262:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001266:	edc7 7a92 	vstr	s15, [r7, #584]	; 0x248
				accel_data[1] = (float)accel_data_i16[1] / 100.0f;
 800126a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800126e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800127a:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001340 <main+0x3f8>
 800127e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001282:	edc7 7a93 	vstr	s15, [r7, #588]	; 0x24c
				accel_data[2] = (float)accel_data_i16[2] / 100.0f;
 8001286:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800128a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001296:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001340 <main+0x3f8>
 800129a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800129e:	edc7 7a94 	vstr	s15, [r7, #592]	; 0x250

				if (accel_data[2] < ACC_THRESHOLD[2]){
 80012a2:	ed97 7a94 	vldr	s14, [r7, #592]	; 0x250
 80012a6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d577      	bpl.n	80013ac <main+0x464>
					fall_detect = 1;
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <main+0x3fc>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
					int fall_counter = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
					HAL_UART_Transmit(&huart1, (uint8_t*)fall_print, strlen(fall_print),0xFFFF);
 80012c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7fe ff7f 	bl	80001d0 <strlen>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80012da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012de:	4814      	ldr	r0, [pc, #80]	; (8001330 <main+0x3e8>)
 80012e0:	f003 fa14 	bl	800470c <HAL_UART_Transmit>

					while (fall_detect ==1){
 80012e4:	e05e      	b.n	80013a4 <main+0x45c>
						BSP_ACCELERO_AccGetXYZ(accel_data_i16);
 80012e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 f888 	bl	8002400 <BSP_ACCELERO_AccGetXYZ>
						HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80012f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f4:	480f      	ldr	r0, [pc, #60]	; (8001334 <main+0x3ec>)
 80012f6:	f002 fb73 	bl	80039e0 <HAL_GPIO_TogglePin>
						T01 = HAL_GetTick();
 80012fa:	f001 ff9f 	bl	800323c <HAL_GetTick>
 80012fe:	4603      	mov	r3, r0
 8001300:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						T02 = HAL_GetTick();
 8001304:	f001 ff9a 	bl	800323c <HAL_GetTick>
 8001308:	4603      	mov	r3, r0
 800130a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
						while (T02 - T01 < 250) //LD2 to blink at 2Hz
 800130e:	e020      	b.n	8001352 <main+0x40a>
 8001310:	08008dc8 	.word	0x08008dc8
 8001314:	08008de4 	.word	0x08008de4
 8001318:	08008e04 	.word	0x08008e04
 800131c:	08008e18 	.word	0x08008e18
 8001320:	08008e30 	.word	0x08008e30
 8001324:	08008e44 	.word	0x08008e44
 8001328:	08008e6c 	.word	0x08008e6c
 800132c:	200002cc 	.word	0x200002cc
 8001330:	200003bc 	.word	0x200003bc
 8001334:	48000400 	.word	0x48000400
 8001338:	200002d0 	.word	0x200002d0
 800133c:	66666667 	.word	0x66666667
 8001340:	42c80000 	.word	0x42c80000
 8001344:	200002d4 	.word	0x200002d4
							T02 = HAL_GetTick();
 8001348:	f001 ff78 	bl	800323c <HAL_GetTick>
 800134c:	4603      	mov	r3, r0
 800134e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
						while (T02 - T01 < 250) //LD2 to blink at 2Hz
 8001352:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8001356:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2bf9      	cmp	r3, #249	; 0xf9
 800135e:	ddf3      	ble.n	8001348 <main+0x400>
						fall_counter++;
 8001360:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8001364:	3301      	adds	r3, #1
 8001366:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
						if (fall_counter % 40 == 0){ //Print statement every 10s
 800136a:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <main+0x4c0>)
 8001370:	fb83 2301 	smull	r2, r3, r3, r1
 8001374:	111a      	asrs	r2, r3, #4
 8001376:	17cb      	asrs	r3, r1, #31
 8001378:	1ad2      	subs	r2, r2, r3
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	1aca      	subs	r2, r1, r3
 8001384:	2a00      	cmp	r2, #0
 8001386:	d10d      	bne.n	80013a4 <main+0x45c>
							HAL_UART_Transmit(&huart1, (uint8_t*)fall_print, strlen(fall_print),0xFFFF);
 8001388:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800138c:	4618      	mov	r0, r3
 800138e:	f7fe ff1f 	bl	80001d0 <strlen>
 8001392:	4603      	mov	r3, r0
 8001394:	b29a      	uxth	r2, r3
 8001396:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800139a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139e:	481b      	ldr	r0, [pc, #108]	; (800140c <main+0x4c4>)
 80013a0:	f003 f9b4 	bl	800470c <HAL_UART_Transmit>
					while (fall_detect ==1){
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <main+0x4c8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d09c      	beq.n	80012e6 <main+0x39e>
			while (mode == 0){
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <main+0x4cc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f43f aeba 	beq.w	800112a <main+0x1e2>
			}//while mode == 0 loop

		}///if mode == 0 loop

		//INTENSIVE CARE MODE ACTIONS
		if (mode == 1){
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <main+0x4cc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	f47f ae98 	bne.w	80010f0 <main+0x1a8>
			HAL_UART_Transmit(&huart1, (uint8_t*)icu_print, strlen(icu_print),0xFFFF);
 80013c0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7fe ff03 	bl	80001d0 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 80013d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <main+0x4c4>)
 80013d8:	f003 f998 	bl	800470c <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, RESET); //LD2 is OFF
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <main+0x4d0>)
 80013e4:	f002 fae4 	bl	80039b0 <HAL_GPIO_WritePin>
			int seconds_counter = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270

			while (mode == 1){
 80013ee:	e2da      	b.n	80019a6 <main+0xa5e>
				int T1, T2;
				T1 = HAL_GetTick();
 80013f0:	f001 ff24 	bl	800323c <HAL_GetTick>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
				T2 = HAL_GetTick();
 80013fa:	f001 ff1f 	bl	800323c <HAL_GetTick>
 80013fe:	4603      	mov	r3, r0
 8001400:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
				while (T2 - T1 < 250) //LD2 to blink at 2Hz
 8001404:	e00f      	b.n	8001426 <main+0x4de>
 8001406:	bf00      	nop
 8001408:	66666667 	.word	0x66666667
 800140c:	200003bc 	.word	0x200003bc
 8001410:	200002d4 	.word	0x200002d4
 8001414:	200002cc 	.word	0x200002cc
 8001418:	48000400 	.word	0x48000400
					T2 = HAL_GetTick();
 800141c:	f001 ff0e 	bl	800323c <HAL_GetTick>
 8001420:	4603      	mov	r3, r0
 8001422:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
				while (T2 - T1 < 250) //LD2 to blink at 2Hz
 8001426:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800142a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2bf9      	cmp	r3, #249	; 0xf9
 8001432:	ddf3      	ble.n	800141c <main+0x4d4>
				seconds_counter++;
 8001434:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8001438:	3301      	adds	r3, #1
 800143a:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
				if (fever_detect == 1 || fall_detect == 1 || pain_detect == 1 || abnormal_detect == 1 || breath_detect == 1)
 800143e:	4be0      	ldr	r3, [pc, #896]	; (80017c0 <main+0x878>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d00f      	beq.n	8001466 <main+0x51e>
 8001446:	4bdf      	ldr	r3, [pc, #892]	; (80017c4 <main+0x87c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d00b      	beq.n	8001466 <main+0x51e>
 800144e:	4bde      	ldr	r3, [pc, #888]	; (80017c8 <main+0x880>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d007      	beq.n	8001466 <main+0x51e>
 8001456:	4bdd      	ldr	r3, [pc, #884]	; (80017cc <main+0x884>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d003      	beq.n	8001466 <main+0x51e>
 800145e:	4bdc      	ldr	r3, [pc, #880]	; (80017d0 <main+0x888>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d104      	bne.n	8001470 <main+0x528>
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001466:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800146a:	48da      	ldr	r0, [pc, #872]	; (80017d4 <main+0x88c>)
 800146c:	f002 fab8 	bl	80039e0 <HAL_GPIO_TogglePin>

				if (seconds_counter % 4 == 0){ //sample every second
 8001470:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b00      	cmp	r3, #0
 800147a:	f040 8126 	bne.w	80016ca <main+0x782>
					//Fever Detection
					temp_data = BSP_TSENSOR_ReadTemp();
 800147e:	f001 f8ed 	bl	800265c <BSP_TSENSOR_ReadTemp>
 8001482:	ed87 0aa5 	vstr	s0, [r7, #660]	; 0x294
					if (temp_data > TEMP_THRESHOLD)
 8001486:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ed97 7aa5 	vldr	s14, [r7, #660]	; 0x294
 8001496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	dd02      	ble.n	80014a6 <main+0x55e>
						fever_detect = 1;
 80014a0:	4bc7      	ldr	r3, [pc, #796]	; (80017c0 <main+0x878>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

					//Fall Detection
					BSP_ACCELERO_AccGetXYZ(accel_data_i16);    // read accelerometer
 80014a6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 ffa8 	bl	8002400 <BSP_ACCELERO_AccGetXYZ>
					accel_data[0] = (float)accel_data_i16[0] / 100.0f;
 80014b0:	f9b7 3240 	ldrsh.w	r3, [r7, #576]	; 0x240
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014bc:	eddf 6ac6 	vldr	s13, [pc, #792]	; 80017d8 <main+0x890>
 80014c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c4:	edc7 7a92 	vstr	s15, [r7, #584]	; 0x248
					accel_data[1] = (float)accel_data_i16[1] / 100.0f;
 80014c8:	f9b7 3242 	ldrsh.w	r3, [r7, #578]	; 0x242
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d4:	eddf 6ac0 	vldr	s13, [pc, #768]	; 80017d8 <main+0x890>
 80014d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014dc:	edc7 7a93 	vstr	s15, [r7, #588]	; 0x24c
					accel_data[2] = (float)accel_data_i16[2] / 100.0f;
 80014e0:	f9b7 3244 	ldrsh.w	r3, [r7, #580]	; 0x244
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ec:	eddf 6aba 	vldr	s13, [pc, #744]	; 80017d8 <main+0x890>
 80014f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f4:	edc7 7a94 	vstr	s15, [r7, #592]	; 0x250
					if(accel_data[2] < ACC_THRESHOLD[2])
 80014f8:	ed97 7a94 	vldr	s14, [r7, #592]	; 0x250
 80014fc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001500:	ee07 3a90 	vmov	s15, r3
 8001504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	d502      	bpl.n	8001518 <main+0x5d0>
						fall_detect = 1;
 8001512:	4bac      	ldr	r3, [pc, #688]	; (80017c4 <main+0x87c>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]
					//
					BSP_GYRO_GetXYZ(gyro_data);      //read gyroscope
 8001518:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800151c:	4618      	mov	r0, r3
 800151e:	f000 ffc9 	bl	80024b4 <BSP_GYRO_GetXYZ>
					gyroscope_data = sqrt(pow(gyro_data[0], 2) + pow(gyro_data[1], 2) + pow(gyro_data[2], 2));
 8001522:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f80e 	bl	8000548 <__aeabi_f2d>
 800152c:	4603      	mov	r3, r0
 800152e:	460c      	mov	r4, r1
 8001530:	ed9f 1ba1 	vldr	d1, [pc, #644]	; 80017b8 <main+0x870>
 8001534:	ec44 3b10 	vmov	d0, r3, r4
 8001538:	f006 fb4a 	bl	8007bd0 <pow>
 800153c:	ec55 4b10 	vmov	r4, r5, d0
 8001540:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ffff 	bl	8000548 <__aeabi_f2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	ed9f 1b9a 	vldr	d1, [pc, #616]	; 80017b8 <main+0x870>
 8001552:	ec43 2b10 	vmov	d0, r2, r3
 8001556:	f006 fb3b 	bl	8007bd0 <pow>
 800155a:	ec53 2b10 	vmov	r2, r3, d0
 800155e:	4620      	mov	r0, r4
 8001560:	4629      	mov	r1, r5
 8001562:	f7fe fe93 	bl	800028c <__adddf3>
 8001566:	4603      	mov	r3, r0
 8001568:	460c      	mov	r4, r1
 800156a:	4625      	mov	r5, r4
 800156c:	461c      	mov	r4, r3
 800156e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffe8 	bl	8000548 <__aeabi_f2d>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	ed9f 1b8e 	vldr	d1, [pc, #568]	; 80017b8 <main+0x870>
 8001580:	ec43 2b10 	vmov	d0, r2, r3
 8001584:	f006 fb24 	bl	8007bd0 <pow>
 8001588:	ec53 2b10 	vmov	r2, r3, d0
 800158c:	4620      	mov	r0, r4
 800158e:	4629      	mov	r1, r5
 8001590:	f7fe fe7c 	bl	800028c <__adddf3>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	ec44 3b17 	vmov	d7, r3, r4
 800159c:	eeb0 0a47 	vmov.f32	s0, s14
 80015a0:	eef0 0a67 	vmov.f32	s1, s15
 80015a4:	f006 fc84 	bl	8007eb0 <sqrt>
 80015a8:	ec54 3b10 	vmov	r3, r4, d0
 80015ac:	4618      	mov	r0, r3
 80015ae:	4621      	mov	r1, r4
 80015b0:	f7ff fafa 	bl	8000ba8 <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
					if (gyroscope_data > GYRO_THRESHOLD)
 80015ba:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80015be:	ee07 3a90 	vmov	s15, r3
 80015c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c6:	ed97 7aa4 	vldr	s14, [r7, #656]	; 0x290
 80015ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d2:	dd02      	ble.n	80015da <main+0x692>
						pain_detect = 1;
 80015d4:	4b7c      	ldr	r3, [pc, #496]	; (80017c8 <main+0x880>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
					//
					BSP_MAGNETO_GetXYZ(magneto_data_i16);
 80015da:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 ffda 	bl	8002598 <BSP_MAGNETO_GetXYZ>
					// the function above returns 16 bit integers which are 100 * magneto. Converting to float to print the actual magneto reading.
					magneto_data[0] = (float)magneto_data_i16[0] / 100.0f; //changing to float number
 80015e4:	f9b7 3220 	ldrsh.w	r3, [r7, #544]	; 0x220
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f0:	eddf 6a79 	vldr	s13, [pc, #484]	; 80017d8 <main+0x890>
 80015f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f8:	edc7 7a8a 	vstr	s15, [r7, #552]	; 0x228
					magneto_data[1] = (float)magneto_data_i16[1] / 100.0f;
 80015fc:	f9b7 3222 	ldrsh.w	r3, [r7, #546]	; 0x222
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001608:	eddf 6a73 	vldr	s13, [pc, #460]	; 80017d8 <main+0x890>
 800160c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001610:	edc7 7a8b 	vstr	s15, [r7, #556]	; 0x22c
					magneto_data[2] = (float)magneto_data_i16[2] / 100.0f;
 8001614:	f9b7 3224 	ldrsh.w	r3, [r7, #548]	; 0x224
 8001618:	ee07 3a90 	vmov	s15, r3
 800161c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001620:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80017d8 <main+0x890>
 8001624:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001628:	edc7 7a8c 	vstr	s15, [r7, #560]	; 0x230
					if ((magneto_data[0] >= MAG_THRESHOLD[0]) || (magneto_data[1] >= MAG_THRESHOLD[1]) || (magneto_data[2] >= MAG_THRESHOLD[2]) )
 800162c:	ed97 7a8a 	vldr	s14, [r7, #552]	; 0x228
 8001630:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001644:	da19      	bge.n	800167a <main+0x732>
 8001646:	ed97 7a8b 	vldr	s14, [r7, #556]	; 0x22c
 800164a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165e:	da0c      	bge.n	800167a <main+0x732>
 8001660:	ed97 7a8c 	vldr	s14, [r7, #560]	; 0x230
 8001664:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	db02      	blt.n	8001680 <main+0x738>
						abnormal_detect = 1;
 800167a:	4b54      	ldr	r3, [pc, #336]	; (80017cc <main+0x884>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]
					//Breath Detection
					humid_data = BSP_HSENSOR_ReadHumidity();
 8001680:	f000 ff50 	bl	8002524 <BSP_HSENSOR_ReadHumidity>
 8001684:	ed87 0aa3 	vstr	s0, [r7, #652]	; 0x28c
					pressure_data = BSP_PSENSOR_ReadPressure();
 8001688:	f000 ffbe 	bl	8002608 <BSP_PSENSOR_ReadPressure>
 800168c:	ed87 0aa2 	vstr	s0, [r7, #648]	; 0x288
					if (humid_data < HUMID_THRESHOLD || pressure_data > PRESS_THRESHOLD)
 8001690:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169c:	ed97 7aa3 	vldr	s14, [r7, #652]	; 0x28c
 80016a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a8:	d40c      	bmi.n	80016c4 <main+0x77c>
 80016aa:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b6:	ed97 7aa2 	vldr	s14, [r7, #648]	; 0x288
 80016ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	dd02      	ble.n	80016ca <main+0x782>
						breath_detect = 1;
 80016c4:	4b42      	ldr	r3, [pc, #264]	; (80017d0 <main+0x888>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
				}//sample if loop

				if (seconds_counter % 40 == 0){ //Print statement every 10s
 80016ca:	f8d7 1270 	ldr.w	r1, [r7, #624]	; 0x270
 80016ce:	4b43      	ldr	r3, [pc, #268]	; (80017dc <main+0x894>)
 80016d0:	fb83 2301 	smull	r2, r3, r3, r1
 80016d4:	111a      	asrs	r2, r3, #4
 80016d6:	17cb      	asrs	r3, r1, #31
 80016d8:	1ad2      	subs	r2, r2, r3
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	1aca      	subs	r2, r1, r3
 80016e4:	2a00      	cmp	r2, #0
 80016e6:	f040 815e 	bne.w	80019a6 <main+0xa5e>
					num++;//transmission increases by 1
 80016ea:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80016ee:	3301      	adds	r3, #1
 80016f0:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
					char data_1_print[32];
					char data_2_print[32];
					char data_3_print[32];

					if (temp_data > TEMP_THRESHOLD) //Print statement immediately when fever is detected
 80016f4:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001700:	ed97 7aa5 	vldr	s14, [r7, #660]	; 0x294
 8001704:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	dd0d      	ble.n	800172a <main+0x7e2>
						HAL_UART_Transmit(&huart1, (uint8_t*)fever_print, strlen(fever_print),0xFFFF);
 800170e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fd5c 	bl	80001d0 <strlen>
 8001718:	4603      	mov	r3, r0
 800171a:	b29a      	uxth	r2, r3
 800171c:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8001720:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001724:	482e      	ldr	r0, [pc, #184]	; (80017e0 <main+0x898>)
 8001726:	f002 fff1 	bl	800470c <HAL_UART_Transmit>

					if(accel_data[2] < ACC_THRESHOLD[2])
 800172a:	ed97 7a94 	vldr	s14, [r7, #592]	; 0x250
 800172e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	d50d      	bpl.n	8001760 <main+0x818>
						HAL_UART_Transmit(&huart1, (uint8_t*)fall_print, strlen(fall_print),0xFFFF);
 8001744:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fd41 	bl	80001d0 <strlen>
 800174e:	4603      	mov	r3, r0
 8001750:	b29a      	uxth	r2, r3
 8001752:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8001756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800175a:	4821      	ldr	r0, [pc, #132]	; (80017e0 <main+0x898>)
 800175c:	f002 ffd6 	bl	800470c <HAL_UART_Transmit>

					sprintf(data_1_print,"%03d_TEMP_%.2f_ACC_%.2f_%.2f_%.2f \r\n", num, temp_data, accel_data[0], accel_data[1], accel_data[2]);
 8001760:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 8001764:	f7fe fef0 	bl	8000548 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fee9 	bl	8000548 <__aeabi_f2d>
 8001776:	4680      	mov	r8, r0
 8001778:	4689      	mov	r9, r1
 800177a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fee2 	bl	8000548 <__aeabi_f2d>
 8001784:	4682      	mov	sl, r0
 8001786:	468b      	mov	fp, r1
 8001788:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fedb 	bl	8000548 <__aeabi_f2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4638      	mov	r0, r7
 8001798:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800179c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80017a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017a4:	e9cd 4500 	strd	r4, r5, [sp]
 80017a8:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 80017ac:	490d      	ldr	r1, [pc, #52]	; (80017e4 <main+0x89c>)
 80017ae:	f004 fd61 	bl	8006274 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)data_1_print, strlen(data_1_print),0xFFFF);
 80017b2:	463b      	mov	r3, r7
 80017b4:	4618      	mov	r0, r3
 80017b6:	e017      	b.n	80017e8 <main+0x8a0>
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40000000 	.word	0x40000000
 80017c0:	200002d0 	.word	0x200002d0
 80017c4:	200002d4 	.word	0x200002d4
 80017c8:	200002d8 	.word	0x200002d8
 80017cc:	200002dc 	.word	0x200002dc
 80017d0:	200002e0 	.word	0x200002e0
 80017d4:	48000400 	.word	0x48000400
 80017d8:	42c80000 	.word	0x42c80000
 80017dc:	66666667 	.word	0x66666667
 80017e0:	200003bc 	.word	0x200003bc
 80017e4:	08008d50 	.word	0x08008d50
 80017e8:	f7fe fcf2 	bl	80001d0 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4639      	mov	r1, r7
 80017f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f6:	486f      	ldr	r0, [pc, #444]	; (80019b4 <main+0xa6c>)
 80017f8:	f002 ff88 	bl	800470c <HAL_UART_Transmit>

					if (gyroscope_data > GYRO_THRESHOLD) //If gyroscope reading is larger than threshold
 80017fc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001808:	ed97 7aa4 	vldr	s14, [r7, #656]	; 0x290
 800180c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	dd0d      	ble.n	8001832 <main+0x8ea>
						HAL_UART_Transmit(&huart1, (uint8_t*)pain_print, strlen(pain_print),0xFFFF);
 8001816:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fcd8 	bl	80001d0 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	b29a      	uxth	r2, r3
 8001824:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8001828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800182c:	4861      	ldr	r0, [pc, #388]	; (80019b4 <main+0xa6c>)
 800182e:	f002 ff6d 	bl	800470c <HAL_UART_Transmit>

					if ((magneto_data[0] >= MAG_THRESHOLD[0]) || (magneto_data[1] >= MAG_THRESHOLD[1]) || (magneto_data[2] >= MAG_THRESHOLD[2]) ) //If magneto reading hits the threshold
 8001832:	ed97 7a8a 	vldr	s14, [r7, #552]	; 0x228
 8001836:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800183a:	ee07 3a90 	vmov	s15, r3
 800183e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	da19      	bge.n	8001880 <main+0x938>
 800184c:	ed97 7a8b 	vldr	s14, [r7, #556]	; 0x22c
 8001850:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	da0c      	bge.n	8001880 <main+0x938>
 8001866:	ed97 7a8c 	vldr	s14, [r7, #560]	; 0x230
 800186a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800186e:	ee07 3a90 	vmov	s15, r3
 8001872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	db0d      	blt.n	800189c <main+0x954>
						HAL_UART_Transmit(&huart1, (uint8_t*)abnormal_print, strlen(abnormal_print),0xFFFF);
 8001880:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fca3 	bl	80001d0 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001896:	4847      	ldr	r0, [pc, #284]	; (80019b4 <main+0xa6c>)
 8001898:	f002 ff38 	bl	800470c <HAL_UART_Transmit>

					sprintf(data_2_print,"%03d GYRO %.1f MAGNETO %.2f %.2f %.2f\r\n", num, gyroscope_data, magneto_data[0], magneto_data[1], magneto_data[2]);
 800189c:	f8d7 0290 	ldr.w	r0, [r7, #656]	; 0x290
 80018a0:	f7fe fe52 	bl	8000548 <__aeabi_f2d>
 80018a4:	4604      	mov	r4, r0
 80018a6:	460d      	mov	r5, r1
 80018a8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe4b 	bl	8000548 <__aeabi_f2d>
 80018b2:	4680      	mov	r8, r0
 80018b4:	4689      	mov	r9, r1
 80018b6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fe44 	bl	8000548 <__aeabi_f2d>
 80018c0:	4682      	mov	sl, r0
 80018c2:	468b      	mov	fp, r1
 80018c4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe3d 	bl	8000548 <__aeabi_f2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	f107 0020 	add.w	r0, r7, #32
 80018d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80018da:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80018de:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80018e2:	e9cd 4500 	strd	r4, r5, [sp]
 80018e6:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 80018ea:	4933      	ldr	r1, [pc, #204]	; (80019b8 <main+0xa70>)
 80018ec:	f004 fcc2 	bl	8006274 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)data_2_print, strlen(data_2_print),0xFFFF);
 80018f0:	f107 0320 	add.w	r3, r7, #32
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fc6b 	bl	80001d0 <strlen>
 80018fa:	4603      	mov	r3, r0
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	f107 0120 	add.w	r1, r7, #32
 8001902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001906:	482b      	ldr	r0, [pc, #172]	; (80019b4 <main+0xa6c>)
 8001908:	f002 ff00 	bl	800470c <HAL_UART_Transmit>

					if (humid_data < HUMID_THRESHOLD || pressure_data > PRESS_THRESHOLD)
 800190c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001918:	ed97 7aa3 	vldr	s14, [r7, #652]	; 0x28c
 800191c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001924:	d40c      	bmi.n	8001940 <main+0x9f8>
 8001926:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001932:	ed97 7aa2 	vldr	s14, [r7, #648]	; 0x288
 8001936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193e:	dd0d      	ble.n	800195c <main+0xa14>
						HAL_UART_Transmit(&huart1, (uint8_t*)breath_print, strlen(breath_print),0xFFFF);
 8001940:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fc43 	bl	80001d0 <strlen>
 800194a:	4603      	mov	r3, r0
 800194c:	b29a      	uxth	r2, r3
 800194e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001956:	4817      	ldr	r0, [pc, #92]	; (80019b4 <main+0xa6c>)
 8001958:	f002 fed8 	bl	800470c <HAL_UART_Transmit>

					sprintf(data_3_print,"%03d HUMIDITY %.2f and BARO %.2f \r\n\n",num, humid_data, pressure_data);
 800195c:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
 8001960:	f7fe fdf2 	bl	8000548 <__aeabi_f2d>
 8001964:	4604      	mov	r4, r0
 8001966:	460d      	mov	r5, r1
 8001968:	f8d7 0288 	ldr.w	r0, [r7, #648]	; 0x288
 800196c:	f7fe fdec 	bl	8000548 <__aeabi_f2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001978:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800197c:	e9cd 4500 	strd	r4, r5, [sp]
 8001980:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8001984:	490d      	ldr	r1, [pc, #52]	; (80019bc <main+0xa74>)
 8001986:	f004 fc75 	bl	8006274 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)data_3_print, strlen(data_3_print),0xFFFF);
 800198a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fc1e 	bl	80001d0 <strlen>
 8001994:	4603      	mov	r3, r0
 8001996:	b29a      	uxth	r2, r3
 8001998:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800199c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <main+0xa6c>)
 80019a2:	f002 feb3 	bl	800470c <HAL_UART_Transmit>
			while (mode == 1){
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <main+0xa78>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	f43f ad20 	beq.w	80013f0 <main+0x4a8>
		if (mode == 0){
 80019b0:	f7ff bb9e 	b.w	80010f0 <main+0x1a8>
 80019b4:	200003bc 	.word	0x200003bc
 80019b8:	08008d78 	.word	0x08008d78
 80019bc:	08008da0 	.word	0x08008da0
 80019c0:	200002cc 	.word	0x200002cc

080019c4 <MX_GPIO_Init>:

	}//end of while (1) loop

}//main loop

static void MX_GPIO_Init(void){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_GPIO_Init+0x5c>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019dc:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <MX_GPIO_Init+0x5c>)
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_GPIO_Init+0x5c>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	683b      	ldr	r3, [r7, #0]
	/*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f6:	480b      	ldr	r0, [pc, #44]	; (8001a24 <MX_GPIO_Init+0x60>)
 80019f8:	f001 ffda 	bl	80039b0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin LED2_Pin */
    GPIO_InitStruct.Pin = LED2_Pin;
 80019fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a00:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4804      	ldr	r0, [pc, #16]	; (8001a24 <MX_GPIO_Init+0x60>)
 8001a14:	f001 fd30 	bl	8003478 <HAL_GPIO_Init>
}
 8001a18:	bf00      	nop
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000
 8001a24:	48000400 	.word	0x48000400

08001a28 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b092      	sub	sp, #72	; 0x48
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13){
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a38:	d148      	bne.n	8001acc <HAL_GPIO_EXTI_Callback+0xa4>
		int time1, time2;

		time1 = HAL_GetTick();
 8001a3a:	f001 fbff 	bl	800323c <HAL_GetTick>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	643b      	str	r3, [r7, #64]	; 0x40
		time2 = HAL_GetTick();
 8001a42:	f001 fbfb 	bl	800323c <HAL_GetTick>
 8001a46:	4603      	mov	r3, r0
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
		while (time2 - time1 < 50) //Read the PB every 50ms
 8001a4a:	e003      	b.n	8001a54 <HAL_GPIO_EXTI_Callback+0x2c>
			time2 = HAL_GetTick();
 8001a4c:	f001 fbf6 	bl	800323c <HAL_GetTick>
 8001a50:	4603      	mov	r3, r0
 8001a52:	647b      	str	r3, [r7, #68]	; 0x44
		while (time2 - time1 < 50) //Read the PB every 50ms
 8001a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b31      	cmp	r3, #49	; 0x31
 8001a5c:	ddf6      	ble.n	8001a4c <HAL_GPIO_EXTI_Callback+0x24>

		current_press = HAL_GetTick();
 8001a5e:	f001 fbed 	bl	800323c <HAL_GetTick>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001a68:	601a      	str	r2, [r3, #0]

		//If 2 presses are within 1sec, change to "ICU Mode"
		if (current_press - previous_press < 1000){
 8001a6a:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a78:	da12      	bge.n	8001aa0 <HAL_GPIO_EXTI_Callback+0x78>
			mode = 1; //Set mode to "ICU Mode"
 8001a7a:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
			fever_detect = 0; //reset fever
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
			fall_detect = 0;
 8001a86:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <HAL_GPIO_EXTI_Callback+0x100>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
			pain_detect = 0;
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x104>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
			abnormal_detect = 0;
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x108>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
			breath_detect = 0;
 8001a98:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e011      	b.n	8001ac4 <HAL_GPIO_EXTI_Callback+0x9c>
		}

		else {
			mode = 0;
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
			fever_detect = 0; //reset fever
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
			fall_detect = 0;
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_GPIO_EXTI_Callback+0x100>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
			pain_detect = 0;
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x104>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
			abnormal_detect = 0;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x108>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
			breath_detect = 0;
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
		}

		previous_press = current_press; //assign previous_press to current_press for comparision when the PB is pressed again
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001aca:	6013      	str	r3, [r2, #0]
	}//if GPIO_PIN_13 loop

	if (GPIO_Pin == LSM6DSL_INT1_EXTI11_Pin){
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ad2:	d11d      	bne.n	8001b10 <HAL_GPIO_EXTI_Callback+0xe8>
		char tilt_message[] = "TILT DETECTED!\r\n";
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x110>)
 8001ad6:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001ada:	461d      	mov	r5, r3
 8001adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae0:	682b      	ldr	r3, [r5, #0]
 8001ae2:	7023      	strb	r3, [r4, #0]
		char tilt_print[32];
		sprintf(tilt_print,"%s", tilt_message);
 8001ae4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f004 fc23 	bl	800633a <strcpy>
		HAL_UART_Transmit(&huart1, (uint8_t*)tilt_print, strlen(tilt_print),0xFFFF);
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fb69 	bl	80001d0 <strlen>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	f107 010c 	add.w	r1, r7, #12
 8001b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b0a:	480c      	ldr	r0, [pc, #48]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x114>)
 8001b0c:	f002 fdfe 	bl	800470c <HAL_UART_Transmit>
	}

}//HAL loop
 8001b10:	bf00      	nop
 8001b12:	3748      	adds	r7, #72	; 0x48
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bdb0      	pop	{r4, r5, r7, pc}
 8001b18:	200002e4 	.word	0x200002e4
 8001b1c:	200002e8 	.word	0x200002e8
 8001b20:	200002cc 	.word	0x200002cc
 8001b24:	200002d0 	.word	0x200002d0
 8001b28:	200002d4 	.word	0x200002d4
 8001b2c:	200002d8 	.word	0x200002d8
 8001b30:	200002dc 	.word	0x200002dc
 8001b34:	200002e0 	.word	0x200002e0
 8001b38:	08008e88 	.word	0x08008e88
 8001b3c:	200003bc 	.word	0x200003bc

08001b40 <UART1_Init>:

static void UART1_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
	/* Pin configuration for UART. BSP_COM_Init() can do this automatically */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <UART1_Init+0xa0>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <UART1_Init+0xa0>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <UART1_Init+0xa0>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001b70:	23c0      	movs	r3, #192	; 0xc0
 8001b72:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4817      	ldr	r0, [pc, #92]	; (8001be4 <UART1_Init+0xa4>)
 8001b86:	f001 fc77 	bl	8003478 <HAL_GPIO_Init>

	/* Configuring UART1 */
	huart1.Instance = USART1;
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <UART1_Init+0xa8>)
 8001b8c:	4a17      	ldr	r2, [pc, #92]	; (8001bec <UART1_Init+0xac>)
 8001b8e:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <UART1_Init+0xa8>)
 8001b92:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b96:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <UART1_Init+0xa8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <UART1_Init+0xa8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <UART1_Init+0xa8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <UART1_Init+0xa8>)
 8001bac:	220c      	movs	r2, #12
 8001bae:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <UART1_Init+0xa8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <UART1_Init+0xa8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <UART1_Init+0xa8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <UART1_Init+0xa8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bc8:	4807      	ldr	r0, [pc, #28]	; (8001be8 <UART1_Init+0xa8>)
 8001bca:	f002 fd51 	bl	8004670 <HAL_UART_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d000      	beq.n	8001bd6 <UART1_Init+0x96>
	{
		while(1);
 8001bd4:	e7fe      	b.n	8001bd4 <UART1_Init+0x94>
	}
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	48000400 	.word	0x48000400
 8001be8:	200003bc 	.word	0x200003bc
 8001bec:	40013800 	.word	0x40013800

08001bf0 <EXTI_PD11_Init>:

static void EXTI_PD11_Init(void){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef TILT_InitStruct;

	/* Enable the GPIO D's clock */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <EXTI_PD11_Init+0x54>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <EXTI_PD11_Init+0x54>)
 8001bfc:	f043 0308 	orr.w	r3, r3, #8
 8001c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <EXTI_PD11_Init+0x54>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]

	/* Configure LSM6DSL pin (PD11) as input with External interrupt */
	TILT_InitStruct.Pin = LSM6DSL_INT1_EXTI11_Pin;
 8001c0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c12:	607b      	str	r3, [r7, #4]
	TILT_InitStruct.Pull = GPIO_PULLUP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
	TILT_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	613b      	str	r3, [r7, #16]

	TILT_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <EXTI_PD11_Init+0x58>)
 8001c1e:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_Init(LSM6DSL_INT1_EXTI11_GPIO_Port, &TILT_InitStruct);
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4809      	ldr	r0, [pc, #36]	; (8001c4c <EXTI_PD11_Init+0x5c>)
 8001c26:	f001 fc27 	bl	8003478 <HAL_GPIO_Init>

	/* Enable and set TILT EXTI Interrupt to the 01 sub priority */
	HAL_NVIC_SetPriority((IRQn_Type)(LSM6DSL_INT1_EXTI11_EXTI_IRQn), 0x0F, 0x01);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	210f      	movs	r1, #15
 8001c2e:	2028      	movs	r0, #40	; 0x28
 8001c30:	f001 fbeb 	bl	800340a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ((IRQn_Type)(LSM6DSL_INT1_EXTI11_EXTI_IRQn));
 8001c34:	2028      	movs	r0, #40	; 0x28
 8001c36:	f001 fc04 	bl	8003442 <HAL_NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	10110000 	.word	0x10110000
 8001c4c:	48000c00 	.word	0x48000c00

08001c50 <LSM6DSL_Init>:

static void LSM6DSL_Init(void){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	//Configuring Registers For Tilt Detection
	//Slave address for I2C = 1101 010x
	//For Write: x = 0, Slave address = 0xD4
	//For Read: x = 1, Slave address = 0xD5

	SENSOR_IO_Write(0xD4, LSM6DSL_ACC_GYRO_CTRL1_XL,0x20);
 8001c54:	2220      	movs	r2, #32
 8001c56:	2110      	movs	r1, #16
 8001c58:	20d4      	movs	r0, #212	; 0xd4
 8001c5a:	f000 fb3d 	bl	80022d8 <SENSOR_IO_Write>

	//1 both the FUNC_EN and the TILT_EN bits of the CTRL10_C register: 0000 1100 (0x0C)
	SENSOR_IO_Write(0xD4, LSM6DSL_ACC_GYRO_CTRL10_C, 0x0C);
 8001c5e:	220c      	movs	r2, #12
 8001c60:	2119      	movs	r1, #25
 8001c62:	20d4      	movs	r0, #212	; 0xd4
 8001c64:	f000 fb38 	bl	80022d8 <SENSOR_IO_Write>

	//1 the INT1_TILT bit of the MD1_CFG register: 0000 0010 (0x02)
	SENSOR_IO_Write(0xD4, LSM6DSL_ACC_GYRO_MD1_CFG, 0x02);
 8001c68:	2202      	movs	r2, #2
 8001c6a:	215e      	movs	r1, #94	; 0x5e
 8001c6c:	20d4      	movs	r0, #212	; 0xd4
 8001c6e:	f000 fb33 	bl	80022d8 <SENSOR_IO_Write>
	//SENSOR_IO_Write(0xD6, LSM6DSL_ACC_GYRO_TAP_CFG1, 0x01);

	//SENSOR_IO_Write(0xD6, LSM6DSL_ACC_GYRO_INT1_CTRL, 0x03);

	//SENSOR_IO_Write(0xD6, LSM6DSL_ACC_GYRO_FUNC_SRC, 0x20);
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_MspInit+0x44>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <HAL_MspInit+0x44>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6613      	str	r3, [r2, #96]	; 0x60
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_MspInit+0x44>)
 8001c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_MspInit+0x44>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_MspInit+0x44>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_MspInit+0x44>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <HAL_I2C_MspInit+0x7c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d128      	bne.n	8001d34 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_I2C_MspInit+0x80>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce6:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <HAL_I2C_MspInit+0x80>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_I2C_MspInit+0x80>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001cfa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d00:	2312      	movs	r3, #18
 8001d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d04:	2301      	movs	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	480b      	ldr	r0, [pc, #44]	; (8001d44 <HAL_I2C_MspInit+0x84>)
 8001d18:	f001 fbae 	bl	8003478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_I2C_MspInit+0x80>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <HAL_I2C_MspInit+0x80>)
 8001d22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d26:	6593      	str	r3, [r2, #88]	; 0x58
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_I2C_MspInit+0x80>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40005800 	.word	0x40005800
 8001d40:	40021000 	.word	0x40021000
 8001d44:	48000400 	.word	0x48000400

08001d48 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_I2C_MspDeInit+0x30>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10a      	bne.n	8001d70 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_I2C_MspDeInit+0x34>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <HAL_I2C_MspDeInit+0x34>)
 8001d60:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8001d66:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <HAL_I2C_MspDeInit+0x38>)
 8001d6c:	f001 fd2c 	bl	80037c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40005800 	.word	0x40005800
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	48000400 	.word	0x48000400

08001d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08c      	sub	sp, #48	; 0x30
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a2e      	ldr	r2, [pc, #184]	; (8001e5c <HAL_UART_MspInit+0xd8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d128      	bne.n	8001df8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001da6:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <HAL_UART_MspInit+0xdc>)
 8001da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001daa:	4a2d      	ldr	r2, [pc, #180]	; (8001e60 <HAL_UART_MspInit+0xdc>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6613      	str	r3, [r2, #96]	; 0x60
 8001db2:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <HAL_UART_MspInit+0xdc>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_UART_MspInit+0xdc>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <HAL_UART_MspInit+0xdc>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_UART_MspInit+0xdc>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001dd6:	23c0      	movs	r3, #192	; 0xc0
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001de6:	2307      	movs	r3, #7
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	4619      	mov	r1, r3
 8001df0:	481c      	ldr	r0, [pc, #112]	; (8001e64 <HAL_UART_MspInit+0xe0>)
 8001df2:	f001 fb41 	bl	8003478 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001df6:	e02d      	b.n	8001e54 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <HAL_UART_MspInit+0xe4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d128      	bne.n	8001e54 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_UART_MspInit+0xdc>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <HAL_UART_MspInit+0xdc>)
 8001e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_UART_MspInit+0xdc>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_UART_MspInit+0xdc>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <HAL_UART_MspInit+0xdc>)
 8001e20:	f043 0308 	orr.w	r3, r3, #8
 8001e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_UART_MspInit+0xdc>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001e32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e44:	2307      	movs	r3, #7
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4807      	ldr	r0, [pc, #28]	; (8001e6c <HAL_UART_MspInit+0xe8>)
 8001e50:	f001 fb12 	bl	8003478 <HAL_GPIO_Init>
}
 8001e54:	bf00      	nop
 8001e56:	3730      	adds	r7, #48	; 0x30
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	40021000 	.word	0x40021000
 8001e64:	48000400 	.word	0x48000400
 8001e68:	40004800 	.word	0x40004800
 8001e6c:	48000c00 	.word	0x48000c00

08001e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec4:	f001 f9a8 	bl	8003218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001ed0:	2020      	movs	r0, #32
 8001ed2:	f001 fd9f 	bl	8003a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ed6:	2040      	movs	r0, #64	; 0x40
 8001ed8:	f001 fd9c 	bl	8003a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001edc:	2080      	movs	r0, #128	; 0x80
 8001ede:	f001 fd99 	bl	8003a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ee2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ee6:	f001 fd95 	bl	8003a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}

08001eee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001ef2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ef6:	f001 fd8d 	bl	8003a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001efa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001efe:	f001 fd89 	bl	8003a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f02:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f06:	f001 fd85 	bl	8003a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001f0a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f0e:	f001 fd81 	bl	8003a14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001f12:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f16:	f001 fd7d 	bl	8003a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <_sbrk+0x50>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <_sbrk+0x16>
		heap_end = &end;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <_sbrk+0x50>)
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <_sbrk+0x54>)
 8001f34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <_sbrk+0x50>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <_sbrk+0x50>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	466a      	mov	r2, sp
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d907      	bls.n	8001f5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f4a:	f003 fbc5 	bl	80056d8 <__errno>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	230c      	movs	r3, #12
 8001f52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	e006      	b.n	8001f68 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <_sbrk+0x50>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a03      	ldr	r2, [pc, #12]	; (8001f70 <_sbrk+0x50>)
 8001f64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	200002ec 	.word	0x200002ec
 8001f74:	20000510 	.word	0x20000510

08001f78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <SystemInit+0x64>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	4a16      	ldr	r2, [pc, #88]	; (8001fdc <SystemInit+0x64>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <SystemInit+0x68>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <SystemInit+0x68>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <SystemInit+0x68>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <SystemInit+0x68>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a0f      	ldr	r2, [pc, #60]	; (8001fe0 <SystemInit+0x68>)
 8001fa4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001fa8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001fac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <SystemInit+0x68>)
 8001fb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fb4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <SystemInit+0x68>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <SystemInit+0x68>)
 8001fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <SystemInit+0x68>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <SystemInit+0x64>)
 8001fca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fce:	609a      	str	r2, [r3, #8]
#endif
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000ed00 	.word	0xe000ed00
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800201c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001fe8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fea:	e003      	b.n	8001ff4 <LoopCopyDataInit>

08001fec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001fee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ff0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ff2:	3104      	adds	r1, #4

08001ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ff4:	480b      	ldr	r0, [pc, #44]	; (8002024 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ff8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ffa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ffc:	d3f6      	bcc.n	8001fec <CopyDataInit>
	ldr	r2, =_sbss
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002000:	e002      	b.n	8002008 <LoopFillZerobss>

08002002 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002002:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002004:	f842 3b04 	str.w	r3, [r2], #4

08002008 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <LoopForever+0x16>)
	cmp	r2, r3
 800200a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800200c:	d3f9      	bcc.n	8002002 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800200e:	f7ff ffb3 	bl	8001f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002012:	f003 fc31 	bl	8005878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002016:	f7fe ff97 	bl	8000f48 <main>

0800201a <LoopForever>:

LoopForever:
    b LoopForever
 800201a:	e7fe      	b.n	800201a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800201c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002020:	08009210 	.word	0x08009210
	ldr	r0, =_sdata
 8002024:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002028:	200002b0 	.word	0x200002b0
	ldr	r2, =_sbss
 800202c:	200002b0 	.word	0x200002b0
	ldr	r3, = _ebss
 8002030:	20000510 	.word	0x20000510

08002034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002034:	e7fe      	b.n	8002034 <ADC1_2_IRQHandler>
	...

08002038 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	460a      	mov	r2, r1
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	4613      	mov	r3, r2
 8002046:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8002048:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <BSP_PB_Init+0xa0>)
 800204a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204c:	4a22      	ldr	r2, [pc, #136]	; (80020d8 <BSP_PB_Init+0xa0>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002054:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <BSP_PB_Init+0xa0>)
 8002056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002060:	79bb      	ldrb	r3, [r7, #6]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d112      	bne.n	800208c <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800206a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800206c:	2300      	movs	r3, #0
 800206e:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002074:	2302      	movs	r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	4a18      	ldr	r2, [pc, #96]	; (80020dc <BSP_PB_Init+0xa4>)
 800207c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002080:	f107 020c 	add.w	r2, r7, #12
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f001 f9f6 	bl	8003478 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800208c:	79bb      	ldrb	r3, [r7, #6]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d11e      	bne.n	80020d0 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002096:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8002098:	2301      	movs	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209c:	2303      	movs	r3, #3
 800209e:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <BSP_PB_Init+0xa8>)
 80020a2:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <BSP_PB_Init+0xa4>)
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	f107 020c 	add.w	r2, r7, #12
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f001 f9e0 	bl	8003478 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80020b8:	2328      	movs	r3, #40	; 0x28
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	2200      	movs	r2, #0
 80020be:	210f      	movs	r1, #15
 80020c0:	4618      	mov	r0, r3
 80020c2:	f001 f9a2 	bl	800340a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80020c6:	2328      	movs	r3, #40	; 0x28
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f001 f9b9 	bl	8003442 <HAL_NVIC_EnableIRQ>
  }
}
 80020d0:	bf00      	nop
 80020d2:	3720      	adds	r7, #32
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	20000004 	.word	0x20000004
 80020e0:	10110000 	.word	0x10110000

080020e4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <I2Cx_MspInit+0xa8>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	4a26      	ldr	r2, [pc, #152]	; (800218c <I2Cx_MspInit+0xa8>)
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <I2Cx_MspInit+0xa8>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002104:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002108:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800210a:	2312      	movs	r3, #18
 800210c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800210e:	2301      	movs	r3, #1
 8002110:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002116:	2304      	movs	r3, #4
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	481b      	ldr	r0, [pc, #108]	; (8002190 <I2Cx_MspInit+0xac>)
 8002122:	f001 f9a9 	bl	8003478 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4619      	mov	r1, r3
 800212c:	4818      	ldr	r0, [pc, #96]	; (8002190 <I2Cx_MspInit+0xac>)
 800212e:	f001 f9a3 	bl	8003478 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <I2Cx_MspInit+0xa8>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	4a15      	ldr	r2, [pc, #84]	; (800218c <I2Cx_MspInit+0xa8>)
 8002138:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800213c:	6593      	str	r3, [r2, #88]	; 0x58
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <I2Cx_MspInit+0xa8>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <I2Cx_MspInit+0xa8>)
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	4a0f      	ldr	r2, [pc, #60]	; (800218c <I2Cx_MspInit+0xa8>)
 8002150:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002154:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <I2Cx_MspInit+0xa8>)
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	4a0c      	ldr	r2, [pc, #48]	; (800218c <I2Cx_MspInit+0xa8>)
 800215c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002160:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	210f      	movs	r1, #15
 8002166:	2021      	movs	r0, #33	; 0x21
 8002168:	f001 f94f 	bl	800340a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800216c:	2021      	movs	r0, #33	; 0x21
 800216e:	f001 f968 	bl	8003442 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	210f      	movs	r1, #15
 8002176:	2022      	movs	r0, #34	; 0x22
 8002178:	f001 f947 	bl	800340a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800217c:	2022      	movs	r0, #34	; 0x22
 800217e:	f001 f960 	bl	8003442 <HAL_NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	; 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	48000400 	.word	0x48000400

08002194 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <I2Cx_Init+0x54>)
 80021a0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <I2Cx_Init+0x58>)
 80021a6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff89 	bl	80020e4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f001 fc36 	bl	8003a44 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80021d8:	2100      	movs	r1, #0
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f002 f93a 	bl	8004454 <HAL_I2CEx_ConfigAnalogFilter>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40005800 	.word	0x40005800
 80021ec:	00702681 	.word	0x00702681

080021f0 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af04      	add	r7, sp, #16
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	72fb      	strb	r3, [r7, #11]
 8002202:	460b      	mov	r3, r1
 8002204:	813b      	strh	r3, [r7, #8]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	b299      	uxth	r1, r3
 8002212:	88f8      	ldrh	r0, [r7, #6]
 8002214:	893a      	ldrh	r2, [r7, #8]
 8002216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221a:	9302      	str	r3, [sp, #8]
 800221c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	4603      	mov	r3, r0
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f001 fdde 	bl	8003de8 <HAL_I2C_Mem_Read>
 800222c:	4603      	mov	r3, r0
 800222e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d004      	beq.n	8002240 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	4619      	mov	r1, r3
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f832 	bl	80022a4 <I2Cx_Error>
  }
  return status;
 8002240:	7dfb      	ldrb	r3, [r7, #23]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b08a      	sub	sp, #40	; 0x28
 800224e:	af04      	add	r7, sp, #16
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	4608      	mov	r0, r1
 8002254:	4611      	mov	r1, r2
 8002256:	461a      	mov	r2, r3
 8002258:	4603      	mov	r3, r0
 800225a:	72fb      	strb	r3, [r7, #11]
 800225c:	460b      	mov	r3, r1
 800225e:	813b      	strh	r3, [r7, #8]
 8002260:	4613      	mov	r3, r2
 8002262:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	b299      	uxth	r1, r3
 800226c:	88f8      	ldrh	r0, [r7, #6]
 800226e:	893a      	ldrh	r2, [r7, #8]
 8002270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002274:	9302      	str	r3, [sp, #8]
 8002276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	4603      	mov	r3, r0
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f001 fc9d 	bl	8003bc0 <HAL_I2C_Mem_Write>
 8002286:	4603      	mov	r3, r0
 8002288:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800228a:	7dfb      	ldrb	r3, [r7, #23]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002290:	7afb      	ldrb	r3, [r7, #11]
 8002292:	4619      	mov	r1, r3
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f805 	bl	80022a4 <I2Cx_Error>
  }
  return status;
 800229a:	7dfb      	ldrb	r3, [r7, #23]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f001 fc56 	bl	8003b62 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ff6c 	bl	8002194 <I2Cx_Init>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <SENSOR_IO_Init+0x10>)
 80022ca:	f7ff ff63 	bl	8002194 <I2Cx_Init>
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200004bc 	.word	0x200004bc

080022d8 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af02      	add	r7, sp, #8
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
 80022e2:	460b      	mov	r3, r1
 80022e4:	71bb      	strb	r3, [r7, #6]
 80022e6:	4613      	mov	r3, r2
 80022e8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80022ea:	79bb      	ldrb	r3, [r7, #6]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	79f9      	ldrb	r1, [r7, #7]
 80022f0:	2301      	movs	r3, #1
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	1d7b      	adds	r3, r7, #5
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2301      	movs	r3, #1
 80022fa:	4803      	ldr	r0, [pc, #12]	; (8002308 <SENSOR_IO_Write+0x30>)
 80022fc:	f7ff ffa5 	bl	800224a <I2Cx_WriteMultiple>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200004bc 	.word	0x200004bc

0800230c <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af02      	add	r7, sp, #8
 8002312:	4603      	mov	r3, r0
 8002314:	460a      	mov	r2, r1
 8002316:	71fb      	strb	r3, [r7, #7]
 8002318:	4613      	mov	r3, r2
 800231a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002320:	79bb      	ldrb	r3, [r7, #6]
 8002322:	b29a      	uxth	r2, r3
 8002324:	79f9      	ldrb	r1, [r7, #7]
 8002326:	2301      	movs	r3, #1
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	f107 030f 	add.w	r3, r7, #15
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2301      	movs	r3, #1
 8002332:	4804      	ldr	r0, [pc, #16]	; (8002344 <SENSOR_IO_Read+0x38>)
 8002334:	f7ff ff5c 	bl	80021f0 <I2Cx_ReadMultiple>

  return read_value;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200004bc 	.word	0x200004bc

08002348 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af02      	add	r7, sp, #8
 800234e:	603a      	str	r2, [r7, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
 8002356:	460b      	mov	r3, r1
 8002358:	71bb      	strb	r3, [r7, #6]
 800235a:	4613      	mov	r3, r2
 800235c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800235e:	79bb      	ldrb	r3, [r7, #6]
 8002360:	b29a      	uxth	r2, r3
 8002362:	79f9      	ldrb	r1, [r7, #7]
 8002364:	88bb      	ldrh	r3, [r7, #4]
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2301      	movs	r3, #1
 800236e:	4804      	ldr	r0, [pc, #16]	; (8002380 <SENSOR_IO_ReadMultiple+0x38>)
 8002370:	f7ff ff3e 	bl	80021f0 <I2Cx_ReadMultiple>
 8002374:	4603      	mov	r3, r0
 8002376:	b29b      	uxth	r3, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	200004bc 	.word	0x200004bc

08002384 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800238e:	2300      	movs	r3, #0
 8002390:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002392:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <BSP_ACCELERO_Init+0x74>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4798      	blx	r3
 8002398:	4603      	mov	r3, r0
 800239a:	2b6a      	cmp	r3, #106	; 0x6a
 800239c:	d002      	beq.n	80023a4 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	e024      	b.n	80023ee <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <BSP_ACCELERO_Init+0x78>)
 80023a6:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <BSP_ACCELERO_Init+0x74>)
 80023a8:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80023aa:	2330      	movs	r3, #48	; 0x30
 80023ac:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80023b2:	2300      	movs	r3, #0
 80023b4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80023b6:	2340      	movs	r3, #64	; 0x40
 80023b8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80023c2:	797a      	ldrb	r2, [r7, #5]
 80023c4:	7abb      	ldrb	r3, [r7, #10]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80023cc:	7a3b      	ldrb	r3, [r7, #8]
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	b21b      	sxth	r3, r3
 80023e0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <BSP_ACCELERO_Init+0x78>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	89ba      	ldrh	r2, [r7, #12]
 80023ea:	4610      	mov	r0, r2
 80023ec:	4798      	blx	r3
  }  

  return ret;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000064 	.word	0x20000064
 80023fc:	200002f0 	.word	0x200002f0

08002400 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d009      	beq.n	8002424 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	2b00      	cmp	r3, #0
 8002418:	d004      	beq.n	8002424 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
    }
  }
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200002f0 	.word	0x200002f0

08002430 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800243a:	2300      	movs	r3, #0
 800243c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <BSP_GYRO_Init+0x7c>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4798      	blx	r3
 8002444:	4603      	mov	r3, r0
 8002446:	2b6a      	cmp	r3, #106	; 0x6a
 8002448:	d002      	beq.n	8002450 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e028      	b.n	80024a2 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <BSP_GYRO_Init+0x80>)
 8002452:	4a16      	ldr	r2, [pc, #88]	; (80024ac <BSP_GYRO_Init+0x7c>)
 8002454:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800245a:	2330      	movs	r3, #48	; 0x30
 800245c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002466:	2340      	movs	r3, #64	; 0x40
 8002468:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800246e:	230c      	movs	r3, #12
 8002470:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8002472:	7aba      	ldrb	r2, [r7, #10]
 8002474:	797b      	ldrb	r3, [r7, #5]
 8002476:	4313      	orrs	r3, r2
 8002478:	b2db      	uxtb	r3, r3
 800247a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800247c:	7a3b      	ldrb	r3, [r7, #8]
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	b2db      	uxtb	r3, r3
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	b21a      	sxth	r2, r3
 8002488:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	b21b      	sxth	r3, r3
 8002490:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <BSP_GYRO_Init+0x80>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	89ba      	ldrh	r2, [r7, #12]
 800249a:	4610      	mov	r0, r2
 800249c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000098 	.word	0x20000098
 80024b0:	200002f4 	.word	0x200002f4

080024b4 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <BSP_GYRO_GetXYZ+0x2c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <BSP_GYRO_GetXYZ+0x2c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <BSP_GYRO_GetXYZ+0x2c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
    }
  }
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	200002f4 	.word	0x200002f4

080024e4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <BSP_HSENSOR_Init+0x38>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	20be      	movs	r0, #190	; 0xbe
 80024f0:	4798      	blx	r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	2bbc      	cmp	r3, #188	; 0xbc
 80024f6:	d002      	beq.n	80024fe <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	e009      	b.n	8002512 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <BSP_HSENSOR_Init+0x3c>)
 8002500:	4a06      	ldr	r2, [pc, #24]	; (800251c <BSP_HSENSOR_Init+0x38>)
 8002502:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <BSP_HSENSOR_Init+0x3c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	20be      	movs	r0, #190	; 0xbe
 800250c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002512:	687b      	ldr	r3, [r7, #4]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000008 	.word	0x20000008
 8002520:	200002f8 	.word	0x200002f8

08002524 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <BSP_HSENSOR_ReadHumidity+0x18>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	20be      	movs	r0, #190	; 0xbe
 8002530:	4798      	blx	r3
 8002532:	eef0 7a40 	vmov.f32	s15, s0
}
 8002536:	eeb0 0a67 	vmov.f32	s0, s15
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200002f8 	.word	0x200002f8

08002540 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <BSP_MAGNETO_Init+0x50>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4798      	blx	r3
 8002550:	4603      	mov	r3, r0
 8002552:	2b3d      	cmp	r3, #61	; 0x3d
 8002554:	d002      	beq.n	800255c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	71fb      	strb	r3, [r7, #7]
 800255a:	e013      	b.n	8002584 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800255c:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <BSP_MAGNETO_Init+0x54>)
 800255e:	4a0c      	ldr	r2, [pc, #48]	; (8002590 <BSP_MAGNETO_Init+0x50>)
 8002560:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8002562:	2358      	movs	r3, #88	; 0x58
 8002564:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002566:	2300      	movs	r3, #0
 8002568:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800256a:	2300      	movs	r3, #0
 800256c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800256e:	2308      	movs	r3, #8
 8002570:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002572:	2340      	movs	r3, #64	; 0x40
 8002574:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <BSP_MAGNETO_Init+0x54>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	463a      	mov	r2, r7
 800257e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002582:	4798      	blx	r3
  } 

  return ret;  
 8002584:	79fb      	ldrb	r3, [r7, #7]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000024 	.word	0x20000024
 8002594:	200002fc 	.word	0x200002fc

08002598 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <BSP_MAGNETO_GetXYZ+0x2c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d009      	beq.n	80025bc <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <BSP_MAGNETO_GetXYZ+0x2c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <BSP_MAGNETO_GetXYZ+0x2c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
    }
  }
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	200002fc 	.word	0x200002fc

080025c8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <BSP_PSENSOR_Init+0x38>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	20ba      	movs	r0, #186	; 0xba
 80025d4:	4798      	blx	r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	2bb1      	cmp	r3, #177	; 0xb1
 80025da:	d002      	beq.n	80025e2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	e009      	b.n	80025f6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <BSP_PSENSOR_Init+0x3c>)
 80025e4:	4a06      	ldr	r2, [pc, #24]	; (8002600 <BSP_PSENSOR_Init+0x38>)
 80025e6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <BSP_PSENSOR_Init+0x3c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	20ba      	movs	r0, #186	; 0xba
 80025f0:	4798      	blx	r3
    ret = PSENSOR_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80025f6:	687b      	ldr	r3, [r7, #4]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000058 	.word	0x20000058
 8002604:	20000300 	.word	0x20000300

08002608 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <BSP_PSENSOR_ReadPressure+0x18>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	20ba      	movs	r0, #186	; 0xba
 8002614:	4798      	blx	r3
 8002616:	eef0 7a40 	vmov.f32	s15, s0
}
 800261a:	eeb0 0a67 	vmov.f32	s0, s15
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000300 	.word	0x20000300

08002624 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <BSP_TSENSOR_Init+0x30>)
 8002630:	4a09      	ldr	r2, [pc, #36]	; (8002658 <BSP_TSENSOR_Init+0x34>)
 8002632:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002634:	f7ff fe46 	bl	80022c4 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <BSP_TSENSOR_Init+0x30>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2100      	movs	r1, #0
 8002640:	20be      	movs	r0, #190	; 0xbe
 8002642:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002648:	79fb      	ldrb	r3, [r7, #7]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000304 	.word	0x20000304
 8002658:	20000014 	.word	0x20000014

0800265c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <BSP_TSENSOR_ReadTemp+0x18>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	20be      	movs	r0, #190	; 0xbe
 8002668:	4798      	blx	r3
 800266a:	eef0 7a40 	vmov.f32	s15, s0
}
 800266e:	eeb0 0a67 	vmov.f32	s0, s15
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000304 	.word	0x20000304

08002678 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2120      	movs	r1, #32
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fe3f 	bl	800230c <SENSOR_IO_Read>
 800268e:	4603      	mov	r3, r0
 8002690:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	f023 0304 	bic.w	r3, r3, #4
 8002698:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	f023 0303 	bic.w	r3, r3, #3
 80026a8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026b8:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	2120      	movs	r1, #32
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fe08 	bl	80022d8 <SENSOR_IO_Write>
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80026de:	f7ff fdf1 	bl	80022c4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	210f      	movs	r1, #15
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fe0f 	bl	800230c <SENSOR_IO_Read>
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	b2d8      	uxtb	r0, r3
 800270a:	f107 020c 	add.w	r2, r7, #12
 800270e:	2302      	movs	r3, #2
 8002710:	21b0      	movs	r1, #176	; 0xb0
 8002712:	f7ff fe19 	bl	8002348 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002716:	7b3b      	ldrb	r3, [r7, #12]
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800271e:	7b7b      	ldrb	r3, [r7, #13]
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	b2d8      	uxtb	r0, r3
 800272a:	f107 020c 	add.w	r2, r7, #12
 800272e:	2302      	movs	r3, #2
 8002730:	21b6      	movs	r1, #182	; 0xb6
 8002732:	f7ff fe09 	bl	8002348 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002736:	7b7b      	ldrb	r3, [r7, #13]
 8002738:	021b      	lsls	r3, r3, #8
 800273a:	b21a      	sxth	r2, r3
 800273c:	7b3b      	ldrb	r3, [r7, #12]
 800273e:	b21b      	sxth	r3, r3
 8002740:	4313      	orrs	r3, r2
 8002742:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	b2d8      	uxtb	r0, r3
 8002748:	f107 020c 	add.w	r2, r7, #12
 800274c:	2302      	movs	r3, #2
 800274e:	21ba      	movs	r1, #186	; 0xba
 8002750:	f7ff fdfa 	bl	8002348 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002754:	7b7b      	ldrb	r3, [r7, #13]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	b21a      	sxth	r2, r3
 800275a:	7b3b      	ldrb	r3, [r7, #12]
 800275c:	b21b      	sxth	r3, r3
 800275e:	4313      	orrs	r3, r2
 8002760:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	b2d8      	uxtb	r0, r3
 8002766:	f107 020c 	add.w	r2, r7, #12
 800276a:	2302      	movs	r3, #2
 800276c:	21a8      	movs	r1, #168	; 0xa8
 800276e:	f7ff fdeb 	bl	8002348 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002772:	7b7b      	ldrb	r3, [r7, #13]
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	b21a      	sxth	r2, r3
 8002778:	7b3b      	ldrb	r3, [r7, #12]
 800277a:	b21b      	sxth	r3, r3
 800277c:	4313      	orrs	r3, r2
 800277e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002780:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002784:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002792:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002796:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	ee07 3a90 	vmov	s15, r3
 80027a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027a8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80027ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ce:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80027d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80027d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80027da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027de:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80027e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80027e6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800282c <HTS221_H_ReadHumidity+0x130>
 80027ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	dd01      	ble.n	80027f8 <HTS221_H_ReadHumidity+0xfc>
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <HTS221_H_ReadHumidity+0x134>)
 80027f6:	e00a      	b.n	800280e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80027f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80027fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002804:	d502      	bpl.n	800280c <HTS221_H_ReadHumidity+0x110>
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	e000      	b.n	800280e <HTS221_H_ReadHumidity+0x112>
 800280c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800280e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002810:	edd7 7a04 	vldr	s15, [r7, #16]
 8002814:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002818:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800281c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002820:	eeb0 0a67 	vmov.f32	s0, s15
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	447a0000 	.word	0x447a0000
 8002830:	447a0000 	.word	0x447a0000

08002834 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2120      	movs	r1, #32
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fd60 	bl	800230c <SENSOR_IO_Read>
 800284c:	4603      	mov	r3, r0
 800284e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	f023 0304 	bic.w	r3, r3, #4
 8002856:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	f023 0303 	bic.w	r3, r3, #3
 8002866:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002876:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	2120      	movs	r1, #32
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fd29 	bl	80022d8 <SENSOR_IO_Write>
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b088      	sub	sp, #32
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	b2d8      	uxtb	r0, r3
 800289c:	f107 0208 	add.w	r2, r7, #8
 80028a0:	2302      	movs	r3, #2
 80028a2:	21b2      	movs	r1, #178	; 0xb2
 80028a4:	f7ff fd50 	bl	8002348 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2135      	movs	r1, #53	; 0x35
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fd2c 	bl	800230c <SENSOR_IO_Read>
 80028b4:	4603      	mov	r3, r0
 80028b6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80028b8:	7ffb      	ldrb	r3, [r7, #31]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	b21b      	sxth	r3, r3
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	b21a      	sxth	r2, r3
 80028c4:	7a3b      	ldrb	r3, [r7, #8]
 80028c6:	b21b      	sxth	r3, r3
 80028c8:	4313      	orrs	r3, r2
 80028ca:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80028cc:	7ffb      	ldrb	r3, [r7, #31]
 80028ce:	019b      	lsls	r3, r3, #6
 80028d0:	b21b      	sxth	r3, r3
 80028d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d6:	b21a      	sxth	r2, r3
 80028d8:	7a7b      	ldrb	r3, [r7, #9]
 80028da:	b21b      	sxth	r3, r3
 80028dc:	4313      	orrs	r3, r2
 80028de:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80028e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028e4:	10db      	asrs	r3, r3, #3
 80028e6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80028e8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80028ec:	10db      	asrs	r3, r3, #3
 80028ee:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	b2d8      	uxtb	r0, r3
 80028f4:	f107 0208 	add.w	r2, r7, #8
 80028f8:	2304      	movs	r3, #4
 80028fa:	21bc      	movs	r1, #188	; 0xbc
 80028fc:	f7ff fd24 	bl	8002348 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002900:	7a7b      	ldrb	r3, [r7, #9]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	b21a      	sxth	r2, r3
 8002906:	7a3b      	ldrb	r3, [r7, #8]
 8002908:	b21b      	sxth	r3, r3
 800290a:	4313      	orrs	r3, r2
 800290c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800290e:	7afb      	ldrb	r3, [r7, #11]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	b21a      	sxth	r2, r3
 8002914:	7abb      	ldrb	r3, [r7, #10]
 8002916:	b21b      	sxth	r3, r3
 8002918:	4313      	orrs	r3, r2
 800291a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	b2d8      	uxtb	r0, r3
 8002920:	f107 0208 	add.w	r2, r7, #8
 8002924:	2302      	movs	r3, #2
 8002926:	21aa      	movs	r1, #170	; 0xaa
 8002928:	f7ff fd0e 	bl	8002348 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800292c:	7a7b      	ldrb	r3, [r7, #9]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	b21a      	sxth	r2, r3
 8002932:	7a3b      	ldrb	r3, [r7, #8]
 8002934:	b21b      	sxth	r3, r3
 8002936:	4313      	orrs	r3, r2
 8002938:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800293a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800293e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800294c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002950:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002962:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002966:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002978:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800297c:	ee07 3a90 	vmov	s15, r3
 8002980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002988:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	ee07 3a90 	vmov	s15, r3
}
 8002992:	eeb0 0a67 	vmov.f32	s0, s15
 8002996:	3720      	adds	r7, #32
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	463b      	mov	r3, r7
 80029a4:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80029a8:	783b      	ldrb	r3, [r7, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	2120      	movs	r1, #32
 80029ae:	203c      	movs	r0, #60	; 0x3c
 80029b0:	f7ff fc92 	bl	80022d8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80029b4:	787b      	ldrb	r3, [r7, #1]
 80029b6:	461a      	mov	r2, r3
 80029b8:	2121      	movs	r1, #33	; 0x21
 80029ba:	203c      	movs	r0, #60	; 0x3c
 80029bc:	f7ff fc8c 	bl	80022d8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80029c0:	78bb      	ldrb	r3, [r7, #2]
 80029c2:	461a      	mov	r2, r3
 80029c4:	2122      	movs	r1, #34	; 0x22
 80029c6:	203c      	movs	r0, #60	; 0x3c
 80029c8:	f7ff fc86 	bl	80022d8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	461a      	mov	r2, r3
 80029d0:	2123      	movs	r1, #35	; 0x23
 80029d2:	203c      	movs	r0, #60	; 0x3c
 80029d4:	f7ff fc80 	bl	80022d8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80029d8:	793b      	ldrb	r3, [r7, #4]
 80029da:	461a      	mov	r2, r3
 80029dc:	2124      	movs	r1, #36	; 0x24
 80029de:	203c      	movs	r0, #60	; 0x3c
 80029e0:	f7ff fc7a 	bl	80022d8 <SENSOR_IO_Write>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80029f2:	2300      	movs	r3, #0
 80029f4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80029f6:	2122      	movs	r1, #34	; 0x22
 80029f8:	203c      	movs	r0, #60	; 0x3c
 80029fa:	f7ff fc87 	bl	800230c <SENSOR_IO_Read>
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f023 0303 	bic.w	r3, r3, #3
 8002a08:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f043 0303 	orr.w	r3, r3, #3
 8002a10:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	461a      	mov	r2, r3
 8002a16:	2122      	movs	r1, #34	; 0x22
 8002a18:	203c      	movs	r0, #60	; 0x3c
 8002a1a:	f7ff fc5d 	bl	80022d8 <SENSOR_IO_Write>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002a2a:	f7ff fc4b 	bl	80022c4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002a2e:	210f      	movs	r1, #15
 8002a30:	203c      	movs	r0, #60	; 0x3c
 8002a32:	f7ff fc6b 	bl	800230c <SENSOR_IO_Read>
 8002a36:	4603      	mov	r3, r0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002a4a:	2122      	movs	r1, #34	; 0x22
 8002a4c:	203c      	movs	r0, #60	; 0x3c
 8002a4e:	f7ff fc5d 	bl	800230c <SENSOR_IO_Read>
 8002a52:	4603      	mov	r3, r0
 8002a54:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	f023 0320 	bic.w	r3, r3, #32
 8002a5c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	f043 0320 	orr.w	r3, r3, #32
 8002a6a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2122      	movs	r1, #34	; 0x22
 8002a72:	203c      	movs	r0, #60	; 0x3c
 8002a74:	f7ff fc30 	bl	80022d8 <SENSOR_IO_Write>
}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002a96:	2121      	movs	r1, #33	; 0x21
 8002a98:	203c      	movs	r0, #60	; 0x3c
 8002a9a:	f7ff fc37 	bl	800230c <SENSOR_IO_Read>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002aa2:	f107 0208 	add.w	r2, r7, #8
 8002aa6:	2306      	movs	r3, #6
 8002aa8:	21a8      	movs	r1, #168	; 0xa8
 8002aaa:	203c      	movs	r0, #60	; 0x3c
 8002aac:	f7ff fc4c 	bl	8002348 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e01f      	b.n	8002af6 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002ab6:	7ffb      	ldrb	r3, [r7, #31]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	3301      	adds	r3, #1
 8002abc:	f107 0220 	add.w	r2, r7, #32
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	7ffb      	ldrb	r3, [r7, #31]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	f107 0120 	add.w	r1, r7, #32
 8002ad4:	440b      	add	r3, r1
 8002ad6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	7ffb      	ldrb	r3, [r7, #31]
 8002ae2:	b212      	sxth	r2, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	f107 0120 	add.w	r1, r7, #32
 8002aea:	440b      	add	r3, r1
 8002aec:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002af0:	7ffb      	ldrb	r3, [r7, #31]
 8002af2:	3301      	adds	r3, #1
 8002af4:	77fb      	strb	r3, [r7, #31]
 8002af6:	7ffb      	ldrb	r3, [r7, #31]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d9dc      	bls.n	8002ab6 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d00c      	beq.n	8002b20 <LIS3MDL_MagReadXYZ+0xa0>
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	dc02      	bgt.n	8002b10 <LIS3MDL_MagReadXYZ+0x90>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <LIS3MDL_MagReadXYZ+0x9a>
 8002b0e:	e010      	b.n	8002b32 <LIS3MDL_MagReadXYZ+0xb2>
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d008      	beq.n	8002b26 <LIS3MDL_MagReadXYZ+0xa6>
 8002b14:	2b60      	cmp	r3, #96	; 0x60
 8002b16:	d009      	beq.n	8002b2c <LIS3MDL_MagReadXYZ+0xac>
 8002b18:	e00b      	b.n	8002b32 <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002b1a:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <LIS3MDL_MagReadXYZ+0x100>)
 8002b1c:	61bb      	str	r3, [r7, #24]
    break;
 8002b1e:	e008      	b.n	8002b32 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002b20:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <LIS3MDL_MagReadXYZ+0x104>)
 8002b22:	61bb      	str	r3, [r7, #24]
    break;
 8002b24:	e005      	b.n	8002b32 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <LIS3MDL_MagReadXYZ+0x108>)
 8002b28:	61bb      	str	r3, [r7, #24]
    break;
 8002b2a:	e002      	b.n	8002b32 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002b2c:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <LIS3MDL_MagReadXYZ+0x10c>)
 8002b2e:	61bb      	str	r3, [r7, #24]
    break;    
 8002b30:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	77fb      	strb	r3, [r7, #31]
 8002b36:	e01b      	b.n	8002b70 <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002b38:	7ffb      	ldrb	r3, [r7, #31]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	f107 0220 	add.w	r2, r7, #32
 8002b40:	4413      	add	r3, r2
 8002b42:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b56:	7ffb      	ldrb	r3, [r7, #31]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b62:	ee17 2a90 	vmov	r2, s15
 8002b66:	b212      	sxth	r2, r2
 8002b68:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	7ffb      	ldrb	r3, [r7, #31]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d9e0      	bls.n	8002b38 <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 8002b76:	bf00      	nop
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	3e0f5c29 	.word	0x3e0f5c29
 8002b84:	3e947ae1 	.word	0x3e947ae1
 8002b88:	3edc28f6 	.word	0x3edc28f6
 8002b8c:	3f147ae1 	.word	0x3f147ae1

08002b90 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 f87b 	bl	8002c98 <LPS22HB_Init>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002bb8:	f7ff fb84 	bl	80022c4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	210f      	movs	r1, #15
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fba2 	bl	800230c <SENSOR_IO_Read>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	74fb      	strb	r3, [r7, #19]
 8002bea:	e013      	b.n	8002c14 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	3328      	adds	r3, #40	; 0x28
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	7cfc      	ldrb	r4, [r7, #19]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	f7ff fb86 	bl	800230c <SENSOR_IO_Read>
 8002c00:	4603      	mov	r3, r0
 8002c02:	461a      	mov	r2, r3
 8002c04:	f107 0318 	add.w	r3, r7, #24
 8002c08:	4423      	add	r3, r4
 8002c0a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002c0e:	7cfb      	ldrb	r3, [r7, #19]
 8002c10:	3301      	adds	r3, #1
 8002c12:	74fb      	strb	r3, [r7, #19]
 8002c14:	7cfb      	ldrb	r3, [r7, #19]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d9e8      	bls.n	8002bec <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	74fb      	strb	r3, [r7, #19]
 8002c1e:	e010      	b.n	8002c42 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	f107 0218 	add.w	r2, r7, #24
 8002c26:	4413      	add	r3, r2
 8002c28:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	74fb      	strb	r3, [r7, #19]
 8002c42:	7cfb      	ldrb	r3, [r7, #19]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d9eb      	bls.n	8002c20 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c58:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2264      	movs	r2, #100	; 0x64
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da01      	bge.n	8002c6e <LPS22HB_P_ReadPressure+0x96>
 8002c6a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002c6e:	131b      	asrs	r3, r3, #12
 8002c70:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c7c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002c94 <LPS22HB_P_ReadPressure+0xbc>
 8002c80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c84:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c88:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd90      	pop	{r4, r7, pc}
 8002c92:	bf00      	nop
 8002c94:	42c80000 	.word	0x42c80000

08002c98 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	211a      	movs	r1, #26
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fb2f 	bl	800230c <SENSOR_IO_Read>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	211a      	movs	r1, #26
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fb04 	bl	80022d8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2110      	movs	r1, #16
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fb18 	bl	800230c <SENSOR_IO_Read>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002cee:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	f023 0302 	bic.w	r3, r3, #2
 8002cf6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	f043 0302 	orr.w	r3, r3, #2
 8002cfe:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	2110      	movs	r1, #16
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fae5 	bl	80022d8 <SENSOR_IO_Write>
}  
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002d24:	2110      	movs	r1, #16
 8002d26:	20d4      	movs	r0, #212	; 0xd4
 8002d28:	f7ff faf0 	bl	800230c <SENSOR_IO_Read>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002d34:	7bbb      	ldrb	r3, [r7, #14]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002d3c:	7bba      	ldrb	r2, [r7, #14]
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002d44:	7bbb      	ldrb	r3, [r7, #14]
 8002d46:	461a      	mov	r2, r3
 8002d48:	2110      	movs	r1, #16
 8002d4a:	20d4      	movs	r0, #212	; 0xd4
 8002d4c:	f7ff fac4 	bl	80022d8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002d50:	2112      	movs	r1, #18
 8002d52:	20d4      	movs	r0, #212	; 0xd4
 8002d54:	f7ff fada 	bl	800230c <SENSOR_IO_Read>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002d64:	7bbb      	ldrb	r3, [r7, #14]
 8002d66:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002d6a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002d6c:	7bba      	ldrb	r2, [r7, #14]
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002d74:	7bbb      	ldrb	r3, [r7, #14]
 8002d76:	461a      	mov	r2, r3
 8002d78:	2112      	movs	r1, #18
 8002d7a:	20d4      	movs	r0, #212	; 0xd4
 8002d7c:	f7ff faac 	bl	80022d8 <SENSOR_IO_Write>
}
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002d92:	2110      	movs	r1, #16
 8002d94:	20d4      	movs	r0, #212	; 0xd4
 8002d96:	f7ff fab9 	bl	800230c <SENSOR_IO_Read>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	461a      	mov	r2, r3
 8002daa:	2110      	movs	r1, #16
 8002dac:	20d4      	movs	r0, #212	; 0xd4
 8002dae:	f7ff fa93 	bl	80022d8 <SENSOR_IO_Write>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002dbe:	f7ff fa81 	bl	80022c4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002dc2:	210f      	movs	r1, #15
 8002dc4:	20d4      	movs	r0, #212	; 0xd4
 8002dc6:	f7ff faa1 	bl	800230c <SENSOR_IO_Read>
 8002dca:	4603      	mov	r3, r0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002dde:	2115      	movs	r1, #21
 8002de0:	20d4      	movs	r0, #212	; 0xd4
 8002de2:	f7ff fa93 	bl	800230c <SENSOR_IO_Read>
 8002de6:	4603      	mov	r3, r0
 8002de8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	f023 0310 	bic.w	r3, r3, #16
 8002df0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	f043 0310 	orr.w	r3, r3, #16
 8002dfe:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	461a      	mov	r2, r3
 8002e04:	2115      	movs	r1, #21
 8002e06:	20d4      	movs	r0, #212	; 0xd4
 8002e08:	f7ff fa66 	bl	80022d8 <SENSOR_IO_Write>
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002e2a:	2110      	movs	r1, #16
 8002e2c:	20d4      	movs	r0, #212	; 0xd4
 8002e2e:	f7ff fa6d 	bl	800230c <SENSOR_IO_Read>
 8002e32:	4603      	mov	r3, r0
 8002e34:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002e36:	f107 0208 	add.w	r2, r7, #8
 8002e3a:	2306      	movs	r3, #6
 8002e3c:	2128      	movs	r1, #40	; 0x28
 8002e3e:	20d4      	movs	r0, #212	; 0xd4
 8002e40:	f7ff fa82 	bl	8002348 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	e01f      	b.n	8002e8a <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002e4a:	7ffb      	ldrb	r3, [r7, #31]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f107 0220 	add.w	r2, r7, #32
 8002e54:	4413      	add	r3, r2
 8002e56:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	7ffb      	ldrb	r3, [r7, #31]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	f107 0120 	add.w	r1, r7, #32
 8002e68:	440b      	add	r3, r1
 8002e6a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	7ffb      	ldrb	r3, [r7, #31]
 8002e76:	b212      	sxth	r2, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	f107 0120 	add.w	r1, r7, #32
 8002e7e:	440b      	add	r3, r1
 8002e80:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002e84:	7ffb      	ldrb	r3, [r7, #31]
 8002e86:	3301      	adds	r3, #1
 8002e88:	77fb      	strb	r3, [r7, #31]
 8002e8a:	7ffb      	ldrb	r3, [r7, #31]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d9dc      	bls.n	8002e4a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d828      	bhi.n	8002eec <LSM6DSL_AccReadXYZ+0xd8>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <LSM6DSL_AccReadXYZ+0x8c>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002ed5 	.word	0x08002ed5
 8002ea4:	08002eed 	.word	0x08002eed
 8002ea8:	08002eed 	.word	0x08002eed
 8002eac:	08002eed 	.word	0x08002eed
 8002eb0:	08002ee7 	.word	0x08002ee7
 8002eb4:	08002eed 	.word	0x08002eed
 8002eb8:	08002eed 	.word	0x08002eed
 8002ebc:	08002eed 	.word	0x08002eed
 8002ec0:	08002edb 	.word	0x08002edb
 8002ec4:	08002eed 	.word	0x08002eed
 8002ec8:	08002eed 	.word	0x08002eed
 8002ecc:	08002eed 	.word	0x08002eed
 8002ed0:	08002ee1 	.word	0x08002ee1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002ed4:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <LSM6DSL_AccReadXYZ+0x124>)
 8002ed6:	61bb      	str	r3, [r7, #24]
    break;
 8002ed8:	e008      	b.n	8002eec <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <LSM6DSL_AccReadXYZ+0x128>)
 8002edc:	61bb      	str	r3, [r7, #24]
    break;
 8002ede:	e005      	b.n	8002eec <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002ee0:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <LSM6DSL_AccReadXYZ+0x12c>)
 8002ee2:	61bb      	str	r3, [r7, #24]
    break;
 8002ee4:	e002      	b.n	8002eec <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <LSM6DSL_AccReadXYZ+0x130>)
 8002ee8:	61bb      	str	r3, [r7, #24]
    break;    
 8002eea:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e01b      	b.n	8002f2a <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002ef2:	7ffb      	ldrb	r3, [r7, #31]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	f107 0220 	add.w	r2, r7, #32
 8002efa:	4413      	add	r3, r2
 8002efc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002f00:	ee07 3a90 	vmov	s15, r3
 8002f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f08:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f10:	7ffb      	ldrb	r3, [r7, #31]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f1c:	ee17 2a90 	vmov	r2, s15
 8002f20:	b212      	sxth	r2, r2
 8002f22:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002f24:	7ffb      	ldrb	r3, [r7, #31]
 8002f26:	3301      	adds	r3, #1
 8002f28:	77fb      	strb	r3, [r7, #31]
 8002f2a:	7ffb      	ldrb	r3, [r7, #31]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d9e0      	bls.n	8002ef2 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8002f30:	bf00      	nop
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	3d79db23 	.word	0x3d79db23
 8002f3c:	3df9db23 	.word	0x3df9db23
 8002f40:	3e79db23 	.word	0x3e79db23
 8002f44:	3ef9db23 	.word	0x3ef9db23

08002f48 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002f52:	2300      	movs	r3, #0
 8002f54:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002f56:	2111      	movs	r1, #17
 8002f58:	20d4      	movs	r0, #212	; 0xd4
 8002f5a:	f7ff f9d7 	bl	800230c <SENSOR_IO_Read>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002f66:	7bbb      	ldrb	r3, [r7, #14]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002f6e:	7bba      	ldrb	r2, [r7, #14]
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002f76:	7bbb      	ldrb	r3, [r7, #14]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2111      	movs	r1, #17
 8002f7c:	20d4      	movs	r0, #212	; 0xd4
 8002f7e:	f7ff f9ab 	bl	80022d8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002f82:	2112      	movs	r1, #18
 8002f84:	20d4      	movs	r0, #212	; 0xd4
 8002f86:	f7ff f9c1 	bl	800230c <SENSOR_IO_Read>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002f96:	7bbb      	ldrb	r3, [r7, #14]
 8002f98:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002f9c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002f9e:	7bba      	ldrb	r2, [r7, #14]
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002fa6:	7bbb      	ldrb	r3, [r7, #14]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2112      	movs	r1, #18
 8002fac:	20d4      	movs	r0, #212	; 0xd4
 8002fae:	f7ff f993 	bl	80022d8 <SENSOR_IO_Write>
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002fc4:	2111      	movs	r1, #17
 8002fc6:	20d4      	movs	r0, #212	; 0xd4
 8002fc8:	f7ff f9a0 	bl	800230c <SENSOR_IO_Read>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2111      	movs	r1, #17
 8002fde:	20d4      	movs	r0, #212	; 0xd4
 8002fe0:	f7ff f97a 	bl	80022d8 <SENSOR_IO_Write>
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002ff0:	f7ff f968 	bl	80022c4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002ff4:	210f      	movs	r1, #15
 8002ff6:	20d4      	movs	r0, #212	; 0xd4
 8002ff8:	f7ff f988 	bl	800230c <SENSOR_IO_Read>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	bd80      	pop	{r7, pc}

08003002 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800300c:	2300      	movs	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8003010:	2116      	movs	r1, #22
 8003012:	20d4      	movs	r0, #212	; 0xd4
 8003014:	f7ff f97a 	bl	800230c <SENSOR_IO_Read>
 8003018:	4603      	mov	r3, r0
 800301a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003022:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003030:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	461a      	mov	r2, r3
 8003036:	2116      	movs	r1, #22
 8003038:	20d4      	movs	r0, #212	; 0xd4
 800303a:	f7ff f94d 	bl	80022d8 <SENSOR_IO_Write>
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8003050:	2300      	movs	r3, #0
 8003052:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800305e:	2111      	movs	r1, #17
 8003060:	20d4      	movs	r0, #212	; 0xd4
 8003062:	f7ff f953 	bl	800230c <SENSOR_IO_Read>
 8003066:	4603      	mov	r3, r0
 8003068:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800306a:	f107 0208 	add.w	r2, r7, #8
 800306e:	2306      	movs	r3, #6
 8003070:	2122      	movs	r1, #34	; 0x22
 8003072:	20d4      	movs	r0, #212	; 0xd4
 8003074:	f7ff f968 	bl	8002348 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003078:	2300      	movs	r3, #0
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e01f      	b.n	80030be <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800307e:	7ffb      	ldrb	r3, [r7, #31]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	3301      	adds	r3, #1
 8003084:	f107 0220 	add.w	r2, r7, #32
 8003088:	4413      	add	r3, r2
 800308a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800308e:	b29b      	uxth	r3, r3
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	b29a      	uxth	r2, r3
 8003094:	7ffb      	ldrb	r3, [r7, #31]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	f107 0120 	add.w	r1, r7, #32
 800309c:	440b      	add	r3, r1
 800309e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	7ffb      	ldrb	r3, [r7, #31]
 80030aa:	b212      	sxth	r2, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	f107 0120 	add.w	r1, r7, #32
 80030b2:	440b      	add	r3, r1
 80030b4:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80030b8:	7ffb      	ldrb	r3, [r7, #31]
 80030ba:	3301      	adds	r3, #1
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	7ffb      	ldrb	r3, [r7, #31]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d9dc      	bls.n	800307e <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d828      	bhi.n	8003120 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 80030ce:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	08003109 	.word	0x08003109
 80030d8:	08003121 	.word	0x08003121
 80030dc:	08003121 	.word	0x08003121
 80030e0:	08003121 	.word	0x08003121
 80030e4:	0800310f 	.word	0x0800310f
 80030e8:	08003121 	.word	0x08003121
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003121 	.word	0x08003121
 80030f4:	08003115 	.word	0x08003115
 80030f8:	08003121 	.word	0x08003121
 80030fc:	08003121 	.word	0x08003121
 8003100:	08003121 	.word	0x08003121
 8003104:	0800311b 	.word	0x0800311b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003108:	4b16      	ldr	r3, [pc, #88]	; (8003164 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 800310a:	61bb      	str	r3, [r7, #24]
    break;
 800310c:	e008      	b.n	8003120 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800310e:	4b16      	ldr	r3, [pc, #88]	; (8003168 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8003110:	61bb      	str	r3, [r7, #24]
    break;
 8003112:	e005      	b.n	8003120 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8003114:	4b15      	ldr	r3, [pc, #84]	; (800316c <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8003116:	61bb      	str	r3, [r7, #24]
    break;
 8003118:	e002      	b.n	8003120 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 800311c:	61bb      	str	r3, [r7, #24]
    break;    
 800311e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003120:	2300      	movs	r3, #0
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e017      	b.n	8003156 <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8003126:	7ffb      	ldrb	r3, [r7, #31]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	f107 0220 	add.w	r2, r7, #32
 800312e:	4413      	add	r3, r2
 8003130:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003134:	ee07 3a90 	vmov	s15, r3
 8003138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800313c:	7ffb      	ldrb	r3, [r7, #31]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	edd7 7a06 	vldr	s15, [r7, #24]
 8003148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314c:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8003150:	7ffb      	ldrb	r3, [r7, #31]
 8003152:	3301      	adds	r3, #1
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	7ffb      	ldrb	r3, [r7, #31]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d9e4      	bls.n	8003126 <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 800315c:	bf00      	nop
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	410c0000 	.word	0x410c0000
 8003168:	418c0000 	.word	0x418c0000
 800316c:	420c0000 	.word	0x420c0000
 8003170:	428c0000 	.word	0x428c0000

08003174 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800317e:	2003      	movs	r0, #3
 8003180:	f000 f938 	bl	80033f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003184:	2000      	movs	r0, #0
 8003186:	f000 f80d 	bl	80031a4 <HAL_InitTick>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	71fb      	strb	r3, [r7, #7]
 8003194:	e001      	b.n	800319a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003196:	f7fe fd6f 	bl	8001c78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800319a:	79fb      	ldrb	r3, [r7, #7]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80031b0:	4b16      	ldr	r3, [pc, #88]	; (800320c <HAL_InitTick+0x68>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d022      	beq.n	80031fe <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80031b8:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_InitTick+0x6c>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <HAL_InitTick+0x68>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80031c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 f946 	bl	800345e <HAL_SYSTICK_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b0f      	cmp	r3, #15
 80031dc:	d809      	bhi.n	80031f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031de:	2200      	movs	r2, #0
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	f04f 30ff 	mov.w	r0, #4294967295
 80031e6:	f000 f910 	bl	800340a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031ea:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <HAL_InitTick+0x70>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	e007      	b.n	8003202 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
 80031f6:	e004      	b.n	8003202 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	e001      	b.n	8003202 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	200000d0 	.word	0x200000d0
 8003210:	20000000 	.word	0x20000000
 8003214:	200000cc 	.word	0x200000cc

08003218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <HAL_IncTick+0x1c>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_IncTick+0x20>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4413      	add	r3, r2
 8003226:	4a03      	ldr	r2, [pc, #12]	; (8003234 <HAL_IncTick+0x1c>)
 8003228:	6013      	str	r3, [r2, #0]
}
 800322a:	bf00      	nop
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	20000508 	.word	0x20000508
 8003238:	200000d0 	.word	0x200000d0

0800323c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return uwTick;
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_GetTick+0x14>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000508 	.word	0x20000508

08003254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <__NVIC_SetPriorityGrouping+0x44>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003270:	4013      	ands	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800327c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003286:	4a04      	ldr	r2, [pc, #16]	; (8003298 <__NVIC_SetPriorityGrouping+0x44>)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	60d3      	str	r3, [r2, #12]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <__NVIC_GetPriorityGrouping+0x18>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	0a1b      	lsrs	r3, r3, #8
 80032a6:	f003 0307 	and.w	r3, r3, #7
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	db0b      	blt.n	80032e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	4907      	ldr	r1, [pc, #28]	; (80032f0 <__NVIC_EnableIRQ+0x38>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2001      	movs	r0, #1
 80032da:	fa00 f202 	lsl.w	r2, r0, r2
 80032de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000e100 	.word	0xe000e100

080032f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	6039      	str	r1, [r7, #0]
 80032fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	2b00      	cmp	r3, #0
 8003306:	db0a      	blt.n	800331e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	b2da      	uxtb	r2, r3
 800330c:	490c      	ldr	r1, [pc, #48]	; (8003340 <__NVIC_SetPriority+0x4c>)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	0112      	lsls	r2, r2, #4
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	440b      	add	r3, r1
 8003318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800331c:	e00a      	b.n	8003334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	b2da      	uxtb	r2, r3
 8003322:	4908      	ldr	r1, [pc, #32]	; (8003344 <__NVIC_SetPriority+0x50>)
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	3b04      	subs	r3, #4
 800332c:	0112      	lsls	r2, r2, #4
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	440b      	add	r3, r1
 8003332:	761a      	strb	r2, [r3, #24]
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000e100 	.word	0xe000e100
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003348:	b480      	push	{r7}
 800334a:	b089      	sub	sp, #36	; 0x24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f1c3 0307 	rsb	r3, r3, #7
 8003362:	2b04      	cmp	r3, #4
 8003364:	bf28      	it	cs
 8003366:	2304      	movcs	r3, #4
 8003368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3304      	adds	r3, #4
 800336e:	2b06      	cmp	r3, #6
 8003370:	d902      	bls.n	8003378 <NVIC_EncodePriority+0x30>
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3b03      	subs	r3, #3
 8003376:	e000      	b.n	800337a <NVIC_EncodePriority+0x32>
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800337c:	f04f 32ff 	mov.w	r2, #4294967295
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43da      	mvns	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	401a      	ands	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003390:	f04f 31ff 	mov.w	r1, #4294967295
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fa01 f303 	lsl.w	r3, r1, r3
 800339a:	43d9      	mvns	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a0:	4313      	orrs	r3, r2
         );
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3724      	adds	r7, #36	; 0x24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033c0:	d301      	bcc.n	80033c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c2:	2301      	movs	r3, #1
 80033c4:	e00f      	b.n	80033e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033c6:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <SysTick_Config+0x40>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ce:	210f      	movs	r1, #15
 80033d0:	f04f 30ff 	mov.w	r0, #4294967295
 80033d4:	f7ff ff8e 	bl	80032f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <SysTick_Config+0x40>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <SysTick_Config+0x40>)
 80033e0:	2207      	movs	r2, #7
 80033e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	e000e010 	.word	0xe000e010

080033f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff29 	bl	8003254 <__NVIC_SetPriorityGrouping>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	af00      	add	r7, sp, #0
 8003410:	4603      	mov	r3, r0
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800341c:	f7ff ff3e 	bl	800329c <__NVIC_GetPriorityGrouping>
 8003420:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	6978      	ldr	r0, [r7, #20]
 8003428:	f7ff ff8e 	bl	8003348 <NVIC_EncodePriority>
 800342c:	4602      	mov	r2, r0
 800342e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff5d 	bl	80032f4 <__NVIC_SetPriority>
}
 800343a:	bf00      	nop
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	4603      	mov	r3, r0
 800344a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff31 	bl	80032b8 <__NVIC_EnableIRQ>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ffa2 	bl	80033b0 <SysTick_Config>
 800346c:	4603      	mov	r3, r0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003486:	e17f      	b.n	8003788 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	2101      	movs	r1, #1
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	fa01 f303 	lsl.w	r3, r1, r3
 8003494:	4013      	ands	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 8171 	beq.w	8003782 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d00b      	beq.n	80034c0 <HAL_GPIO_Init+0x48>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d007      	beq.n	80034c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034b4:	2b11      	cmp	r3, #17
 80034b6:	d003      	beq.n	80034c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b12      	cmp	r3, #18
 80034be:	d130      	bne.n	8003522 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034f6:	2201      	movs	r2, #1
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	f003 0201 	and.w	r2, r3, #1
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b03      	cmp	r3, #3
 800352c:	d118      	bne.n	8003560 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003534:	2201      	movs	r2, #1
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	08db      	lsrs	r3, r3, #3
 800354a:	f003 0201 	and.w	r2, r3, #1
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x128>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b12      	cmp	r3, #18
 800359e:	d123      	bne.n	80035e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	08da      	lsrs	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3208      	adds	r2, #8
 80035a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	220f      	movs	r2, #15
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	08da      	lsrs	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3208      	adds	r2, #8
 80035e2:	6939      	ldr	r1, [r7, #16]
 80035e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	2203      	movs	r2, #3
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4013      	ands	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0203 	and.w	r2, r3, #3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80ac 	beq.w	8003782 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362a:	4b5e      	ldr	r3, [pc, #376]	; (80037a4 <HAL_GPIO_Init+0x32c>)
 800362c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362e:	4a5d      	ldr	r2, [pc, #372]	; (80037a4 <HAL_GPIO_Init+0x32c>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6613      	str	r3, [r2, #96]	; 0x60
 8003636:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <HAL_GPIO_Init+0x32c>)
 8003638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003642:	4a59      	ldr	r2, [pc, #356]	; (80037a8 <HAL_GPIO_Init+0x330>)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	3302      	adds	r3, #2
 800364a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	220f      	movs	r2, #15
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800366c:	d025      	beq.n	80036ba <HAL_GPIO_Init+0x242>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a4e      	ldr	r2, [pc, #312]	; (80037ac <HAL_GPIO_Init+0x334>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01f      	beq.n	80036b6 <HAL_GPIO_Init+0x23e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a4d      	ldr	r2, [pc, #308]	; (80037b0 <HAL_GPIO_Init+0x338>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d019      	beq.n	80036b2 <HAL_GPIO_Init+0x23a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a4c      	ldr	r2, [pc, #304]	; (80037b4 <HAL_GPIO_Init+0x33c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_GPIO_Init+0x236>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a4b      	ldr	r2, [pc, #300]	; (80037b8 <HAL_GPIO_Init+0x340>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00d      	beq.n	80036aa <HAL_GPIO_Init+0x232>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4a      	ldr	r2, [pc, #296]	; (80037bc <HAL_GPIO_Init+0x344>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <HAL_GPIO_Init+0x22e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a49      	ldr	r2, [pc, #292]	; (80037c0 <HAL_GPIO_Init+0x348>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d101      	bne.n	80036a2 <HAL_GPIO_Init+0x22a>
 800369e:	2306      	movs	r3, #6
 80036a0:	e00c      	b.n	80036bc <HAL_GPIO_Init+0x244>
 80036a2:	2307      	movs	r3, #7
 80036a4:	e00a      	b.n	80036bc <HAL_GPIO_Init+0x244>
 80036a6:	2305      	movs	r3, #5
 80036a8:	e008      	b.n	80036bc <HAL_GPIO_Init+0x244>
 80036aa:	2304      	movs	r3, #4
 80036ac:	e006      	b.n	80036bc <HAL_GPIO_Init+0x244>
 80036ae:	2303      	movs	r3, #3
 80036b0:	e004      	b.n	80036bc <HAL_GPIO_Init+0x244>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e002      	b.n	80036bc <HAL_GPIO_Init+0x244>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_GPIO_Init+0x244>
 80036ba:	2300      	movs	r3, #0
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	f002 0203 	and.w	r2, r2, #3
 80036c2:	0092      	lsls	r2, r2, #2
 80036c4:	4093      	lsls	r3, r2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036cc:	4936      	ldr	r1, [pc, #216]	; (80037a8 <HAL_GPIO_Init+0x330>)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	089b      	lsrs	r3, r3, #2
 80036d2:	3302      	adds	r3, #2
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036da:	4b3a      	ldr	r3, [pc, #232]	; (80037c4 <HAL_GPIO_Init+0x34c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036fe:	4a31      	ldr	r2, [pc, #196]	; (80037c4 <HAL_GPIO_Init+0x34c>)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003704:	4b2f      	ldr	r3, [pc, #188]	; (80037c4 <HAL_GPIO_Init+0x34c>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003728:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <HAL_GPIO_Init+0x34c>)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800372e:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <HAL_GPIO_Init+0x34c>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43db      	mvns	r3, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003752:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <HAL_GPIO_Init+0x34c>)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003758:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <HAL_GPIO_Init+0x34c>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	43db      	mvns	r3, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800377c:	4a11      	ldr	r2, [pc, #68]	; (80037c4 <HAL_GPIO_Init+0x34c>)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	3301      	adds	r3, #1
 8003786:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	f47f ae78 	bne.w	8003488 <HAL_GPIO_Init+0x10>
  }
}
 8003798:	bf00      	nop
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40010000 	.word	0x40010000
 80037ac:	48000400 	.word	0x48000400
 80037b0:	48000800 	.word	0x48000800
 80037b4:	48000c00 	.word	0x48000c00
 80037b8:	48001000 	.word	0x48001000
 80037bc:	48001400 	.word	0x48001400
 80037c0:	48001800 	.word	0x48001800
 80037c4:	40010400 	.word	0x40010400

080037c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80037d6:	e0cd      	b.n	8003974 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80037d8:	2201      	movs	r2, #1
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80c0 	beq.w	800396e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80037ee:	4a68      	ldr	r2, [pc, #416]	; (8003990 <HAL_GPIO_DeInit+0x1c8>)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	3302      	adds	r3, #2
 80037f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	220f      	movs	r2, #15
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003816:	d025      	beq.n	8003864 <HAL_GPIO_DeInit+0x9c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a5e      	ldr	r2, [pc, #376]	; (8003994 <HAL_GPIO_DeInit+0x1cc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d01f      	beq.n	8003860 <HAL_GPIO_DeInit+0x98>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a5d      	ldr	r2, [pc, #372]	; (8003998 <HAL_GPIO_DeInit+0x1d0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d019      	beq.n	800385c <HAL_GPIO_DeInit+0x94>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a5c      	ldr	r2, [pc, #368]	; (800399c <HAL_GPIO_DeInit+0x1d4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <HAL_GPIO_DeInit+0x90>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a5b      	ldr	r2, [pc, #364]	; (80039a0 <HAL_GPIO_DeInit+0x1d8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00d      	beq.n	8003854 <HAL_GPIO_DeInit+0x8c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a5a      	ldr	r2, [pc, #360]	; (80039a4 <HAL_GPIO_DeInit+0x1dc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d007      	beq.n	8003850 <HAL_GPIO_DeInit+0x88>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a59      	ldr	r2, [pc, #356]	; (80039a8 <HAL_GPIO_DeInit+0x1e0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d101      	bne.n	800384c <HAL_GPIO_DeInit+0x84>
 8003848:	2306      	movs	r3, #6
 800384a:	e00c      	b.n	8003866 <HAL_GPIO_DeInit+0x9e>
 800384c:	2307      	movs	r3, #7
 800384e:	e00a      	b.n	8003866 <HAL_GPIO_DeInit+0x9e>
 8003850:	2305      	movs	r3, #5
 8003852:	e008      	b.n	8003866 <HAL_GPIO_DeInit+0x9e>
 8003854:	2304      	movs	r3, #4
 8003856:	e006      	b.n	8003866 <HAL_GPIO_DeInit+0x9e>
 8003858:	2303      	movs	r3, #3
 800385a:	e004      	b.n	8003866 <HAL_GPIO_DeInit+0x9e>
 800385c:	2302      	movs	r3, #2
 800385e:	e002      	b.n	8003866 <HAL_GPIO_DeInit+0x9e>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <HAL_GPIO_DeInit+0x9e>
 8003864:	2300      	movs	r3, #0
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	f002 0203 	and.w	r2, r2, #3
 800386c:	0092      	lsls	r2, r2, #2
 800386e:	4093      	lsls	r3, r2
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	429a      	cmp	r2, r3
 8003874:	d132      	bne.n	80038dc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003876:	4b4d      	ldr	r3, [pc, #308]	; (80039ac <HAL_GPIO_DeInit+0x1e4>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	494b      	ldr	r1, [pc, #300]	; (80039ac <HAL_GPIO_DeInit+0x1e4>)
 8003880:	4013      	ands	r3, r2
 8003882:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003884:	4b49      	ldr	r3, [pc, #292]	; (80039ac <HAL_GPIO_DeInit+0x1e4>)
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	43db      	mvns	r3, r3
 800388c:	4947      	ldr	r1, [pc, #284]	; (80039ac <HAL_GPIO_DeInit+0x1e4>)
 800388e:	4013      	ands	r3, r2
 8003890:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003892:	4b46      	ldr	r3, [pc, #280]	; (80039ac <HAL_GPIO_DeInit+0x1e4>)
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	43db      	mvns	r3, r3
 800389a:	4944      	ldr	r1, [pc, #272]	; (80039ac <HAL_GPIO_DeInit+0x1e4>)
 800389c:	4013      	ands	r3, r2
 800389e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80038a0:	4b42      	ldr	r3, [pc, #264]	; (80039ac <HAL_GPIO_DeInit+0x1e4>)
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	4940      	ldr	r1, [pc, #256]	; (80039ac <HAL_GPIO_DeInit+0x1e4>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	220f      	movs	r2, #15
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80038be:	4a34      	ldr	r2, [pc, #208]	; (8003990 <HAL_GPIO_DeInit+0x1c8>)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	089b      	lsrs	r3, r3, #2
 80038c4:	3302      	adds	r3, #2
 80038c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	43da      	mvns	r2, r3
 80038ce:	4830      	ldr	r0, [pc, #192]	; (8003990 <HAL_GPIO_DeInit+0x1c8>)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	089b      	lsrs	r3, r3, #2
 80038d4:	400a      	ands	r2, r1
 80038d6:	3302      	adds	r3, #2
 80038d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	2103      	movs	r1, #3
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	08da      	lsrs	r2, r3, #3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3208      	adds	r2, #8
 80038f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	220f      	movs	r2, #15
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	08d2      	lsrs	r2, r2, #3
 8003910:	4019      	ands	r1, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3208      	adds	r2, #8
 8003916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2103      	movs	r1, #3
 8003924:	fa01 f303 	lsl.w	r3, r1, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	401a      	ands	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	2101      	movs	r1, #1
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	fa01 f303 	lsl.w	r3, r1, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	401a      	ands	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	2103      	movs	r1, #3
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	401a      	ands	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395e:	2101      	movs	r1, #1
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	fa01 f303 	lsl.w	r3, r1, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	401a      	ands	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	3301      	adds	r3, #1
 8003972:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	f47f af2b 	bne.w	80037d8 <HAL_GPIO_DeInit+0x10>
  }
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40010000 	.word	0x40010000
 8003994:	48000400 	.word	0x48000400
 8003998:	48000800 	.word	0x48000800
 800399c:	48000c00 	.word	0x48000c00
 80039a0:	48001000 	.word	0x48001000
 80039a4:	48001400 	.word	0x48001400
 80039a8:	48001800 	.word	0x48001800
 80039ac:	40010400 	.word	0x40010400

080039b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	807b      	strh	r3, [r7, #2]
 80039bc:	4613      	mov	r3, r2
 80039be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039c0:	787b      	ldrb	r3, [r7, #1]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039c6:	887a      	ldrh	r2, [r7, #2]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039cc:	e002      	b.n	80039d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039ce:	887a      	ldrh	r2, [r7, #2]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	887b      	ldrh	r3, [r7, #2]
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039f8:	887a      	ldrh	r2, [r7, #2]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80039fe:	e002      	b.n	8003a06 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a00:	887a      	ldrh	r2, [r7, #2]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	619a      	str	r2, [r3, #24]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d006      	beq.n	8003a38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a2a:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fd fff8 	bl	8001a28 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40010400 	.word	0x40010400

08003a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e081      	b.n	8003b5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fe f928 	bl	8001cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	; 0x24
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d107      	bne.n	8003abe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	e006      	b.n	8003acc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003aca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d104      	bne.n	8003ade <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003adc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	ea42 0103 	orr.w	r1, r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	021a      	lsls	r2, r3, #8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69d9      	ldr	r1, [r3, #28]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1a      	ldr	r2, [r3, #32]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e021      	b.n	8003bb8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	; 0x24
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fe f8db 	bl	8001d48 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	4608      	mov	r0, r1
 8003bca:	4611      	mov	r1, r2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	817b      	strh	r3, [r7, #10]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	813b      	strh	r3, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	f040 80f9 	bne.w	8003dda <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <HAL_I2C_Mem_Write+0x34>
 8003bee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d105      	bne.n	8003c00 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0ed      	b.n	8003ddc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_I2C_Mem_Write+0x4e>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e0e6      	b.n	8003ddc <HAL_I2C_Mem_Write+0x21c>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c16:	f7ff fb11 	bl	800323c <HAL_GetTick>
 8003c1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2319      	movs	r3, #25
 8003c22:	2201      	movs	r2, #1
 8003c24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fac3 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0d1      	b.n	8003ddc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2221      	movs	r2, #33	; 0x21
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2240      	movs	r2, #64	; 0x40
 8003c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a3a      	ldr	r2, [r7, #32]
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c60:	88f8      	ldrh	r0, [r7, #6]
 8003c62:	893a      	ldrh	r2, [r7, #8]
 8003c64:	8979      	ldrh	r1, [r7, #10]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	4603      	mov	r3, r0
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f9d3 	bl	800401c <I2C_RequestMemoryWrite>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0a9      	b.n	8003ddc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2bff      	cmp	r3, #255	; 0xff
 8003c90:	d90e      	bls.n	8003cb0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	22ff      	movs	r2, #255	; 0xff
 8003c96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	8979      	ldrh	r1, [r7, #10]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fba5 	bl	80043f8 <I2C_TransferConfig>
 8003cae:	e00f      	b.n	8003cd0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	8979      	ldrh	r1, [r7, #10]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fb94 	bl	80043f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 faad 	bl	8004234 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e07b      	b.n	8003ddc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d034      	beq.n	8003d88 <HAL_I2C_Mem_Write+0x1c8>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d130      	bne.n	8003d88 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2180      	movs	r1, #128	; 0x80
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fa3f 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e04d      	b.n	8003ddc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2bff      	cmp	r3, #255	; 0xff
 8003d48:	d90e      	bls.n	8003d68 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	22ff      	movs	r2, #255	; 0xff
 8003d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	8979      	ldrh	r1, [r7, #10]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fb49 	bl	80043f8 <I2C_TransferConfig>
 8003d66:	e00f      	b.n	8003d88 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	8979      	ldrh	r1, [r7, #10]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 fb38 	bl	80043f8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d19e      	bne.n	8003cd0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fa8c 	bl	80042b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e01a      	b.n	8003ddc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2220      	movs	r2, #32
 8003dac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6859      	ldr	r1, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <HAL_I2C_Mem_Write+0x224>)
 8003dba:	400b      	ands	r3, r1
 8003dbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e000      	b.n	8003ddc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003dda:	2302      	movs	r3, #2
  }
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	fe00e800 	.word	0xfe00e800

08003de8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	4608      	mov	r0, r1
 8003df2:	4611      	mov	r1, r2
 8003df4:	461a      	mov	r2, r3
 8003df6:	4603      	mov	r3, r0
 8003df8:	817b      	strh	r3, [r7, #10]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	813b      	strh	r3, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	f040 80fd 	bne.w	800400a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_I2C_Mem_Read+0x34>
 8003e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0f1      	b.n	800400c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_I2C_Mem_Read+0x4e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0ea      	b.n	800400c <HAL_I2C_Mem_Read+0x224>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e3e:	f7ff f9fd 	bl	800323c <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2319      	movs	r3, #25
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f9af 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0d5      	b.n	800400c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2222      	movs	r2, #34	; 0x22
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2240      	movs	r2, #64	; 0x40
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a3a      	ldr	r2, [r7, #32]
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e88:	88f8      	ldrh	r0, [r7, #6]
 8003e8a:	893a      	ldrh	r2, [r7, #8]
 8003e8c:	8979      	ldrh	r1, [r7, #10]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	4603      	mov	r3, r0
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f913 	bl	80040c4 <I2C_RequestMemoryRead>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0ad      	b.n	800400c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2bff      	cmp	r3, #255	; 0xff
 8003eb8:	d90e      	bls.n	8003ed8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	22ff      	movs	r2, #255	; 0xff
 8003ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	8979      	ldrh	r1, [r7, #10]
 8003ec8:	4b52      	ldr	r3, [pc, #328]	; (8004014 <HAL_I2C_Mem_Read+0x22c>)
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 fa91 	bl	80043f8 <I2C_TransferConfig>
 8003ed6:	e00f      	b.n	8003ef8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	8979      	ldrh	r1, [r7, #10]
 8003eea:	4b4a      	ldr	r3, [pc, #296]	; (8004014 <HAL_I2C_Mem_Read+0x22c>)
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fa80 	bl	80043f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	2200      	movs	r2, #0
 8003f00:	2104      	movs	r1, #4
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f956 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e07c      	b.n	800400c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d034      	beq.n	8003fb8 <HAL_I2C_Mem_Read+0x1d0>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d130      	bne.n	8003fb8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2180      	movs	r1, #128	; 0x80
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f927 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e04d      	b.n	800400c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2bff      	cmp	r3, #255	; 0xff
 8003f78:	d90e      	bls.n	8003f98 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	22ff      	movs	r2, #255	; 0xff
 8003f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	8979      	ldrh	r1, [r7, #10]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 fa31 	bl	80043f8 <I2C_TransferConfig>
 8003f96:	e00f      	b.n	8003fb8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	8979      	ldrh	r1, [r7, #10]
 8003faa:	2300      	movs	r3, #0
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fa20 	bl	80043f8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d19a      	bne.n	8003ef8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 f974 	bl	80042b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e01a      	b.n	800400c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_I2C_Mem_Read+0x230>)
 8003fea:	400b      	ands	r3, r1
 8003fec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e000      	b.n	800400c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800400a:	2302      	movs	r3, #2
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	80002400 	.word	0x80002400
 8004018:	fe00e800 	.word	0xfe00e800

0800401c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	4608      	mov	r0, r1
 8004026:	4611      	mov	r1, r2
 8004028:	461a      	mov	r2, r3
 800402a:	4603      	mov	r3, r0
 800402c:	817b      	strh	r3, [r7, #10]
 800402e:	460b      	mov	r3, r1
 8004030:	813b      	strh	r3, [r7, #8]
 8004032:	4613      	mov	r3, r2
 8004034:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	8979      	ldrh	r1, [r7, #10]
 800403c:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <I2C_RequestMemoryWrite+0xa4>)
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f9d7 	bl	80043f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	69b9      	ldr	r1, [r7, #24]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f8f0 	bl	8004234 <I2C_WaitOnTXISFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e02c      	b.n	80040b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d105      	bne.n	8004070 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004064:	893b      	ldrh	r3, [r7, #8]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	629a      	str	r2, [r3, #40]	; 0x28
 800406e:	e015      	b.n	800409c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004070:	893b      	ldrh	r3, [r7, #8]
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	b29b      	uxth	r3, r3
 8004076:	b2da      	uxtb	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	69b9      	ldr	r1, [r7, #24]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f8d6 	bl	8004234 <I2C_WaitOnTXISFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e012      	b.n	80040b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004092:	893b      	ldrh	r3, [r7, #8]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2200      	movs	r2, #0
 80040a4:	2180      	movs	r1, #128	; 0x80
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f884 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	80002000 	.word	0x80002000

080040c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	4608      	mov	r0, r1
 80040ce:	4611      	mov	r1, r2
 80040d0:	461a      	mov	r2, r3
 80040d2:	4603      	mov	r3, r0
 80040d4:	817b      	strh	r3, [r7, #10]
 80040d6:	460b      	mov	r3, r1
 80040d8:	813b      	strh	r3, [r7, #8]
 80040da:	4613      	mov	r3, r2
 80040dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	8979      	ldrh	r1, [r7, #10]
 80040e4:	4b20      	ldr	r3, [pc, #128]	; (8004168 <I2C_RequestMemoryRead+0xa4>)
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	2300      	movs	r3, #0
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f984 	bl	80043f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	69b9      	ldr	r1, [r7, #24]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f89d 	bl	8004234 <I2C_WaitOnTXISFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e02c      	b.n	800415e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d105      	bne.n	8004116 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800410a:	893b      	ldrh	r3, [r7, #8]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	629a      	str	r2, [r3, #40]	; 0x28
 8004114:	e015      	b.n	8004142 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004116:	893b      	ldrh	r3, [r7, #8]
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	b29b      	uxth	r3, r3
 800411c:	b2da      	uxtb	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	69b9      	ldr	r1, [r7, #24]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f883 	bl	8004234 <I2C_WaitOnTXISFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e012      	b.n	800415e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004138:	893b      	ldrh	r3, [r7, #8]
 800413a:	b2da      	uxtb	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2200      	movs	r2, #0
 800414a:	2140      	movs	r1, #64	; 0x40
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f831 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	80002000 	.word	0x80002000

0800416c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b02      	cmp	r3, #2
 8004180:	d103      	bne.n	800418a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2200      	movs	r2, #0
 8004188:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d007      	beq.n	80041a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	619a      	str	r2, [r3, #24]
  }
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041c4:	e022      	b.n	800420c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d01e      	beq.n	800420c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ce:	f7ff f835 	bl	800323c <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d113      	bne.n	800420c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e8:	f043 0220 	orr.w	r2, r3, #32
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e00f      	b.n	800422c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4013      	ands	r3, r2
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	429a      	cmp	r2, r3
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	429a      	cmp	r2, r3
 8004228:	d0cd      	beq.n	80041c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004240:	e02c      	b.n	800429c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f870 	bl	800432c <I2C_IsAcknowledgeFailed>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e02a      	b.n	80042ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425c:	d01e      	beq.n	800429c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425e:	f7fe ffed 	bl	800323c <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	429a      	cmp	r2, r3
 800426c:	d302      	bcc.n	8004274 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d113      	bne.n	800429c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e007      	b.n	80042ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d1cb      	bne.n	8004242 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042c0:	e028      	b.n	8004314 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f830 	bl	800432c <I2C_IsAcknowledgeFailed>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e026      	b.n	8004324 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d6:	f7fe ffb1 	bl	800323c <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d302      	bcc.n	80042ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d113      	bne.n	8004314 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e007      	b.n	8004324 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b20      	cmp	r3, #32
 8004320:	d1cf      	bne.n	80042c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b10      	cmp	r3, #16
 8004344:	d151      	bne.n	80043ea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004346:	e022      	b.n	800438e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434e:	d01e      	beq.n	800438e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004350:	f7fe ff74 	bl	800323c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	429a      	cmp	r2, r3
 800435e:	d302      	bcc.n	8004366 <I2C_IsAcknowledgeFailed+0x3a>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d113      	bne.n	800438e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f043 0220 	orr.w	r2, r3, #32
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e02e      	b.n	80043ec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b20      	cmp	r3, #32
 800439a:	d1d5      	bne.n	8004348 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2210      	movs	r2, #16
 80043a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2220      	movs	r2, #32
 80043aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f7ff fedd 	bl	800416c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <I2C_IsAcknowledgeFailed+0xc8>)
 80043be:	400b      	ands	r3, r1
 80043c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	f043 0204 	orr.w	r2, r3, #4
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	fe00e800 	.word	0xfe00e800

080043f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	607b      	str	r3, [r7, #4]
 8004402:	460b      	mov	r3, r1
 8004404:	817b      	strh	r3, [r7, #10]
 8004406:	4613      	mov	r3, r2
 8004408:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	0d5b      	lsrs	r3, r3, #21
 8004414:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004418:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <I2C_TransferConfig+0x58>)
 800441a:	430b      	orrs	r3, r1
 800441c:	43db      	mvns	r3, r3
 800441e:	ea02 0103 	and.w	r1, r2, r3
 8004422:	897b      	ldrh	r3, [r7, #10]
 8004424:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004428:	7a7b      	ldrb	r3, [r7, #9]
 800442a:	041b      	lsls	r3, r3, #16
 800442c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	431a      	orrs	r2, r3
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	431a      	orrs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	03ff63ff 	.word	0x03ff63ff

08004454 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b20      	cmp	r3, #32
 8004468:	d138      	bne.n	80044dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004474:	2302      	movs	r3, #2
 8004476:	e032      	b.n	80044de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2224      	movs	r2, #36	; 0x24
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6819      	ldr	r1, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	e000      	b.n	80044de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044dc:	2302      	movs	r3, #2
  }
}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b089      	sub	sp, #36	; 0x24
 80044f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	2300      	movs	r3, #0
 80044f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044fa:	4b3d      	ldr	r3, [pc, #244]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004504:	4b3a      	ldr	r3, [pc, #232]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x34>
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b0c      	cmp	r3, #12
 8004518:	d121      	bne.n	800455e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d11e      	bne.n	800455e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004520:	4b33      	ldr	r3, [pc, #204]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d107      	bne.n	800453c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800452c:	4b30      	ldr	r3, [pc, #192]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800452e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004532:	0a1b      	lsrs	r3, r3, #8
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	e005      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800453c:	4b2c      	ldr	r3, [pc, #176]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004548:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004550:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10d      	bne.n	8004574 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800455c:	e00a      	b.n	8004574 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b04      	cmp	r3, #4
 8004562:	d102      	bne.n	800456a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004564:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	e004      	b.n	8004574 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b08      	cmp	r3, #8
 800456e:	d101      	bne.n	8004574 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004570:	4b22      	ldr	r3, [pc, #136]	; (80045fc <HAL_RCC_GetSysClockFreq+0x110>)
 8004572:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b0c      	cmp	r3, #12
 8004578:	d133      	bne.n	80045e2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800457a:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d002      	beq.n	8004590 <HAL_RCC_GetSysClockFreq+0xa4>
 800458a:	2b03      	cmp	r3, #3
 800458c:	d003      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0xaa>
 800458e:	e005      	b.n	800459c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004590:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004592:	617b      	str	r3, [r7, #20]
      break;
 8004594:	e005      	b.n	80045a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004596:	4b19      	ldr	r3, [pc, #100]	; (80045fc <HAL_RCC_GetSysClockFreq+0x110>)
 8004598:	617b      	str	r3, [r7, #20]
      break;
 800459a:	e002      	b.n	80045a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	617b      	str	r3, [r7, #20]
      break;
 80045a0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045a2:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	3301      	adds	r3, #1
 80045ae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045b0:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	0a1b      	lsrs	r3, r3, #8
 80045b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	fb02 f203 	mul.w	r2, r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045c8:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	0e5b      	lsrs	r3, r3, #25
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	3301      	adds	r3, #1
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045e2:	69bb      	ldr	r3, [r7, #24]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3724      	adds	r7, #36	; 0x24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40021000 	.word	0x40021000
 80045f4:	08008ea4 	.word	0x08008ea4
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	007a1200 	.word	0x007a1200

08004600 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_RCC_GetHCLKFreq+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000000 	.word	0x20000000

08004618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800461c:	f7ff fff0 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004620:	4601      	mov	r1, r0
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	0a1b      	lsrs	r3, r3, #8
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	4a04      	ldr	r2, [pc, #16]	; (8004640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800462e:	5cd3      	ldrb	r3, [r2, r3]
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000
 8004640:	08008e9c 	.word	0x08008e9c

08004644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004648:	f7ff ffda 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 800464c:	4601      	mov	r1, r0
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	0adb      	lsrs	r3, r3, #11
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	4a04      	ldr	r2, [pc, #16]	; (800466c <HAL_RCC_GetPCLK2Freq+0x28>)
 800465a:	5cd3      	ldrb	r3, [r2, r3]
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004664:	4618      	mov	r0, r3
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40021000 	.word	0x40021000
 800466c:	08008e9c 	.word	0x08008e9c

08004670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e040      	b.n	8004704 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fd fb76 	bl	8001d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	; 0x24
 800469c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f8c0 	bl	8004834 <UART_SetConfig>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e022      	b.n	8004704 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fc26 	bl	8004f18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fcad 	bl	800505c <UART_CheckIdleState>
 8004702:	4603      	mov	r3, r0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004720:	2b20      	cmp	r3, #32
 8004722:	f040 8081 	bne.w	8004828 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_UART_Transmit+0x26>
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e079      	b.n	800482a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_UART_Transmit+0x38>
 8004740:	2302      	movs	r3, #2
 8004742:	e072      	b.n	800482a <HAL_UART_Transmit+0x11e>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2221      	movs	r2, #33	; 0x21
 8004756:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004758:	f7fe fd70 	bl	800323c <HAL_GetTick>
 800475c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	88fa      	ldrh	r2, [r7, #6]
 8004762:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	88fa      	ldrh	r2, [r7, #6]
 800476a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	d108      	bne.n	800478a <HAL_UART_Transmit+0x7e>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	e003      	b.n	8004792 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800479a:	e02d      	b.n	80047f8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2200      	movs	r2, #0
 80047a4:	2180      	movs	r1, #128	; 0x80
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fc9d 	bl	80050e6 <UART_WaitOnFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e039      	b.n	800482a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10b      	bne.n	80047d4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	881a      	ldrh	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c8:	b292      	uxth	r2, r2
 80047ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	3302      	adds	r3, #2
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	e008      	b.n	80047e6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	b292      	uxth	r2, r2
 80047de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	3301      	adds	r3, #1
 80047e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1cb      	bne.n	800479c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2200      	movs	r2, #0
 800480c:	2140      	movs	r1, #64	; 0x40
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fc69 	bl	80050e6 <UART_WaitOnFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e005      	b.n	800482a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004838:	b08a      	sub	sp, #40	; 0x28
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	4313      	orrs	r3, r2
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4bb8      	ldr	r3, [pc, #736]	; (8004b4c <UART_SetConfig+0x318>)
 800486a:	4013      	ands	r3, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004872:	430b      	orrs	r3, r1
 8004874:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4aae      	ldr	r2, [pc, #696]	; (8004b50 <UART_SetConfig+0x31c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d004      	beq.n	80048a6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a2:	4313      	orrs	r3, r2
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b6:	430a      	orrs	r2, r1
 80048b8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4aa5      	ldr	r2, [pc, #660]	; (8004b54 <UART_SetConfig+0x320>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d126      	bne.n	8004912 <UART_SetConfig+0xde>
 80048c4:	4ba4      	ldr	r3, [pc, #656]	; (8004b58 <UART_SetConfig+0x324>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d81a      	bhi.n	8004908 <UART_SetConfig+0xd4>
 80048d2:	a201      	add	r2, pc, #4	; (adr r2, 80048d8 <UART_SetConfig+0xa4>)
 80048d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d8:	080048e9 	.word	0x080048e9
 80048dc:	080048f9 	.word	0x080048f9
 80048e0:	080048f1 	.word	0x080048f1
 80048e4:	08004901 	.word	0x08004901
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ee:	e105      	b.n	8004afc <UART_SetConfig+0x2c8>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f6:	e101      	b.n	8004afc <UART_SetConfig+0x2c8>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e0fd      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e0f9      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	bf00      	nop
 8004910:	e0f4      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a91      	ldr	r2, [pc, #580]	; (8004b5c <UART_SetConfig+0x328>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d138      	bne.n	800498e <UART_SetConfig+0x15a>
 800491c:	4b8e      	ldr	r3, [pc, #568]	; (8004b58 <UART_SetConfig+0x324>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b0c      	cmp	r3, #12
 8004928:	d82c      	bhi.n	8004984 <UART_SetConfig+0x150>
 800492a:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <UART_SetConfig+0xfc>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004965 	.word	0x08004965
 8004934:	08004985 	.word	0x08004985
 8004938:	08004985 	.word	0x08004985
 800493c:	08004985 	.word	0x08004985
 8004940:	08004975 	.word	0x08004975
 8004944:	08004985 	.word	0x08004985
 8004948:	08004985 	.word	0x08004985
 800494c:	08004985 	.word	0x08004985
 8004950:	0800496d 	.word	0x0800496d
 8004954:	08004985 	.word	0x08004985
 8004958:	08004985 	.word	0x08004985
 800495c:	08004985 	.word	0x08004985
 8004960:	0800497d 	.word	0x0800497d
 8004964:	2300      	movs	r3, #0
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496a:	e0c7      	b.n	8004afc <UART_SetConfig+0x2c8>
 800496c:	2302      	movs	r3, #2
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004972:	e0c3      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004974:	2304      	movs	r3, #4
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497a:	e0bf      	b.n	8004afc <UART_SetConfig+0x2c8>
 800497c:	2308      	movs	r3, #8
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004982:	e0bb      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004984:	2310      	movs	r3, #16
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498a:	bf00      	nop
 800498c:	e0b6      	b.n	8004afc <UART_SetConfig+0x2c8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a73      	ldr	r2, [pc, #460]	; (8004b60 <UART_SetConfig+0x32c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d125      	bne.n	80049e4 <UART_SetConfig+0x1b0>
 8004998:	4b6f      	ldr	r3, [pc, #444]	; (8004b58 <UART_SetConfig+0x324>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049a2:	2b10      	cmp	r3, #16
 80049a4:	d011      	beq.n	80049ca <UART_SetConfig+0x196>
 80049a6:	2b10      	cmp	r3, #16
 80049a8:	d802      	bhi.n	80049b0 <UART_SetConfig+0x17c>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <UART_SetConfig+0x186>
 80049ae:	e014      	b.n	80049da <UART_SetConfig+0x1a6>
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d006      	beq.n	80049c2 <UART_SetConfig+0x18e>
 80049b4:	2b30      	cmp	r3, #48	; 0x30
 80049b6:	d00c      	beq.n	80049d2 <UART_SetConfig+0x19e>
 80049b8:	e00f      	b.n	80049da <UART_SetConfig+0x1a6>
 80049ba:	2300      	movs	r3, #0
 80049bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c0:	e09c      	b.n	8004afc <UART_SetConfig+0x2c8>
 80049c2:	2302      	movs	r3, #2
 80049c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c8:	e098      	b.n	8004afc <UART_SetConfig+0x2c8>
 80049ca:	2304      	movs	r3, #4
 80049cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d0:	e094      	b.n	8004afc <UART_SetConfig+0x2c8>
 80049d2:	2308      	movs	r3, #8
 80049d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d8:	e090      	b.n	8004afc <UART_SetConfig+0x2c8>
 80049da:	2310      	movs	r3, #16
 80049dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e0:	bf00      	nop
 80049e2:	e08b      	b.n	8004afc <UART_SetConfig+0x2c8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a5e      	ldr	r2, [pc, #376]	; (8004b64 <UART_SetConfig+0x330>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d125      	bne.n	8004a3a <UART_SetConfig+0x206>
 80049ee:	4b5a      	ldr	r3, [pc, #360]	; (8004b58 <UART_SetConfig+0x324>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d011      	beq.n	8004a20 <UART_SetConfig+0x1ec>
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d802      	bhi.n	8004a06 <UART_SetConfig+0x1d2>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <UART_SetConfig+0x1dc>
 8004a04:	e014      	b.n	8004a30 <UART_SetConfig+0x1fc>
 8004a06:	2b80      	cmp	r3, #128	; 0x80
 8004a08:	d006      	beq.n	8004a18 <UART_SetConfig+0x1e4>
 8004a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a0c:	d00c      	beq.n	8004a28 <UART_SetConfig+0x1f4>
 8004a0e:	e00f      	b.n	8004a30 <UART_SetConfig+0x1fc>
 8004a10:	2300      	movs	r3, #0
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a16:	e071      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1e:	e06d      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004a20:	2304      	movs	r3, #4
 8004a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a26:	e069      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004a28:	2308      	movs	r3, #8
 8004a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2e:	e065      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004a30:	2310      	movs	r3, #16
 8004a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a36:	bf00      	nop
 8004a38:	e060      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a4a      	ldr	r2, [pc, #296]	; (8004b68 <UART_SetConfig+0x334>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d129      	bne.n	8004a98 <UART_SetConfig+0x264>
 8004a44:	4b44      	ldr	r3, [pc, #272]	; (8004b58 <UART_SetConfig+0x324>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a52:	d014      	beq.n	8004a7e <UART_SetConfig+0x24a>
 8004a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a58:	d802      	bhi.n	8004a60 <UART_SetConfig+0x22c>
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <UART_SetConfig+0x23a>
 8004a5e:	e016      	b.n	8004a8e <UART_SetConfig+0x25a>
 8004a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a64:	d007      	beq.n	8004a76 <UART_SetConfig+0x242>
 8004a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a6a:	d00c      	beq.n	8004a86 <UART_SetConfig+0x252>
 8004a6c:	e00f      	b.n	8004a8e <UART_SetConfig+0x25a>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a74:	e042      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004a76:	2302      	movs	r3, #2
 8004a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7c:	e03e      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004a7e:	2304      	movs	r3, #4
 8004a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a84:	e03a      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004a86:	2308      	movs	r3, #8
 8004a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8c:	e036      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004a8e:	2310      	movs	r3, #16
 8004a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a94:	bf00      	nop
 8004a96:	e031      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a2c      	ldr	r2, [pc, #176]	; (8004b50 <UART_SetConfig+0x31c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d129      	bne.n	8004af6 <UART_SetConfig+0x2c2>
 8004aa2:	4b2d      	ldr	r3, [pc, #180]	; (8004b58 <UART_SetConfig+0x324>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab0:	d014      	beq.n	8004adc <UART_SetConfig+0x2a8>
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d802      	bhi.n	8004abe <UART_SetConfig+0x28a>
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d007      	beq.n	8004acc <UART_SetConfig+0x298>
 8004abc:	e016      	b.n	8004aec <UART_SetConfig+0x2b8>
 8004abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac2:	d007      	beq.n	8004ad4 <UART_SetConfig+0x2a0>
 8004ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ac8:	d00c      	beq.n	8004ae4 <UART_SetConfig+0x2b0>
 8004aca:	e00f      	b.n	8004aec <UART_SetConfig+0x2b8>
 8004acc:	2300      	movs	r3, #0
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e013      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e00f      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004adc:	2304      	movs	r3, #4
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e00b      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aea:	e007      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004aec:	2310      	movs	r3, #16
 8004aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af2:	bf00      	nop
 8004af4:	e002      	b.n	8004afc <UART_SetConfig+0x2c8>
 8004af6:	2310      	movs	r3, #16
 8004af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <UART_SetConfig+0x31c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	f040 80fe 	bne.w	8004d04 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d837      	bhi.n	8004b80 <UART_SetConfig+0x34c>
 8004b10:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <UART_SetConfig+0x2e4>)
 8004b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004b3d 	.word	0x08004b3d
 8004b1c:	08004b81 	.word	0x08004b81
 8004b20:	08004b45 	.word	0x08004b45
 8004b24:	08004b81 	.word	0x08004b81
 8004b28:	08004b71 	.word	0x08004b71
 8004b2c:	08004b81 	.word	0x08004b81
 8004b30:	08004b81 	.word	0x08004b81
 8004b34:	08004b81 	.word	0x08004b81
 8004b38:	08004b79 	.word	0x08004b79
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004b3c:	f7ff fd6c 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8004b40:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b42:	e020      	b.n	8004b86 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <UART_SetConfig+0x338>)
 8004b46:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b48:	e01d      	b.n	8004b86 <UART_SetConfig+0x352>
 8004b4a:	bf00      	nop
 8004b4c:	efff69f3 	.word	0xefff69f3
 8004b50:	40008000 	.word	0x40008000
 8004b54:	40013800 	.word	0x40013800
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40004400 	.word	0x40004400
 8004b60:	40004800 	.word	0x40004800
 8004b64:	40004c00 	.word	0x40004c00
 8004b68:	40005000 	.word	0x40005000
 8004b6c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004b70:	f7ff fcbc 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 8004b74:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b76:	e006      	b.n	8004b86 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b7e:	e002      	b.n	8004b86 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	76fb      	strb	r3, [r7, #27]
        break;
 8004b84:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 81b9 	beq.w	8004f00 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4413      	add	r3, r2
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d305      	bcc.n	8004baa <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d902      	bls.n	8004bb0 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	76fb      	strb	r3, [r7, #27]
 8004bae:	e1a7      	b.n	8004f00 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	f200 8092 	bhi.w	8004cde <UART_SetConfig+0x4aa>
 8004bba:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <UART_SetConfig+0x38c>)
 8004bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc0:	08004be5 	.word	0x08004be5
 8004bc4:	08004cdf 	.word	0x08004cdf
 8004bc8:	08004c33 	.word	0x08004c33
 8004bcc:	08004cdf 	.word	0x08004cdf
 8004bd0:	08004c67 	.word	0x08004c67
 8004bd4:	08004cdf 	.word	0x08004cdf
 8004bd8:	08004cdf 	.word	0x08004cdf
 8004bdc:	08004cdf 	.word	0x08004cdf
 8004be0:	08004cb5 	.word	0x08004cb5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004be4:	f7ff fd18 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8004be8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4619      	mov	r1, r3
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	f04f 0400 	mov.w	r4, #0
 8004bfa:	0214      	lsls	r4, r2, #8
 8004bfc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004c00:	020b      	lsls	r3, r1, #8
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6852      	ldr	r2, [r2, #4]
 8004c06:	0852      	lsrs	r2, r2, #1
 8004c08:	4611      	mov	r1, r2
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	eb13 0b01 	adds.w	fp, r3, r1
 8004c12:	eb44 0c02 	adc.w	ip, r4, r2
 8004c16:	4658      	mov	r0, fp
 8004c18:	4661      	mov	r1, ip
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f04f 0400 	mov.w	r4, #0
 8004c22:	461a      	mov	r2, r3
 8004c24:	4623      	mov	r3, r4
 8004c26:	f7fc f80f 	bl	8000c48 <__aeabi_uldivmod>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c30:	e058      	b.n	8004ce4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	085b      	lsrs	r3, r3, #1
 8004c38:	f04f 0400 	mov.w	r4, #0
 8004c3c:	49ae      	ldr	r1, [pc, #696]	; (8004ef8 <UART_SetConfig+0x6c4>)
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	eb13 0b01 	adds.w	fp, r3, r1
 8004c46:	eb44 0c02 	adc.w	ip, r4, r2
 8004c4a:	4658      	mov	r0, fp
 8004c4c:	4661      	mov	r1, ip
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f04f 0400 	mov.w	r4, #0
 8004c56:	461a      	mov	r2, r3
 8004c58:	4623      	mov	r3, r4
 8004c5a:	f7fb fff5 	bl	8000c48 <__aeabi_uldivmod>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	460c      	mov	r4, r1
 8004c62:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c64:	e03e      	b.n	8004ce4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004c66:	f7ff fc41 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 8004c6a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	f04f 0400 	mov.w	r4, #0
 8004c7c:	0214      	lsls	r4, r2, #8
 8004c7e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004c82:	020b      	lsls	r3, r1, #8
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6852      	ldr	r2, [r2, #4]
 8004c88:	0852      	lsrs	r2, r2, #1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	eb13 0b01 	adds.w	fp, r3, r1
 8004c94:	eb44 0c02 	adc.w	ip, r4, r2
 8004c98:	4658      	mov	r0, fp
 8004c9a:	4661      	mov	r1, ip
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f04f 0400 	mov.w	r4, #0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	f7fb ffce 	bl	8000c48 <__aeabi_uldivmod>
 8004cac:	4603      	mov	r3, r0
 8004cae:	460c      	mov	r4, r1
 8004cb0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004cb2:	e017      	b.n	8004ce4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	f04f 0400 	mov.w	r4, #0
 8004cbe:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004cc2:	f144 0100 	adc.w	r1, r4, #0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f04f 0400 	mov.w	r4, #0
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4623      	mov	r3, r4
 8004cd2:	f7fb ffb9 	bl	8000c48 <__aeabi_uldivmod>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	460c      	mov	r4, r1
 8004cda:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004cdc:	e002      	b.n	8004ce4 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	76fb      	strb	r3, [r7, #27]
            break;
 8004ce2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cea:	d308      	bcc.n	8004cfe <UART_SetConfig+0x4ca>
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf2:	d204      	bcs.n	8004cfe <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	60da      	str	r2, [r3, #12]
 8004cfc:	e100      	b.n	8004f00 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	76fb      	strb	r3, [r7, #27]
 8004d02:	e0fd      	b.n	8004f00 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0c:	f040 8084 	bne.w	8004e18 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d85f      	bhi.n	8004dd8 <UART_SetConfig+0x5a4>
 8004d18:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <UART_SetConfig+0x4ec>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d45 	.word	0x08004d45
 8004d24:	08004d65 	.word	0x08004d65
 8004d28:	08004d85 	.word	0x08004d85
 8004d2c:	08004dd9 	.word	0x08004dd9
 8004d30:	08004da1 	.word	0x08004da1
 8004d34:	08004dd9 	.word	0x08004dd9
 8004d38:	08004dd9 	.word	0x08004dd9
 8004d3c:	08004dd9 	.word	0x08004dd9
 8004d40:	08004dc1 	.word	0x08004dc1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d44:	f7ff fc68 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8004d48:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	005a      	lsls	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	085b      	lsrs	r3, r3, #1
 8004d54:	441a      	add	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d62:	e03c      	b.n	8004dde <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d64:	f7ff fc6e 	bl	8004644 <HAL_RCC_GetPCLK2Freq>
 8004d68:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	005a      	lsls	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	441a      	add	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d82:	e02c      	b.n	8004dde <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004d8e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6852      	ldr	r2, [r2, #4]
 8004d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d9e:	e01e      	b.n	8004dde <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da0:	f7ff fba4 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 8004da4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	005a      	lsls	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	441a      	add	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dbe:	e00e      	b.n	8004dde <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	085b      	lsrs	r3, r3, #1
 8004dc6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dd6:	e002      	b.n	8004dde <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	76fb      	strb	r3, [r7, #27]
        break;
 8004ddc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	2b0f      	cmp	r3, #15
 8004de2:	d916      	bls.n	8004e12 <UART_SetConfig+0x5de>
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dea:	d212      	bcs.n	8004e12 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f023 030f 	bic.w	r3, r3, #15
 8004df4:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	89fb      	ldrh	r3, [r7, #14]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	89fa      	ldrh	r2, [r7, #14]
 8004e0e:	60da      	str	r2, [r3, #12]
 8004e10:	e076      	b.n	8004f00 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	76fb      	strb	r3, [r7, #27]
 8004e16:	e073      	b.n	8004f00 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d85c      	bhi.n	8004eda <UART_SetConfig+0x6a6>
 8004e20:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <UART_SetConfig+0x5f4>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004e4d 	.word	0x08004e4d
 8004e2c:	08004e6b 	.word	0x08004e6b
 8004e30:	08004e89 	.word	0x08004e89
 8004e34:	08004edb 	.word	0x08004edb
 8004e38:	08004ea5 	.word	0x08004ea5
 8004e3c:	08004edb 	.word	0x08004edb
 8004e40:	08004edb 	.word	0x08004edb
 8004e44:	08004edb 	.word	0x08004edb
 8004e48:	08004ec3 	.word	0x08004ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e4c:	f7ff fbe4 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8004e50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	085a      	lsrs	r2, r3, #1
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	441a      	add	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e68:	e03a      	b.n	8004ee0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e6a:	f7ff fbeb 	bl	8004644 <HAL_RCC_GetPCLK2Freq>
 8004e6e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	085a      	lsrs	r2, r3, #1
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e86:	e02b      	b.n	8004ee0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004e92:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6852      	ldr	r2, [r2, #4]
 8004e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ea2:	e01d      	b.n	8004ee0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea4:	f7ff fb22 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 8004ea8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	085a      	lsrs	r2, r3, #1
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	441a      	add	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ec0:	e00e      	b.n	8004ee0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ed8:	e002      	b.n	8004ee0 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	76fb      	strb	r3, [r7, #27]
        break;
 8004ede:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	2b0f      	cmp	r3, #15
 8004ee4:	d90a      	bls.n	8004efc <UART_SetConfig+0x6c8>
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eec:	d206      	bcs.n	8004efc <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	e003      	b.n	8004f00 <UART_SetConfig+0x6cc>
 8004ef8:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004f0c:	7efb      	ldrb	r3, [r7, #27]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3728      	adds	r7, #40	; 0x28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004f18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	f003 0320 	and.w	r3, r3, #32
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01a      	beq.n	800502e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005016:	d10a      	bne.n	800502e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	605a      	str	r2, [r3, #4]
  }
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af02      	add	r7, sp, #8
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800506a:	f7fe f8e7 	bl	800323c <HAL_GetTick>
 800506e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b08      	cmp	r3, #8
 800507c:	d10e      	bne.n	800509c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800507e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f82a 	bl	80050e6 <UART_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e020      	b.n	80050de <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d10e      	bne.n	80050c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f814 	bl	80050e6 <UART_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e00a      	b.n	80050de <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	603b      	str	r3, [r7, #0]
 80050f2:	4613      	mov	r3, r2
 80050f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f6:	e05d      	b.n	80051b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fe:	d059      	beq.n	80051b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005100:	f7fe f89c 	bl	800323c <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	429a      	cmp	r2, r3
 800510e:	d302      	bcc.n	8005116 <UART_WaitOnFlagUntilTimeout+0x30>
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d11b      	bne.n	800514e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005124:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0201 	bic.w	r2, r2, #1
 8005134:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2220      	movs	r2, #32
 800513a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e042      	b.n	80051d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d02b      	beq.n	80051b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516a:	d123      	bne.n	80051b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005174:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005184:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e00f      	b.n	80051d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	4013      	ands	r3, r2
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d092      	beq.n	80050f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <findslot>:
 80051dc:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <findslot+0x2c>)
 80051de:	b510      	push	{r4, lr}
 80051e0:	4604      	mov	r4, r0
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	b118      	cbz	r0, 80051ee <findslot+0x12>
 80051e6:	6983      	ldr	r3, [r0, #24]
 80051e8:	b90b      	cbnz	r3, 80051ee <findslot+0x12>
 80051ea:	f000 fabb 	bl	8005764 <__sinit>
 80051ee:	2c13      	cmp	r4, #19
 80051f0:	d807      	bhi.n	8005202 <findslot+0x26>
 80051f2:	4806      	ldr	r0, [pc, #24]	; (800520c <findslot+0x30>)
 80051f4:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 80051f8:	3301      	adds	r3, #1
 80051fa:	d002      	beq.n	8005202 <findslot+0x26>
 80051fc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005200:	bd10      	pop	{r4, pc}
 8005202:	2000      	movs	r0, #0
 8005204:	e7fc      	b.n	8005200 <findslot+0x24>
 8005206:	bf00      	nop
 8005208:	200000dc 	.word	0x200000dc
 800520c:	20000314 	.word	0x20000314

08005210 <checkerror>:
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	1c43      	adds	r3, r0, #1
 8005214:	4605      	mov	r5, r0
 8005216:	d109      	bne.n	800522c <checkerror+0x1c>
 8005218:	f000 fa5e 	bl	80056d8 <__errno>
 800521c:	2413      	movs	r4, #19
 800521e:	4606      	mov	r6, r0
 8005220:	2700      	movs	r7, #0
 8005222:	4620      	mov	r0, r4
 8005224:	4639      	mov	r1, r7
 8005226:	beab      	bkpt	0x00ab
 8005228:	4604      	mov	r4, r0
 800522a:	6034      	str	r4, [r6, #0]
 800522c:	4628      	mov	r0, r5
 800522e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005230 <error>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	4605      	mov	r5, r0
 8005234:	f000 fa50 	bl	80056d8 <__errno>
 8005238:	2413      	movs	r4, #19
 800523a:	4606      	mov	r6, r0
 800523c:	2700      	movs	r7, #0
 800523e:	4620      	mov	r0, r4
 8005240:	4639      	mov	r1, r7
 8005242:	beab      	bkpt	0x00ab
 8005244:	4604      	mov	r4, r0
 8005246:	6034      	str	r4, [r6, #0]
 8005248:	4628      	mov	r0, r5
 800524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800524c <_swiread>:
 800524c:	b530      	push	{r4, r5, lr}
 800524e:	b085      	sub	sp, #20
 8005250:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005254:	9203      	str	r2, [sp, #12]
 8005256:	2406      	movs	r4, #6
 8005258:	ad01      	add	r5, sp, #4
 800525a:	4620      	mov	r0, r4
 800525c:	4629      	mov	r1, r5
 800525e:	beab      	bkpt	0x00ab
 8005260:	4604      	mov	r4, r0
 8005262:	4620      	mov	r0, r4
 8005264:	f7ff ffd4 	bl	8005210 <checkerror>
 8005268:	b005      	add	sp, #20
 800526a:	bd30      	pop	{r4, r5, pc}

0800526c <_read>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	460e      	mov	r6, r1
 8005270:	4615      	mov	r5, r2
 8005272:	f7ff ffb3 	bl	80051dc <findslot>
 8005276:	4604      	mov	r4, r0
 8005278:	b930      	cbnz	r0, 8005288 <_read+0x1c>
 800527a:	f000 fa2d 	bl	80056d8 <__errno>
 800527e:	2309      	movs	r3, #9
 8005280:	6003      	str	r3, [r0, #0]
 8005282:	f04f 30ff 	mov.w	r0, #4294967295
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	462a      	mov	r2, r5
 800528a:	4631      	mov	r1, r6
 800528c:	6800      	ldr	r0, [r0, #0]
 800528e:	f7ff ffdd 	bl	800524c <_swiread>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	bf1f      	itttt	ne
 8005296:	6863      	ldrne	r3, [r4, #4]
 8005298:	1a28      	subne	r0, r5, r0
 800529a:	181b      	addne	r3, r3, r0
 800529c:	6063      	strne	r3, [r4, #4]
 800529e:	e7f2      	b.n	8005286 <_read+0x1a>

080052a0 <_swilseek>:
 80052a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052a2:	460c      	mov	r4, r1
 80052a4:	4616      	mov	r6, r2
 80052a6:	f7ff ff99 	bl	80051dc <findslot>
 80052aa:	4605      	mov	r5, r0
 80052ac:	b940      	cbnz	r0, 80052c0 <_swilseek+0x20>
 80052ae:	f000 fa13 	bl	80056d8 <__errno>
 80052b2:	2309      	movs	r3, #9
 80052b4:	6003      	str	r3, [r0, #0]
 80052b6:	f04f 34ff 	mov.w	r4, #4294967295
 80052ba:	4620      	mov	r0, r4
 80052bc:	b003      	add	sp, #12
 80052be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c0:	2e02      	cmp	r6, #2
 80052c2:	d903      	bls.n	80052cc <_swilseek+0x2c>
 80052c4:	f000 fa08 	bl	80056d8 <__errno>
 80052c8:	2316      	movs	r3, #22
 80052ca:	e7f3      	b.n	80052b4 <_swilseek+0x14>
 80052cc:	2e01      	cmp	r6, #1
 80052ce:	d112      	bne.n	80052f6 <_swilseek+0x56>
 80052d0:	6843      	ldr	r3, [r0, #4]
 80052d2:	18e4      	adds	r4, r4, r3
 80052d4:	d4f6      	bmi.n	80052c4 <_swilseek+0x24>
 80052d6:	682b      	ldr	r3, [r5, #0]
 80052d8:	260a      	movs	r6, #10
 80052da:	e9cd 3400 	strd	r3, r4, [sp]
 80052de:	466f      	mov	r7, sp
 80052e0:	4630      	mov	r0, r6
 80052e2:	4639      	mov	r1, r7
 80052e4:	beab      	bkpt	0x00ab
 80052e6:	4606      	mov	r6, r0
 80052e8:	4630      	mov	r0, r6
 80052ea:	f7ff ff91 	bl	8005210 <checkerror>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	dbe1      	blt.n	80052b6 <_swilseek+0x16>
 80052f2:	606c      	str	r4, [r5, #4]
 80052f4:	e7e1      	b.n	80052ba <_swilseek+0x1a>
 80052f6:	2e02      	cmp	r6, #2
 80052f8:	d1ed      	bne.n	80052d6 <_swilseek+0x36>
 80052fa:	af02      	add	r7, sp, #8
 80052fc:	6803      	ldr	r3, [r0, #0]
 80052fe:	f847 3d08 	str.w	r3, [r7, #-8]!
 8005302:	260c      	movs	r6, #12
 8005304:	4630      	mov	r0, r6
 8005306:	4639      	mov	r1, r7
 8005308:	beab      	bkpt	0x00ab
 800530a:	4606      	mov	r6, r0
 800530c:	4630      	mov	r0, r6
 800530e:	f7ff ff7f 	bl	8005210 <checkerror>
 8005312:	1c43      	adds	r3, r0, #1
 8005314:	d0cf      	beq.n	80052b6 <_swilseek+0x16>
 8005316:	4404      	add	r4, r0
 8005318:	e7dd      	b.n	80052d6 <_swilseek+0x36>

0800531a <_lseek>:
 800531a:	f7ff bfc1 	b.w	80052a0 <_swilseek>

0800531e <_swiwrite>:
 800531e:	b530      	push	{r4, r5, lr}
 8005320:	b085      	sub	sp, #20
 8005322:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005326:	9203      	str	r2, [sp, #12]
 8005328:	2405      	movs	r4, #5
 800532a:	ad01      	add	r5, sp, #4
 800532c:	4620      	mov	r0, r4
 800532e:	4629      	mov	r1, r5
 8005330:	beab      	bkpt	0x00ab
 8005332:	4604      	mov	r4, r0
 8005334:	4620      	mov	r0, r4
 8005336:	f7ff ff6b 	bl	8005210 <checkerror>
 800533a:	b005      	add	sp, #20
 800533c:	bd30      	pop	{r4, r5, pc}

0800533e <_write>:
 800533e:	b570      	push	{r4, r5, r6, lr}
 8005340:	460e      	mov	r6, r1
 8005342:	4615      	mov	r5, r2
 8005344:	f7ff ff4a 	bl	80051dc <findslot>
 8005348:	4604      	mov	r4, r0
 800534a:	b930      	cbnz	r0, 800535a <_write+0x1c>
 800534c:	f000 f9c4 	bl	80056d8 <__errno>
 8005350:	2309      	movs	r3, #9
 8005352:	6003      	str	r3, [r0, #0]
 8005354:	f04f 30ff 	mov.w	r0, #4294967295
 8005358:	bd70      	pop	{r4, r5, r6, pc}
 800535a:	462a      	mov	r2, r5
 800535c:	4631      	mov	r1, r6
 800535e:	6800      	ldr	r0, [r0, #0]
 8005360:	f7ff ffdd 	bl	800531e <_swiwrite>
 8005364:	1e02      	subs	r2, r0, #0
 8005366:	dbf5      	blt.n	8005354 <_write+0x16>
 8005368:	6863      	ldr	r3, [r4, #4]
 800536a:	1aa8      	subs	r0, r5, r2
 800536c:	4403      	add	r3, r0
 800536e:	42aa      	cmp	r2, r5
 8005370:	6063      	str	r3, [r4, #4]
 8005372:	d1f1      	bne.n	8005358 <_write+0x1a>
 8005374:	2000      	movs	r0, #0
 8005376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800537a:	f7ff bf59 	b.w	8005230 <error>

0800537e <_swiclose>:
 800537e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005380:	ad02      	add	r5, sp, #8
 8005382:	2402      	movs	r4, #2
 8005384:	f845 0d04 	str.w	r0, [r5, #-4]!
 8005388:	4620      	mov	r0, r4
 800538a:	4629      	mov	r1, r5
 800538c:	beab      	bkpt	0x00ab
 800538e:	4604      	mov	r4, r0
 8005390:	4620      	mov	r0, r4
 8005392:	f7ff ff3d 	bl	8005210 <checkerror>
 8005396:	b003      	add	sp, #12
 8005398:	bd30      	pop	{r4, r5, pc}
	...

0800539c <_close>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	4605      	mov	r5, r0
 80053a0:	f7ff ff1c 	bl	80051dc <findslot>
 80053a4:	4604      	mov	r4, r0
 80053a6:	b930      	cbnz	r0, 80053b6 <_close+0x1a>
 80053a8:	f000 f996 	bl	80056d8 <__errno>
 80053ac:	2309      	movs	r3, #9
 80053ae:	6003      	str	r3, [r0, #0]
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	bd38      	pop	{r3, r4, r5, pc}
 80053b6:	3d01      	subs	r5, #1
 80053b8:	2d01      	cmp	r5, #1
 80053ba:	d809      	bhi.n	80053d0 <_close+0x34>
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <_close+0x48>)
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d104      	bne.n	80053d0 <_close+0x34>
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ca:	6003      	str	r3, [r0, #0]
 80053cc:	2000      	movs	r0, #0
 80053ce:	e7f1      	b.n	80053b4 <_close+0x18>
 80053d0:	6820      	ldr	r0, [r4, #0]
 80053d2:	f7ff ffd4 	bl	800537e <_swiclose>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d1ec      	bne.n	80053b4 <_close+0x18>
 80053da:	f04f 33ff 	mov.w	r3, #4294967295
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	e7e8      	b.n	80053b4 <_close+0x18>
 80053e2:	bf00      	nop
 80053e4:	20000314 	.word	0x20000314

080053e8 <_swistat>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	460c      	mov	r4, r1
 80053ec:	f7ff fef6 	bl	80051dc <findslot>
 80053f0:	4606      	mov	r6, r0
 80053f2:	b930      	cbnz	r0, 8005402 <_swistat+0x1a>
 80053f4:	f000 f970 	bl	80056d8 <__errno>
 80053f8:	2309      	movs	r3, #9
 80053fa:	6003      	str	r3, [r0, #0]
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005400:	bd70      	pop	{r4, r5, r6, pc}
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005408:	6063      	str	r3, [r4, #4]
 800540a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800540e:	6463      	str	r3, [r4, #68]	; 0x44
 8005410:	250c      	movs	r5, #12
 8005412:	4628      	mov	r0, r5
 8005414:	4631      	mov	r1, r6
 8005416:	beab      	bkpt	0x00ab
 8005418:	4605      	mov	r5, r0
 800541a:	4628      	mov	r0, r5
 800541c:	f7ff fef8 	bl	8005210 <checkerror>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	bf1c      	itt	ne
 8005424:	6120      	strne	r0, [r4, #16]
 8005426:	2000      	movne	r0, #0
 8005428:	e7ea      	b.n	8005400 <_swistat+0x18>

0800542a <_stat>:
 800542a:	b538      	push	{r3, r4, r5, lr}
 800542c:	460d      	mov	r5, r1
 800542e:	4604      	mov	r4, r0
 8005430:	2258      	movs	r2, #88	; 0x58
 8005432:	2100      	movs	r1, #0
 8005434:	4628      	mov	r0, r5
 8005436:	f000 fa4e 	bl	80058d6 <memset>
 800543a:	4620      	mov	r0, r4
 800543c:	2100      	movs	r1, #0
 800543e:	f000 f811 	bl	8005464 <_swiopen>
 8005442:	1c43      	adds	r3, r0, #1
 8005444:	4604      	mov	r4, r0
 8005446:	d00b      	beq.n	8005460 <_stat+0x36>
 8005448:	686b      	ldr	r3, [r5, #4]
 800544a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800544e:	606b      	str	r3, [r5, #4]
 8005450:	4629      	mov	r1, r5
 8005452:	f7ff ffc9 	bl	80053e8 <_swistat>
 8005456:	4605      	mov	r5, r0
 8005458:	4620      	mov	r0, r4
 800545a:	f7ff ff9f 	bl	800539c <_close>
 800545e:	462c      	mov	r4, r5
 8005460:	4620      	mov	r0, r4
 8005462:	bd38      	pop	{r3, r4, r5, pc}

08005464 <_swiopen>:
 8005464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005468:	4b2b      	ldr	r3, [pc, #172]	; (8005518 <_swiopen+0xb4>)
 800546a:	b096      	sub	sp, #88	; 0x58
 800546c:	4682      	mov	sl, r0
 800546e:	460e      	mov	r6, r1
 8005470:	2500      	movs	r5, #0
 8005472:	4698      	mov	r8, r3
 8005474:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8005478:	1c61      	adds	r1, r4, #1
 800547a:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 800547e:	d036      	beq.n	80054ee <_swiopen+0x8a>
 8005480:	3501      	adds	r5, #1
 8005482:	2d14      	cmp	r5, #20
 8005484:	d1f6      	bne.n	8005474 <_swiopen+0x10>
 8005486:	f000 f927 	bl	80056d8 <__errno>
 800548a:	2318      	movs	r3, #24
 800548c:	6003      	str	r3, [r0, #0]
 800548e:	f04f 34ff 	mov.w	r4, #4294967295
 8005492:	e03c      	b.n	800550e <_swiopen+0xaa>
 8005494:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8005498:	f240 6301 	movw	r3, #1537	; 0x601
 800549c:	07b2      	lsls	r2, r6, #30
 800549e:	bf48      	it	mi
 80054a0:	f044 0402 	orrmi.w	r4, r4, #2
 80054a4:	421e      	tst	r6, r3
 80054a6:	bf18      	it	ne
 80054a8:	f044 0404 	orrne.w	r4, r4, #4
 80054ac:	0733      	lsls	r3, r6, #28
 80054ae:	bf48      	it	mi
 80054b0:	f024 0404 	bicmi.w	r4, r4, #4
 80054b4:	4650      	mov	r0, sl
 80054b6:	bf48      	it	mi
 80054b8:	f044 0408 	orrmi.w	r4, r4, #8
 80054bc:	f8cd a000 	str.w	sl, [sp]
 80054c0:	f7fa fe86 	bl	80001d0 <strlen>
 80054c4:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80054c8:	2401      	movs	r4, #1
 80054ca:	4620      	mov	r0, r4
 80054cc:	4649      	mov	r1, r9
 80054ce:	beab      	bkpt	0x00ab
 80054d0:	4604      	mov	r4, r0
 80054d2:	2c00      	cmp	r4, #0
 80054d4:	db06      	blt.n	80054e4 <_swiopen+0x80>
 80054d6:	4447      	add	r7, r8
 80054d8:	2300      	movs	r3, #0
 80054da:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80054de:	607b      	str	r3, [r7, #4]
 80054e0:	462c      	mov	r4, r5
 80054e2:	e014      	b.n	800550e <_swiopen+0xaa>
 80054e4:	4620      	mov	r0, r4
 80054e6:	f7ff fea3 	bl	8005230 <error>
 80054ea:	4604      	mov	r4, r0
 80054ec:	e00f      	b.n	800550e <_swiopen+0xaa>
 80054ee:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80054f2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80054f6:	46e9      	mov	r9, sp
 80054f8:	d1cc      	bne.n	8005494 <_swiopen+0x30>
 80054fa:	4649      	mov	r1, r9
 80054fc:	4650      	mov	r0, sl
 80054fe:	f7ff ff94 	bl	800542a <_stat>
 8005502:	3001      	adds	r0, #1
 8005504:	d0c6      	beq.n	8005494 <_swiopen+0x30>
 8005506:	f000 f8e7 	bl	80056d8 <__errno>
 800550a:	2311      	movs	r3, #17
 800550c:	6003      	str	r3, [r0, #0]
 800550e:	4620      	mov	r0, r4
 8005510:	b016      	add	sp, #88	; 0x58
 8005512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005516:	bf00      	nop
 8005518:	20000314 	.word	0x20000314

0800551c <_get_semihosting_exts>:
 800551c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005520:	4607      	mov	r7, r0
 8005522:	4688      	mov	r8, r1
 8005524:	4829      	ldr	r0, [pc, #164]	; (80055cc <_get_semihosting_exts+0xb0>)
 8005526:	2100      	movs	r1, #0
 8005528:	4615      	mov	r5, r2
 800552a:	f7ff ff9b 	bl	8005464 <_swiopen>
 800552e:	462a      	mov	r2, r5
 8005530:	4604      	mov	r4, r0
 8005532:	2100      	movs	r1, #0
 8005534:	4638      	mov	r0, r7
 8005536:	f000 f9ce 	bl	80058d6 <memset>
 800553a:	1c63      	adds	r3, r4, #1
 800553c:	d015      	beq.n	800556a <_get_semihosting_exts+0x4e>
 800553e:	4620      	mov	r0, r4
 8005540:	f7ff fe4c 	bl	80051dc <findslot>
 8005544:	260c      	movs	r6, #12
 8005546:	4681      	mov	r9, r0
 8005548:	4630      	mov	r0, r6
 800554a:	4649      	mov	r1, r9
 800554c:	beab      	bkpt	0x00ab
 800554e:	4606      	mov	r6, r0
 8005550:	4630      	mov	r0, r6
 8005552:	f7ff fe5d 	bl	8005210 <checkerror>
 8005556:	2803      	cmp	r0, #3
 8005558:	dd02      	ble.n	8005560 <_get_semihosting_exts+0x44>
 800555a:	3803      	subs	r0, #3
 800555c:	42a8      	cmp	r0, r5
 800555e:	dc08      	bgt.n	8005572 <_get_semihosting_exts+0x56>
 8005560:	4620      	mov	r0, r4
 8005562:	f7ff ff1b 	bl	800539c <_close>
 8005566:	f04f 34ff 	mov.w	r4, #4294967295
 800556a:	4620      	mov	r0, r4
 800556c:	b003      	add	sp, #12
 800556e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005572:	2204      	movs	r2, #4
 8005574:	eb0d 0102 	add.w	r1, sp, r2
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff fe77 	bl	800526c <_read>
 800557e:	2803      	cmp	r0, #3
 8005580:	ddee      	ble.n	8005560 <_get_semihosting_exts+0x44>
 8005582:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005586:	2b53      	cmp	r3, #83	; 0x53
 8005588:	d1ea      	bne.n	8005560 <_get_semihosting_exts+0x44>
 800558a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800558e:	2b48      	cmp	r3, #72	; 0x48
 8005590:	d1e6      	bne.n	8005560 <_get_semihosting_exts+0x44>
 8005592:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005596:	2b46      	cmp	r3, #70	; 0x46
 8005598:	d1e2      	bne.n	8005560 <_get_semihosting_exts+0x44>
 800559a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800559e:	2b42      	cmp	r3, #66	; 0x42
 80055a0:	d1de      	bne.n	8005560 <_get_semihosting_exts+0x44>
 80055a2:	2201      	movs	r2, #1
 80055a4:	4641      	mov	r1, r8
 80055a6:	4620      	mov	r0, r4
 80055a8:	f7ff fe7a 	bl	80052a0 <_swilseek>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	dbd7      	blt.n	8005560 <_get_semihosting_exts+0x44>
 80055b0:	462a      	mov	r2, r5
 80055b2:	4639      	mov	r1, r7
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7ff fe59 	bl	800526c <_read>
 80055ba:	4605      	mov	r5, r0
 80055bc:	4620      	mov	r0, r4
 80055be:	f7ff feed 	bl	800539c <_close>
 80055c2:	4628      	mov	r0, r5
 80055c4:	f7ff fe24 	bl	8005210 <checkerror>
 80055c8:	4604      	mov	r4, r0
 80055ca:	e7ce      	b.n	800556a <_get_semihosting_exts+0x4e>
 80055cc:	08008ed4 	.word	0x08008ed4

080055d0 <initialise_semihosting_exts>:
 80055d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055d2:	4d0a      	ldr	r5, [pc, #40]	; (80055fc <initialise_semihosting_exts+0x2c>)
 80055d4:	4c0a      	ldr	r4, [pc, #40]	; (8005600 <initialise_semihosting_exts+0x30>)
 80055d6:	2100      	movs	r1, #0
 80055d8:	2201      	movs	r2, #1
 80055da:	a801      	add	r0, sp, #4
 80055dc:	6029      	str	r1, [r5, #0]
 80055de:	6022      	str	r2, [r4, #0]
 80055e0:	f7ff ff9c 	bl	800551c <_get_semihosting_exts>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	dd07      	ble.n	80055f8 <initialise_semihosting_exts+0x28>
 80055e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80055ec:	f003 0201 	and.w	r2, r3, #1
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	602a      	str	r2, [r5, #0]
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	b003      	add	sp, #12
 80055fa:	bd30      	pop	{r4, r5, pc}
 80055fc:	200000d4 	.word	0x200000d4
 8005600:	200000d8 	.word	0x200000d8

08005604 <_has_ext_stdout_stderr>:
 8005604:	b510      	push	{r4, lr}
 8005606:	4c04      	ldr	r4, [pc, #16]	; (8005618 <_has_ext_stdout_stderr+0x14>)
 8005608:	6822      	ldr	r2, [r4, #0]
 800560a:	2a00      	cmp	r2, #0
 800560c:	da01      	bge.n	8005612 <_has_ext_stdout_stderr+0xe>
 800560e:	f7ff ffdf 	bl	80055d0 <initialise_semihosting_exts>
 8005612:	6820      	ldr	r0, [r4, #0]
 8005614:	bd10      	pop	{r4, pc}
 8005616:	bf00      	nop
 8005618:	200000d8 	.word	0x200000d8

0800561c <initialise_monitor_handles>:
 800561c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005620:	b085      	sub	sp, #20
 8005622:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80056d4 <initialise_monitor_handles+0xb8>
 8005626:	f8cd 9004 	str.w	r9, [sp, #4]
 800562a:	2303      	movs	r3, #3
 800562c:	2400      	movs	r4, #0
 800562e:	9303      	str	r3, [sp, #12]
 8005630:	f10d 0804 	add.w	r8, sp, #4
 8005634:	9402      	str	r4, [sp, #8]
 8005636:	2501      	movs	r5, #1
 8005638:	4628      	mov	r0, r5
 800563a:	4641      	mov	r1, r8
 800563c:	beab      	bkpt	0x00ab
 800563e:	4605      	mov	r5, r0
 8005640:	4e20      	ldr	r6, [pc, #128]	; (80056c4 <initialise_monitor_handles+0xa8>)
 8005642:	4a21      	ldr	r2, [pc, #132]	; (80056c8 <initialise_monitor_handles+0xac>)
 8005644:	6035      	str	r5, [r6, #0]
 8005646:	4623      	mov	r3, r4
 8005648:	f04f 31ff 	mov.w	r1, #4294967295
 800564c:	4614      	mov	r4, r2
 800564e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8005652:	3301      	adds	r3, #1
 8005654:	2b14      	cmp	r3, #20
 8005656:	d1fa      	bne.n	800564e <initialise_monitor_handles+0x32>
 8005658:	f7ff ffd4 	bl	8005604 <_has_ext_stdout_stderr>
 800565c:	4d1b      	ldr	r5, [pc, #108]	; (80056cc <initialise_monitor_handles+0xb0>)
 800565e:	b1d0      	cbz	r0, 8005696 <initialise_monitor_handles+0x7a>
 8005660:	f04f 0a03 	mov.w	sl, #3
 8005664:	2304      	movs	r3, #4
 8005666:	f8cd 9004 	str.w	r9, [sp, #4]
 800566a:	2701      	movs	r7, #1
 800566c:	f8cd a00c 	str.w	sl, [sp, #12]
 8005670:	9302      	str	r3, [sp, #8]
 8005672:	4638      	mov	r0, r7
 8005674:	4641      	mov	r1, r8
 8005676:	beab      	bkpt	0x00ab
 8005678:	4683      	mov	fp, r0
 800567a:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <initialise_monitor_handles+0xb4>)
 800567c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005680:	f8c3 b000 	str.w	fp, [r3]
 8005684:	2308      	movs	r3, #8
 8005686:	f8cd a00c 	str.w	sl, [sp, #12]
 800568a:	9302      	str	r3, [sp, #8]
 800568c:	4638      	mov	r0, r7
 800568e:	4641      	mov	r1, r8
 8005690:	beab      	bkpt	0x00ab
 8005692:	4607      	mov	r7, r0
 8005694:	602f      	str	r7, [r5, #0]
 8005696:	682b      	ldr	r3, [r5, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	bf02      	ittt	eq
 800569c:	4b0c      	ldreq	r3, [pc, #48]	; (80056d0 <initialise_monitor_handles+0xb4>)
 800569e:	681b      	ldreq	r3, [r3, #0]
 80056a0:	602b      	streq	r3, [r5, #0]
 80056a2:	6833      	ldr	r3, [r6, #0]
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	2600      	movs	r6, #0
 80056a8:	6066      	str	r6, [r4, #4]
 80056aa:	f7ff ffab 	bl	8005604 <_has_ext_stdout_stderr>
 80056ae:	b130      	cbz	r0, 80056be <initialise_monitor_handles+0xa2>
 80056b0:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <initialise_monitor_handles+0xb4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80056be:	b005      	add	sp, #20
 80056c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c4:	2000030c 	.word	0x2000030c
 80056c8:	20000314 	.word	0x20000314
 80056cc:	20000308 	.word	0x20000308
 80056d0:	20000310 	.word	0x20000310
 80056d4:	08008eea 	.word	0x08008eea

080056d8 <__errno>:
 80056d8:	4b01      	ldr	r3, [pc, #4]	; (80056e0 <__errno+0x8>)
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	200000dc 	.word	0x200000dc

080056e4 <std>:
 80056e4:	2300      	movs	r3, #0
 80056e6:	b510      	push	{r4, lr}
 80056e8:	4604      	mov	r4, r0
 80056ea:	e9c0 3300 	strd	r3, r3, [r0]
 80056ee:	6083      	str	r3, [r0, #8]
 80056f0:	8181      	strh	r1, [r0, #12]
 80056f2:	6643      	str	r3, [r0, #100]	; 0x64
 80056f4:	81c2      	strh	r2, [r0, #14]
 80056f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056fa:	6183      	str	r3, [r0, #24]
 80056fc:	4619      	mov	r1, r3
 80056fe:	2208      	movs	r2, #8
 8005700:	305c      	adds	r0, #92	; 0x5c
 8005702:	f000 f8e8 	bl	80058d6 <memset>
 8005706:	4b05      	ldr	r3, [pc, #20]	; (800571c <std+0x38>)
 8005708:	6263      	str	r3, [r4, #36]	; 0x24
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <std+0x3c>)
 800570c:	62a3      	str	r3, [r4, #40]	; 0x28
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <std+0x40>)
 8005710:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005712:	4b05      	ldr	r3, [pc, #20]	; (8005728 <std+0x44>)
 8005714:	6224      	str	r4, [r4, #32]
 8005716:	6323      	str	r3, [r4, #48]	; 0x30
 8005718:	bd10      	pop	{r4, pc}
 800571a:	bf00      	nop
 800571c:	080062b5 	.word	0x080062b5
 8005720:	080062d7 	.word	0x080062d7
 8005724:	0800630f 	.word	0x0800630f
 8005728:	08006333 	.word	0x08006333

0800572c <_cleanup_r>:
 800572c:	4901      	ldr	r1, [pc, #4]	; (8005734 <_cleanup_r+0x8>)
 800572e:	f000 b885 	b.w	800583c <_fwalk_reent>
 8005732:	bf00      	nop
 8005734:	08007125 	.word	0x08007125

08005738 <__sfmoreglue>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	1e4a      	subs	r2, r1, #1
 800573c:	2568      	movs	r5, #104	; 0x68
 800573e:	4355      	muls	r5, r2
 8005740:	460e      	mov	r6, r1
 8005742:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005746:	f000 f8cf 	bl	80058e8 <_malloc_r>
 800574a:	4604      	mov	r4, r0
 800574c:	b140      	cbz	r0, 8005760 <__sfmoreglue+0x28>
 800574e:	2100      	movs	r1, #0
 8005750:	e9c0 1600 	strd	r1, r6, [r0]
 8005754:	300c      	adds	r0, #12
 8005756:	60a0      	str	r0, [r4, #8]
 8005758:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800575c:	f000 f8bb 	bl	80058d6 <memset>
 8005760:	4620      	mov	r0, r4
 8005762:	bd70      	pop	{r4, r5, r6, pc}

08005764 <__sinit>:
 8005764:	6983      	ldr	r3, [r0, #24]
 8005766:	b510      	push	{r4, lr}
 8005768:	4604      	mov	r4, r0
 800576a:	bb33      	cbnz	r3, 80057ba <__sinit+0x56>
 800576c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005770:	6503      	str	r3, [r0, #80]	; 0x50
 8005772:	4b12      	ldr	r3, [pc, #72]	; (80057bc <__sinit+0x58>)
 8005774:	4a12      	ldr	r2, [pc, #72]	; (80057c0 <__sinit+0x5c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6282      	str	r2, [r0, #40]	; 0x28
 800577a:	4298      	cmp	r0, r3
 800577c:	bf04      	itt	eq
 800577e:	2301      	moveq	r3, #1
 8005780:	6183      	streq	r3, [r0, #24]
 8005782:	f000 f81f 	bl	80057c4 <__sfp>
 8005786:	6060      	str	r0, [r4, #4]
 8005788:	4620      	mov	r0, r4
 800578a:	f000 f81b 	bl	80057c4 <__sfp>
 800578e:	60a0      	str	r0, [r4, #8]
 8005790:	4620      	mov	r0, r4
 8005792:	f000 f817 	bl	80057c4 <__sfp>
 8005796:	2200      	movs	r2, #0
 8005798:	60e0      	str	r0, [r4, #12]
 800579a:	2104      	movs	r1, #4
 800579c:	6860      	ldr	r0, [r4, #4]
 800579e:	f7ff ffa1 	bl	80056e4 <std>
 80057a2:	2201      	movs	r2, #1
 80057a4:	2109      	movs	r1, #9
 80057a6:	68a0      	ldr	r0, [r4, #8]
 80057a8:	f7ff ff9c 	bl	80056e4 <std>
 80057ac:	2202      	movs	r2, #2
 80057ae:	2112      	movs	r1, #18
 80057b0:	68e0      	ldr	r0, [r4, #12]
 80057b2:	f7ff ff97 	bl	80056e4 <std>
 80057b6:	2301      	movs	r3, #1
 80057b8:	61a3      	str	r3, [r4, #24]
 80057ba:	bd10      	pop	{r4, pc}
 80057bc:	08008f50 	.word	0x08008f50
 80057c0:	0800572d 	.word	0x0800572d

080057c4 <__sfp>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <__sfp+0x70>)
 80057c8:	681e      	ldr	r6, [r3, #0]
 80057ca:	69b3      	ldr	r3, [r6, #24]
 80057cc:	4607      	mov	r7, r0
 80057ce:	b913      	cbnz	r3, 80057d6 <__sfp+0x12>
 80057d0:	4630      	mov	r0, r6
 80057d2:	f7ff ffc7 	bl	8005764 <__sinit>
 80057d6:	3648      	adds	r6, #72	; 0x48
 80057d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057dc:	3b01      	subs	r3, #1
 80057de:	d503      	bpl.n	80057e8 <__sfp+0x24>
 80057e0:	6833      	ldr	r3, [r6, #0]
 80057e2:	b133      	cbz	r3, 80057f2 <__sfp+0x2e>
 80057e4:	6836      	ldr	r6, [r6, #0]
 80057e6:	e7f7      	b.n	80057d8 <__sfp+0x14>
 80057e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057ec:	b16d      	cbz	r5, 800580a <__sfp+0x46>
 80057ee:	3468      	adds	r4, #104	; 0x68
 80057f0:	e7f4      	b.n	80057dc <__sfp+0x18>
 80057f2:	2104      	movs	r1, #4
 80057f4:	4638      	mov	r0, r7
 80057f6:	f7ff ff9f 	bl	8005738 <__sfmoreglue>
 80057fa:	6030      	str	r0, [r6, #0]
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d1f1      	bne.n	80057e4 <__sfp+0x20>
 8005800:	230c      	movs	r3, #12
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	4604      	mov	r4, r0
 8005806:	4620      	mov	r0, r4
 8005808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800580a:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <__sfp+0x74>)
 800580c:	6665      	str	r5, [r4, #100]	; 0x64
 800580e:	e9c4 5500 	strd	r5, r5, [r4]
 8005812:	60a5      	str	r5, [r4, #8]
 8005814:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005818:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800581c:	2208      	movs	r2, #8
 800581e:	4629      	mov	r1, r5
 8005820:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005824:	f000 f857 	bl	80058d6 <memset>
 8005828:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800582c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005830:	e7e9      	b.n	8005806 <__sfp+0x42>
 8005832:	bf00      	nop
 8005834:	08008f50 	.word	0x08008f50
 8005838:	ffff0001 	.word	0xffff0001

0800583c <_fwalk_reent>:
 800583c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005840:	4680      	mov	r8, r0
 8005842:	4689      	mov	r9, r1
 8005844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005848:	2600      	movs	r6, #0
 800584a:	b914      	cbnz	r4, 8005852 <_fwalk_reent+0x16>
 800584c:	4630      	mov	r0, r6
 800584e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005852:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005856:	3f01      	subs	r7, #1
 8005858:	d501      	bpl.n	800585e <_fwalk_reent+0x22>
 800585a:	6824      	ldr	r4, [r4, #0]
 800585c:	e7f5      	b.n	800584a <_fwalk_reent+0xe>
 800585e:	89ab      	ldrh	r3, [r5, #12]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d907      	bls.n	8005874 <_fwalk_reent+0x38>
 8005864:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005868:	3301      	adds	r3, #1
 800586a:	d003      	beq.n	8005874 <_fwalk_reent+0x38>
 800586c:	4629      	mov	r1, r5
 800586e:	4640      	mov	r0, r8
 8005870:	47c8      	blx	r9
 8005872:	4306      	orrs	r6, r0
 8005874:	3568      	adds	r5, #104	; 0x68
 8005876:	e7ee      	b.n	8005856 <_fwalk_reent+0x1a>

08005878 <__libc_init_array>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4e0d      	ldr	r6, [pc, #52]	; (80058b0 <__libc_init_array+0x38>)
 800587c:	4c0d      	ldr	r4, [pc, #52]	; (80058b4 <__libc_init_array+0x3c>)
 800587e:	1ba4      	subs	r4, r4, r6
 8005880:	10a4      	asrs	r4, r4, #2
 8005882:	2500      	movs	r5, #0
 8005884:	42a5      	cmp	r5, r4
 8005886:	d109      	bne.n	800589c <__libc_init_array+0x24>
 8005888:	4e0b      	ldr	r6, [pc, #44]	; (80058b8 <__libc_init_array+0x40>)
 800588a:	4c0c      	ldr	r4, [pc, #48]	; (80058bc <__libc_init_array+0x44>)
 800588c:	f003 fa52 	bl	8008d34 <_init>
 8005890:	1ba4      	subs	r4, r4, r6
 8005892:	10a4      	asrs	r4, r4, #2
 8005894:	2500      	movs	r5, #0
 8005896:	42a5      	cmp	r5, r4
 8005898:	d105      	bne.n	80058a6 <__libc_init_array+0x2e>
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058a0:	4798      	blx	r3
 80058a2:	3501      	adds	r5, #1
 80058a4:	e7ee      	b.n	8005884 <__libc_init_array+0xc>
 80058a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058aa:	4798      	blx	r3
 80058ac:	3501      	adds	r5, #1
 80058ae:	e7f2      	b.n	8005896 <__libc_init_array+0x1e>
 80058b0:	08009208 	.word	0x08009208
 80058b4:	08009208 	.word	0x08009208
 80058b8:	08009208 	.word	0x08009208
 80058bc:	0800920c 	.word	0x0800920c

080058c0 <memcpy>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	1e43      	subs	r3, r0, #1
 80058c4:	440a      	add	r2, r1
 80058c6:	4291      	cmp	r1, r2
 80058c8:	d100      	bne.n	80058cc <memcpy+0xc>
 80058ca:	bd10      	pop	{r4, pc}
 80058cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d4:	e7f7      	b.n	80058c6 <memcpy+0x6>

080058d6 <memset>:
 80058d6:	4402      	add	r2, r0
 80058d8:	4603      	mov	r3, r0
 80058da:	4293      	cmp	r3, r2
 80058dc:	d100      	bne.n	80058e0 <memset+0xa>
 80058de:	4770      	bx	lr
 80058e0:	f803 1b01 	strb.w	r1, [r3], #1
 80058e4:	e7f9      	b.n	80058da <memset+0x4>
	...

080058e8 <_malloc_r>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	1ccd      	adds	r5, r1, #3
 80058ec:	f025 0503 	bic.w	r5, r5, #3
 80058f0:	3508      	adds	r5, #8
 80058f2:	2d0c      	cmp	r5, #12
 80058f4:	bf38      	it	cc
 80058f6:	250c      	movcc	r5, #12
 80058f8:	2d00      	cmp	r5, #0
 80058fa:	4606      	mov	r6, r0
 80058fc:	db01      	blt.n	8005902 <_malloc_r+0x1a>
 80058fe:	42a9      	cmp	r1, r5
 8005900:	d903      	bls.n	800590a <_malloc_r+0x22>
 8005902:	230c      	movs	r3, #12
 8005904:	6033      	str	r3, [r6, #0]
 8005906:	2000      	movs	r0, #0
 8005908:	bd70      	pop	{r4, r5, r6, pc}
 800590a:	f001 fc5d 	bl	80071c8 <__malloc_lock>
 800590e:	4a21      	ldr	r2, [pc, #132]	; (8005994 <_malloc_r+0xac>)
 8005910:	6814      	ldr	r4, [r2, #0]
 8005912:	4621      	mov	r1, r4
 8005914:	b991      	cbnz	r1, 800593c <_malloc_r+0x54>
 8005916:	4c20      	ldr	r4, [pc, #128]	; (8005998 <_malloc_r+0xb0>)
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	b91b      	cbnz	r3, 8005924 <_malloc_r+0x3c>
 800591c:	4630      	mov	r0, r6
 800591e:	f000 fc99 	bl	8006254 <_sbrk_r>
 8005922:	6020      	str	r0, [r4, #0]
 8005924:	4629      	mov	r1, r5
 8005926:	4630      	mov	r0, r6
 8005928:	f000 fc94 	bl	8006254 <_sbrk_r>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d124      	bne.n	800597a <_malloc_r+0x92>
 8005930:	230c      	movs	r3, #12
 8005932:	6033      	str	r3, [r6, #0]
 8005934:	4630      	mov	r0, r6
 8005936:	f001 fc48 	bl	80071ca <__malloc_unlock>
 800593a:	e7e4      	b.n	8005906 <_malloc_r+0x1e>
 800593c:	680b      	ldr	r3, [r1, #0]
 800593e:	1b5b      	subs	r3, r3, r5
 8005940:	d418      	bmi.n	8005974 <_malloc_r+0x8c>
 8005942:	2b0b      	cmp	r3, #11
 8005944:	d90f      	bls.n	8005966 <_malloc_r+0x7e>
 8005946:	600b      	str	r3, [r1, #0]
 8005948:	50cd      	str	r5, [r1, r3]
 800594a:	18cc      	adds	r4, r1, r3
 800594c:	4630      	mov	r0, r6
 800594e:	f001 fc3c 	bl	80071ca <__malloc_unlock>
 8005952:	f104 000b 	add.w	r0, r4, #11
 8005956:	1d23      	adds	r3, r4, #4
 8005958:	f020 0007 	bic.w	r0, r0, #7
 800595c:	1ac3      	subs	r3, r0, r3
 800595e:	d0d3      	beq.n	8005908 <_malloc_r+0x20>
 8005960:	425a      	negs	r2, r3
 8005962:	50e2      	str	r2, [r4, r3]
 8005964:	e7d0      	b.n	8005908 <_malloc_r+0x20>
 8005966:	428c      	cmp	r4, r1
 8005968:	684b      	ldr	r3, [r1, #4]
 800596a:	bf16      	itet	ne
 800596c:	6063      	strne	r3, [r4, #4]
 800596e:	6013      	streq	r3, [r2, #0]
 8005970:	460c      	movne	r4, r1
 8005972:	e7eb      	b.n	800594c <_malloc_r+0x64>
 8005974:	460c      	mov	r4, r1
 8005976:	6849      	ldr	r1, [r1, #4]
 8005978:	e7cc      	b.n	8005914 <_malloc_r+0x2c>
 800597a:	1cc4      	adds	r4, r0, #3
 800597c:	f024 0403 	bic.w	r4, r4, #3
 8005980:	42a0      	cmp	r0, r4
 8005982:	d005      	beq.n	8005990 <_malloc_r+0xa8>
 8005984:	1a21      	subs	r1, r4, r0
 8005986:	4630      	mov	r0, r6
 8005988:	f000 fc64 	bl	8006254 <_sbrk_r>
 800598c:	3001      	adds	r0, #1
 800598e:	d0cf      	beq.n	8005930 <_malloc_r+0x48>
 8005990:	6025      	str	r5, [r4, #0]
 8005992:	e7db      	b.n	800594c <_malloc_r+0x64>
 8005994:	200003b4 	.word	0x200003b4
 8005998:	200003b8 	.word	0x200003b8

0800599c <__cvt>:
 800599c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059a0:	ec55 4b10 	vmov	r4, r5, d0
 80059a4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80059a6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80059aa:	2d00      	cmp	r5, #0
 80059ac:	460e      	mov	r6, r1
 80059ae:	4691      	mov	r9, r2
 80059b0:	4619      	mov	r1, r3
 80059b2:	bfb8      	it	lt
 80059b4:	4622      	movlt	r2, r4
 80059b6:	462b      	mov	r3, r5
 80059b8:	f027 0720 	bic.w	r7, r7, #32
 80059bc:	bfbb      	ittet	lt
 80059be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80059c2:	461d      	movlt	r5, r3
 80059c4:	2300      	movge	r3, #0
 80059c6:	232d      	movlt	r3, #45	; 0x2d
 80059c8:	bfb8      	it	lt
 80059ca:	4614      	movlt	r4, r2
 80059cc:	2f46      	cmp	r7, #70	; 0x46
 80059ce:	700b      	strb	r3, [r1, #0]
 80059d0:	d004      	beq.n	80059dc <__cvt+0x40>
 80059d2:	2f45      	cmp	r7, #69	; 0x45
 80059d4:	d100      	bne.n	80059d8 <__cvt+0x3c>
 80059d6:	3601      	adds	r6, #1
 80059d8:	2102      	movs	r1, #2
 80059da:	e000      	b.n	80059de <__cvt+0x42>
 80059dc:	2103      	movs	r1, #3
 80059de:	ab03      	add	r3, sp, #12
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	ab02      	add	r3, sp, #8
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	4632      	mov	r2, r6
 80059e8:	4653      	mov	r3, sl
 80059ea:	ec45 4b10 	vmov	d0, r4, r5
 80059ee:	f000 fd5b 	bl	80064a8 <_dtoa_r>
 80059f2:	2f47      	cmp	r7, #71	; 0x47
 80059f4:	4680      	mov	r8, r0
 80059f6:	d102      	bne.n	80059fe <__cvt+0x62>
 80059f8:	f019 0f01 	tst.w	r9, #1
 80059fc:	d026      	beq.n	8005a4c <__cvt+0xb0>
 80059fe:	2f46      	cmp	r7, #70	; 0x46
 8005a00:	eb08 0906 	add.w	r9, r8, r6
 8005a04:	d111      	bne.n	8005a2a <__cvt+0x8e>
 8005a06:	f898 3000 	ldrb.w	r3, [r8]
 8005a0a:	2b30      	cmp	r3, #48	; 0x30
 8005a0c:	d10a      	bne.n	8005a24 <__cvt+0x88>
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2300      	movs	r3, #0
 8005a12:	4620      	mov	r0, r4
 8005a14:	4629      	mov	r1, r5
 8005a16:	f7fb f857 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a1a:	b918      	cbnz	r0, 8005a24 <__cvt+0x88>
 8005a1c:	f1c6 0601 	rsb	r6, r6, #1
 8005a20:	f8ca 6000 	str.w	r6, [sl]
 8005a24:	f8da 3000 	ldr.w	r3, [sl]
 8005a28:	4499      	add	r9, r3
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	4620      	mov	r0, r4
 8005a30:	4629      	mov	r1, r5
 8005a32:	f7fb f849 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a36:	b938      	cbnz	r0, 8005a48 <__cvt+0xac>
 8005a38:	2230      	movs	r2, #48	; 0x30
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	454b      	cmp	r3, r9
 8005a3e:	d205      	bcs.n	8005a4c <__cvt+0xb0>
 8005a40:	1c59      	adds	r1, r3, #1
 8005a42:	9103      	str	r1, [sp, #12]
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	e7f8      	b.n	8005a3a <__cvt+0x9e>
 8005a48:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a50:	eba3 0308 	sub.w	r3, r3, r8
 8005a54:	4640      	mov	r0, r8
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	b004      	add	sp, #16
 8005a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005a5e <__exponent>:
 8005a5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a60:	2900      	cmp	r1, #0
 8005a62:	4604      	mov	r4, r0
 8005a64:	bfba      	itte	lt
 8005a66:	4249      	neglt	r1, r1
 8005a68:	232d      	movlt	r3, #45	; 0x2d
 8005a6a:	232b      	movge	r3, #43	; 0x2b
 8005a6c:	2909      	cmp	r1, #9
 8005a6e:	f804 2b02 	strb.w	r2, [r4], #2
 8005a72:	7043      	strb	r3, [r0, #1]
 8005a74:	dd20      	ble.n	8005ab8 <__exponent+0x5a>
 8005a76:	f10d 0307 	add.w	r3, sp, #7
 8005a7a:	461f      	mov	r7, r3
 8005a7c:	260a      	movs	r6, #10
 8005a7e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005a82:	fb06 1115 	mls	r1, r6, r5, r1
 8005a86:	3130      	adds	r1, #48	; 0x30
 8005a88:	2d09      	cmp	r5, #9
 8005a8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a8e:	f103 32ff 	add.w	r2, r3, #4294967295
 8005a92:	4629      	mov	r1, r5
 8005a94:	dc09      	bgt.n	8005aaa <__exponent+0x4c>
 8005a96:	3130      	adds	r1, #48	; 0x30
 8005a98:	3b02      	subs	r3, #2
 8005a9a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005a9e:	42bb      	cmp	r3, r7
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	d304      	bcc.n	8005aae <__exponent+0x50>
 8005aa4:	1a10      	subs	r0, r2, r0
 8005aa6:	b003      	add	sp, #12
 8005aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aaa:	4613      	mov	r3, r2
 8005aac:	e7e7      	b.n	8005a7e <__exponent+0x20>
 8005aae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ab2:	f804 2b01 	strb.w	r2, [r4], #1
 8005ab6:	e7f2      	b.n	8005a9e <__exponent+0x40>
 8005ab8:	2330      	movs	r3, #48	; 0x30
 8005aba:	4419      	add	r1, r3
 8005abc:	7083      	strb	r3, [r0, #2]
 8005abe:	1d02      	adds	r2, r0, #4
 8005ac0:	70c1      	strb	r1, [r0, #3]
 8005ac2:	e7ef      	b.n	8005aa4 <__exponent+0x46>

08005ac4 <_printf_float>:
 8005ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac8:	b08d      	sub	sp, #52	; 0x34
 8005aca:	460c      	mov	r4, r1
 8005acc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005ad0:	4616      	mov	r6, r2
 8005ad2:	461f      	mov	r7, r3
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	f001 fb4f 	bl	8007178 <_localeconv_r>
 8005ada:	6803      	ldr	r3, [r0, #0]
 8005adc:	9304      	str	r3, [sp, #16]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fa fb76 	bl	80001d0 <strlen>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8005aec:	9005      	str	r0, [sp, #20]
 8005aee:	3307      	adds	r3, #7
 8005af0:	f023 0307 	bic.w	r3, r3, #7
 8005af4:	f103 0208 	add.w	r2, r3, #8
 8005af8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005afc:	f8d4 b000 	ldr.w	fp, [r4]
 8005b00:	f8c8 2000 	str.w	r2, [r8]
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b0c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b14:	9307      	str	r3, [sp, #28]
 8005b16:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1e:	4ba7      	ldr	r3, [pc, #668]	; (8005dbc <_printf_float+0x2f8>)
 8005b20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b24:	f7fb f802 	bl	8000b2c <__aeabi_dcmpun>
 8005b28:	bb70      	cbnz	r0, 8005b88 <_printf_float+0xc4>
 8005b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2e:	4ba3      	ldr	r3, [pc, #652]	; (8005dbc <_printf_float+0x2f8>)
 8005b30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b34:	f7fa ffdc 	bl	8000af0 <__aeabi_dcmple>
 8005b38:	bb30      	cbnz	r0, 8005b88 <_printf_float+0xc4>
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4640      	mov	r0, r8
 8005b40:	4649      	mov	r1, r9
 8005b42:	f7fa ffcb 	bl	8000adc <__aeabi_dcmplt>
 8005b46:	b110      	cbz	r0, 8005b4e <_printf_float+0x8a>
 8005b48:	232d      	movs	r3, #45	; 0x2d
 8005b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b4e:	4a9c      	ldr	r2, [pc, #624]	; (8005dc0 <_printf_float+0x2fc>)
 8005b50:	4b9c      	ldr	r3, [pc, #624]	; (8005dc4 <_printf_float+0x300>)
 8005b52:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005b56:	bf8c      	ite	hi
 8005b58:	4690      	movhi	r8, r2
 8005b5a:	4698      	movls	r8, r3
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	f02b 0204 	bic.w	r2, fp, #4
 8005b62:	6123      	str	r3, [r4, #16]
 8005b64:	6022      	str	r2, [r4, #0]
 8005b66:	f04f 0900 	mov.w	r9, #0
 8005b6a:	9700      	str	r7, [sp, #0]
 8005b6c:	4633      	mov	r3, r6
 8005b6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b70:	4621      	mov	r1, r4
 8005b72:	4628      	mov	r0, r5
 8005b74:	f000 f9e6 	bl	8005f44 <_printf_common>
 8005b78:	3001      	adds	r0, #1
 8005b7a:	f040 808d 	bne.w	8005c98 <_printf_float+0x1d4>
 8005b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b82:	b00d      	add	sp, #52	; 0x34
 8005b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	4649      	mov	r1, r9
 8005b90:	f7fa ffcc 	bl	8000b2c <__aeabi_dcmpun>
 8005b94:	b110      	cbz	r0, 8005b9c <_printf_float+0xd8>
 8005b96:	4a8c      	ldr	r2, [pc, #560]	; (8005dc8 <_printf_float+0x304>)
 8005b98:	4b8c      	ldr	r3, [pc, #560]	; (8005dcc <_printf_float+0x308>)
 8005b9a:	e7da      	b.n	8005b52 <_printf_float+0x8e>
 8005b9c:	6861      	ldr	r1, [r4, #4]
 8005b9e:	1c4b      	adds	r3, r1, #1
 8005ba0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005ba4:	a80a      	add	r0, sp, #40	; 0x28
 8005ba6:	d13e      	bne.n	8005c26 <_printf_float+0x162>
 8005ba8:	2306      	movs	r3, #6
 8005baa:	6063      	str	r3, [r4, #4]
 8005bac:	2300      	movs	r3, #0
 8005bae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005bb2:	ab09      	add	r3, sp, #36	; 0x24
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	ec49 8b10 	vmov	d0, r8, r9
 8005bba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bbe:	6022      	str	r2, [r4, #0]
 8005bc0:	f8cd a004 	str.w	sl, [sp, #4]
 8005bc4:	6861      	ldr	r1, [r4, #4]
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f7ff fee8 	bl	800599c <__cvt>
 8005bcc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005bd0:	2b47      	cmp	r3, #71	; 0x47
 8005bd2:	4680      	mov	r8, r0
 8005bd4:	d109      	bne.n	8005bea <_printf_float+0x126>
 8005bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd8:	1cd8      	adds	r0, r3, #3
 8005bda:	db02      	blt.n	8005be2 <_printf_float+0x11e>
 8005bdc:	6862      	ldr	r2, [r4, #4]
 8005bde:	4293      	cmp	r3, r2
 8005be0:	dd47      	ble.n	8005c72 <_printf_float+0x1ae>
 8005be2:	f1aa 0a02 	sub.w	sl, sl, #2
 8005be6:	fa5f fa8a 	uxtb.w	sl, sl
 8005bea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005bee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bf0:	d824      	bhi.n	8005c3c <_printf_float+0x178>
 8005bf2:	3901      	subs	r1, #1
 8005bf4:	4652      	mov	r2, sl
 8005bf6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bfa:	9109      	str	r1, [sp, #36]	; 0x24
 8005bfc:	f7ff ff2f 	bl	8005a5e <__exponent>
 8005c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c02:	1813      	adds	r3, r2, r0
 8005c04:	2a01      	cmp	r2, #1
 8005c06:	4681      	mov	r9, r0
 8005c08:	6123      	str	r3, [r4, #16]
 8005c0a:	dc02      	bgt.n	8005c12 <_printf_float+0x14e>
 8005c0c:	6822      	ldr	r2, [r4, #0]
 8005c0e:	07d1      	lsls	r1, r2, #31
 8005c10:	d501      	bpl.n	8005c16 <_printf_float+0x152>
 8005c12:	3301      	adds	r3, #1
 8005c14:	6123      	str	r3, [r4, #16]
 8005c16:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0a5      	beq.n	8005b6a <_printf_float+0xa6>
 8005c1e:	232d      	movs	r3, #45	; 0x2d
 8005c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c24:	e7a1      	b.n	8005b6a <_printf_float+0xa6>
 8005c26:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005c2a:	f000 8177 	beq.w	8005f1c <_printf_float+0x458>
 8005c2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005c32:	d1bb      	bne.n	8005bac <_printf_float+0xe8>
 8005c34:	2900      	cmp	r1, #0
 8005c36:	d1b9      	bne.n	8005bac <_printf_float+0xe8>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e7b6      	b.n	8005baa <_printf_float+0xe6>
 8005c3c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005c40:	d119      	bne.n	8005c76 <_printf_float+0x1b2>
 8005c42:	2900      	cmp	r1, #0
 8005c44:	6863      	ldr	r3, [r4, #4]
 8005c46:	dd0c      	ble.n	8005c62 <_printf_float+0x19e>
 8005c48:	6121      	str	r1, [r4, #16]
 8005c4a:	b913      	cbnz	r3, 8005c52 <_printf_float+0x18e>
 8005c4c:	6822      	ldr	r2, [r4, #0]
 8005c4e:	07d2      	lsls	r2, r2, #31
 8005c50:	d502      	bpl.n	8005c58 <_printf_float+0x194>
 8005c52:	3301      	adds	r3, #1
 8005c54:	440b      	add	r3, r1
 8005c56:	6123      	str	r3, [r4, #16]
 8005c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c5c:	f04f 0900 	mov.w	r9, #0
 8005c60:	e7d9      	b.n	8005c16 <_printf_float+0x152>
 8005c62:	b913      	cbnz	r3, 8005c6a <_printf_float+0x1a6>
 8005c64:	6822      	ldr	r2, [r4, #0]
 8005c66:	07d0      	lsls	r0, r2, #31
 8005c68:	d501      	bpl.n	8005c6e <_printf_float+0x1aa>
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	e7f3      	b.n	8005c56 <_printf_float+0x192>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e7f1      	b.n	8005c56 <_printf_float+0x192>
 8005c72:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005c76:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	db05      	blt.n	8005c8a <_printf_float+0x1c6>
 8005c7e:	6822      	ldr	r2, [r4, #0]
 8005c80:	6123      	str	r3, [r4, #16]
 8005c82:	07d1      	lsls	r1, r2, #31
 8005c84:	d5e8      	bpl.n	8005c58 <_printf_float+0x194>
 8005c86:	3301      	adds	r3, #1
 8005c88:	e7e5      	b.n	8005c56 <_printf_float+0x192>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bfd4      	ite	le
 8005c8e:	f1c3 0302 	rsble	r3, r3, #2
 8005c92:	2301      	movgt	r3, #1
 8005c94:	4413      	add	r3, r2
 8005c96:	e7de      	b.n	8005c56 <_printf_float+0x192>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	055a      	lsls	r2, r3, #21
 8005c9c:	d407      	bmi.n	8005cae <_printf_float+0x1ea>
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b8      	blx	r7
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d12b      	bne.n	8005d04 <_printf_float+0x240>
 8005cac:	e767      	b.n	8005b7e <_printf_float+0xba>
 8005cae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005cb2:	f240 80dc 	bls.w	8005e6e <_printf_float+0x3aa>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cbe:	f7fa ff03 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d033      	beq.n	8005d2e <_printf_float+0x26a>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4a41      	ldr	r2, [pc, #260]	; (8005dd0 <_printf_float+0x30c>)
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4628      	mov	r0, r5
 8005cce:	47b8      	blx	r7
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	f43f af54 	beq.w	8005b7e <_printf_float+0xba>
 8005cd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	db02      	blt.n	8005ce4 <_printf_float+0x220>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	07d8      	lsls	r0, r3, #31
 8005ce2:	d50f      	bpl.n	8005d04 <_printf_float+0x240>
 8005ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4628      	mov	r0, r5
 8005cec:	47b8      	blx	r7
 8005cee:	3001      	adds	r0, #1
 8005cf0:	f43f af45 	beq.w	8005b7e <_printf_float+0xba>
 8005cf4:	f04f 0800 	mov.w	r8, #0
 8005cf8:	f104 091a 	add.w	r9, r4, #26
 8005cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	4543      	cmp	r3, r8
 8005d02:	dc09      	bgt.n	8005d18 <_printf_float+0x254>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	079b      	lsls	r3, r3, #30
 8005d08:	f100 8103 	bmi.w	8005f12 <_printf_float+0x44e>
 8005d0c:	68e0      	ldr	r0, [r4, #12]
 8005d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d10:	4298      	cmp	r0, r3
 8005d12:	bfb8      	it	lt
 8005d14:	4618      	movlt	r0, r3
 8005d16:	e734      	b.n	8005b82 <_printf_float+0xbe>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	464a      	mov	r2, r9
 8005d1c:	4631      	mov	r1, r6
 8005d1e:	4628      	mov	r0, r5
 8005d20:	47b8      	blx	r7
 8005d22:	3001      	adds	r0, #1
 8005d24:	f43f af2b 	beq.w	8005b7e <_printf_float+0xba>
 8005d28:	f108 0801 	add.w	r8, r8, #1
 8005d2c:	e7e6      	b.n	8005cfc <_printf_float+0x238>
 8005d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	dc2b      	bgt.n	8005d8c <_printf_float+0x2c8>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4a26      	ldr	r2, [pc, #152]	; (8005dd0 <_printf_float+0x30c>)
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	47b8      	blx	r7
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f43f af1d 	beq.w	8005b7e <_printf_float+0xba>
 8005d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d46:	b923      	cbnz	r3, 8005d52 <_printf_float+0x28e>
 8005d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d4a:	b913      	cbnz	r3, 8005d52 <_printf_float+0x28e>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	07d9      	lsls	r1, r3, #31
 8005d50:	d5d8      	bpl.n	8005d04 <_printf_float+0x240>
 8005d52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	f43f af0e 	beq.w	8005b7e <_printf_float+0xba>
 8005d62:	f04f 0900 	mov.w	r9, #0
 8005d66:	f104 0a1a 	add.w	sl, r4, #26
 8005d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d6c:	425b      	negs	r3, r3
 8005d6e:	454b      	cmp	r3, r9
 8005d70:	dc01      	bgt.n	8005d76 <_printf_float+0x2b2>
 8005d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d74:	e794      	b.n	8005ca0 <_printf_float+0x1dc>
 8005d76:	2301      	movs	r3, #1
 8005d78:	4652      	mov	r2, sl
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b8      	blx	r7
 8005d80:	3001      	adds	r0, #1
 8005d82:	f43f aefc 	beq.w	8005b7e <_printf_float+0xba>
 8005d86:	f109 0901 	add.w	r9, r9, #1
 8005d8a:	e7ee      	b.n	8005d6a <_printf_float+0x2a6>
 8005d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d90:	429a      	cmp	r2, r3
 8005d92:	bfa8      	it	ge
 8005d94:	461a      	movge	r2, r3
 8005d96:	2a00      	cmp	r2, #0
 8005d98:	4691      	mov	r9, r2
 8005d9a:	dd07      	ble.n	8005dac <_printf_float+0x2e8>
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4642      	mov	r2, r8
 8005da2:	4628      	mov	r0, r5
 8005da4:	47b8      	blx	r7
 8005da6:	3001      	adds	r0, #1
 8005da8:	f43f aee9 	beq.w	8005b7e <_printf_float+0xba>
 8005dac:	f104 031a 	add.w	r3, r4, #26
 8005db0:	f04f 0b00 	mov.w	fp, #0
 8005db4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005db8:	9306      	str	r3, [sp, #24]
 8005dba:	e015      	b.n	8005de8 <_printf_float+0x324>
 8005dbc:	7fefffff 	.word	0x7fefffff
 8005dc0:	08008f58 	.word	0x08008f58
 8005dc4:	08008f54 	.word	0x08008f54
 8005dc8:	08008f60 	.word	0x08008f60
 8005dcc:	08008f5c 	.word	0x08008f5c
 8005dd0:	08008f64 	.word	0x08008f64
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	9a06      	ldr	r2, [sp, #24]
 8005dd8:	4631      	mov	r1, r6
 8005dda:	4628      	mov	r0, r5
 8005ddc:	47b8      	blx	r7
 8005dde:	3001      	adds	r0, #1
 8005de0:	f43f aecd 	beq.w	8005b7e <_printf_float+0xba>
 8005de4:	f10b 0b01 	add.w	fp, fp, #1
 8005de8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005dec:	ebaa 0309 	sub.w	r3, sl, r9
 8005df0:	455b      	cmp	r3, fp
 8005df2:	dcef      	bgt.n	8005dd4 <_printf_float+0x310>
 8005df4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	44d0      	add	r8, sl
 8005dfc:	db15      	blt.n	8005e2a <_printf_float+0x366>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	07da      	lsls	r2, r3, #31
 8005e02:	d412      	bmi.n	8005e2a <_printf_float+0x366>
 8005e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e08:	eba3 020a 	sub.w	r2, r3, sl
 8005e0c:	eba3 0a01 	sub.w	sl, r3, r1
 8005e10:	4592      	cmp	sl, r2
 8005e12:	bfa8      	it	ge
 8005e14:	4692      	movge	sl, r2
 8005e16:	f1ba 0f00 	cmp.w	sl, #0
 8005e1a:	dc0e      	bgt.n	8005e3a <_printf_float+0x376>
 8005e1c:	f04f 0800 	mov.w	r8, #0
 8005e20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e24:	f104 091a 	add.w	r9, r4, #26
 8005e28:	e019      	b.n	8005e5e <_printf_float+0x39a>
 8005e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b8      	blx	r7
 8005e34:	3001      	adds	r0, #1
 8005e36:	d1e5      	bne.n	8005e04 <_printf_float+0x340>
 8005e38:	e6a1      	b.n	8005b7e <_printf_float+0xba>
 8005e3a:	4653      	mov	r3, sl
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4628      	mov	r0, r5
 8005e42:	47b8      	blx	r7
 8005e44:	3001      	adds	r0, #1
 8005e46:	d1e9      	bne.n	8005e1c <_printf_float+0x358>
 8005e48:	e699      	b.n	8005b7e <_printf_float+0xba>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	464a      	mov	r2, r9
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	47b8      	blx	r7
 8005e54:	3001      	adds	r0, #1
 8005e56:	f43f ae92 	beq.w	8005b7e <_printf_float+0xba>
 8005e5a:	f108 0801 	add.w	r8, r8, #1
 8005e5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	eba3 030a 	sub.w	r3, r3, sl
 8005e68:	4543      	cmp	r3, r8
 8005e6a:	dcee      	bgt.n	8005e4a <_printf_float+0x386>
 8005e6c:	e74a      	b.n	8005d04 <_printf_float+0x240>
 8005e6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e70:	2a01      	cmp	r2, #1
 8005e72:	dc01      	bgt.n	8005e78 <_printf_float+0x3b4>
 8005e74:	07db      	lsls	r3, r3, #31
 8005e76:	d53a      	bpl.n	8005eee <_printf_float+0x42a>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4642      	mov	r2, r8
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4628      	mov	r0, r5
 8005e80:	47b8      	blx	r7
 8005e82:	3001      	adds	r0, #1
 8005e84:	f43f ae7b 	beq.w	8005b7e <_printf_float+0xba>
 8005e88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4628      	mov	r0, r5
 8005e90:	47b8      	blx	r7
 8005e92:	3001      	adds	r0, #1
 8005e94:	f108 0801 	add.w	r8, r8, #1
 8005e98:	f43f ae71 	beq.w	8005b7e <_printf_float+0xba>
 8005e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f103 3aff 	add.w	sl, r3, #4294967295
 8005ea4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f7fa fe0d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005eae:	b9c8      	cbnz	r0, 8005ee4 <_printf_float+0x420>
 8005eb0:	4653      	mov	r3, sl
 8005eb2:	4642      	mov	r2, r8
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	47b8      	blx	r7
 8005eba:	3001      	adds	r0, #1
 8005ebc:	d10e      	bne.n	8005edc <_printf_float+0x418>
 8005ebe:	e65e      	b.n	8005b7e <_printf_float+0xba>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4652      	mov	r2, sl
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f43f ae57 	beq.w	8005b7e <_printf_float+0xba>
 8005ed0:	f108 0801 	add.w	r8, r8, #1
 8005ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	4543      	cmp	r3, r8
 8005eda:	dcf1      	bgt.n	8005ec0 <_printf_float+0x3fc>
 8005edc:	464b      	mov	r3, r9
 8005ede:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ee2:	e6de      	b.n	8005ca2 <_printf_float+0x1de>
 8005ee4:	f04f 0800 	mov.w	r8, #0
 8005ee8:	f104 0a1a 	add.w	sl, r4, #26
 8005eec:	e7f2      	b.n	8005ed4 <_printf_float+0x410>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e7df      	b.n	8005eb2 <_printf_float+0x3ee>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	464a      	mov	r2, r9
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4628      	mov	r0, r5
 8005efa:	47b8      	blx	r7
 8005efc:	3001      	adds	r0, #1
 8005efe:	f43f ae3e 	beq.w	8005b7e <_printf_float+0xba>
 8005f02:	f108 0801 	add.w	r8, r8, #1
 8005f06:	68e3      	ldr	r3, [r4, #12]
 8005f08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	4543      	cmp	r3, r8
 8005f0e:	dcf0      	bgt.n	8005ef2 <_printf_float+0x42e>
 8005f10:	e6fc      	b.n	8005d0c <_printf_float+0x248>
 8005f12:	f04f 0800 	mov.w	r8, #0
 8005f16:	f104 0919 	add.w	r9, r4, #25
 8005f1a:	e7f4      	b.n	8005f06 <_printf_float+0x442>
 8005f1c:	2900      	cmp	r1, #0
 8005f1e:	f43f ae8b 	beq.w	8005c38 <_printf_float+0x174>
 8005f22:	2300      	movs	r3, #0
 8005f24:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005f28:	ab09      	add	r3, sp, #36	; 0x24
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	ec49 8b10 	vmov	d0, r8, r9
 8005f30:	6022      	str	r2, [r4, #0]
 8005f32:	f8cd a004 	str.w	sl, [sp, #4]
 8005f36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f7ff fd2e 	bl	800599c <__cvt>
 8005f40:	4680      	mov	r8, r0
 8005f42:	e648      	b.n	8005bd6 <_printf_float+0x112>

08005f44 <_printf_common>:
 8005f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f48:	4691      	mov	r9, r2
 8005f4a:	461f      	mov	r7, r3
 8005f4c:	688a      	ldr	r2, [r1, #8]
 8005f4e:	690b      	ldr	r3, [r1, #16]
 8005f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f54:	4293      	cmp	r3, r2
 8005f56:	bfb8      	it	lt
 8005f58:	4613      	movlt	r3, r2
 8005f5a:	f8c9 3000 	str.w	r3, [r9]
 8005f5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f62:	4606      	mov	r6, r0
 8005f64:	460c      	mov	r4, r1
 8005f66:	b112      	cbz	r2, 8005f6e <_printf_common+0x2a>
 8005f68:	3301      	adds	r3, #1
 8005f6a:	f8c9 3000 	str.w	r3, [r9]
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	0699      	lsls	r1, r3, #26
 8005f72:	bf42      	ittt	mi
 8005f74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f78:	3302      	addmi	r3, #2
 8005f7a:	f8c9 3000 	strmi.w	r3, [r9]
 8005f7e:	6825      	ldr	r5, [r4, #0]
 8005f80:	f015 0506 	ands.w	r5, r5, #6
 8005f84:	d107      	bne.n	8005f96 <_printf_common+0x52>
 8005f86:	f104 0a19 	add.w	sl, r4, #25
 8005f8a:	68e3      	ldr	r3, [r4, #12]
 8005f8c:	f8d9 2000 	ldr.w	r2, [r9]
 8005f90:	1a9b      	subs	r3, r3, r2
 8005f92:	42ab      	cmp	r3, r5
 8005f94:	dc28      	bgt.n	8005fe8 <_printf_common+0xa4>
 8005f96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f9a:	6822      	ldr	r2, [r4, #0]
 8005f9c:	3300      	adds	r3, #0
 8005f9e:	bf18      	it	ne
 8005fa0:	2301      	movne	r3, #1
 8005fa2:	0692      	lsls	r2, r2, #26
 8005fa4:	d42d      	bmi.n	8006002 <_printf_common+0xbe>
 8005fa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005faa:	4639      	mov	r1, r7
 8005fac:	4630      	mov	r0, r6
 8005fae:	47c0      	blx	r8
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d020      	beq.n	8005ff6 <_printf_common+0xb2>
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	68e5      	ldr	r5, [r4, #12]
 8005fb8:	f8d9 2000 	ldr.w	r2, [r9]
 8005fbc:	f003 0306 	and.w	r3, r3, #6
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	bf08      	it	eq
 8005fc4:	1aad      	subeq	r5, r5, r2
 8005fc6:	68a3      	ldr	r3, [r4, #8]
 8005fc8:	6922      	ldr	r2, [r4, #16]
 8005fca:	bf0c      	ite	eq
 8005fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fd0:	2500      	movne	r5, #0
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	bfc4      	itt	gt
 8005fd6:	1a9b      	subgt	r3, r3, r2
 8005fd8:	18ed      	addgt	r5, r5, r3
 8005fda:	f04f 0900 	mov.w	r9, #0
 8005fde:	341a      	adds	r4, #26
 8005fe0:	454d      	cmp	r5, r9
 8005fe2:	d11a      	bne.n	800601a <_printf_common+0xd6>
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	e008      	b.n	8005ffa <_printf_common+0xb6>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	4652      	mov	r2, sl
 8005fec:	4639      	mov	r1, r7
 8005fee:	4630      	mov	r0, r6
 8005ff0:	47c0      	blx	r8
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	d103      	bne.n	8005ffe <_printf_common+0xba>
 8005ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffe:	3501      	adds	r5, #1
 8006000:	e7c3      	b.n	8005f8a <_printf_common+0x46>
 8006002:	18e1      	adds	r1, r4, r3
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	2030      	movs	r0, #48	; 0x30
 8006008:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800600c:	4422      	add	r2, r4
 800600e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006012:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006016:	3302      	adds	r3, #2
 8006018:	e7c5      	b.n	8005fa6 <_printf_common+0x62>
 800601a:	2301      	movs	r3, #1
 800601c:	4622      	mov	r2, r4
 800601e:	4639      	mov	r1, r7
 8006020:	4630      	mov	r0, r6
 8006022:	47c0      	blx	r8
 8006024:	3001      	adds	r0, #1
 8006026:	d0e6      	beq.n	8005ff6 <_printf_common+0xb2>
 8006028:	f109 0901 	add.w	r9, r9, #1
 800602c:	e7d8      	b.n	8005fe0 <_printf_common+0x9c>
	...

08006030 <_printf_i>:
 8006030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006034:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006038:	460c      	mov	r4, r1
 800603a:	7e09      	ldrb	r1, [r1, #24]
 800603c:	b085      	sub	sp, #20
 800603e:	296e      	cmp	r1, #110	; 0x6e
 8006040:	4617      	mov	r7, r2
 8006042:	4606      	mov	r6, r0
 8006044:	4698      	mov	r8, r3
 8006046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006048:	f000 80b3 	beq.w	80061b2 <_printf_i+0x182>
 800604c:	d822      	bhi.n	8006094 <_printf_i+0x64>
 800604e:	2963      	cmp	r1, #99	; 0x63
 8006050:	d036      	beq.n	80060c0 <_printf_i+0x90>
 8006052:	d80a      	bhi.n	800606a <_printf_i+0x3a>
 8006054:	2900      	cmp	r1, #0
 8006056:	f000 80b9 	beq.w	80061cc <_printf_i+0x19c>
 800605a:	2958      	cmp	r1, #88	; 0x58
 800605c:	f000 8083 	beq.w	8006166 <_printf_i+0x136>
 8006060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006064:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006068:	e032      	b.n	80060d0 <_printf_i+0xa0>
 800606a:	2964      	cmp	r1, #100	; 0x64
 800606c:	d001      	beq.n	8006072 <_printf_i+0x42>
 800606e:	2969      	cmp	r1, #105	; 0x69
 8006070:	d1f6      	bne.n	8006060 <_printf_i+0x30>
 8006072:	6820      	ldr	r0, [r4, #0]
 8006074:	6813      	ldr	r3, [r2, #0]
 8006076:	0605      	lsls	r5, r0, #24
 8006078:	f103 0104 	add.w	r1, r3, #4
 800607c:	d52a      	bpl.n	80060d4 <_printf_i+0xa4>
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6011      	str	r1, [r2, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	da03      	bge.n	800608e <_printf_i+0x5e>
 8006086:	222d      	movs	r2, #45	; 0x2d
 8006088:	425b      	negs	r3, r3
 800608a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800608e:	486f      	ldr	r0, [pc, #444]	; (800624c <_printf_i+0x21c>)
 8006090:	220a      	movs	r2, #10
 8006092:	e039      	b.n	8006108 <_printf_i+0xd8>
 8006094:	2973      	cmp	r1, #115	; 0x73
 8006096:	f000 809d 	beq.w	80061d4 <_printf_i+0x1a4>
 800609a:	d808      	bhi.n	80060ae <_printf_i+0x7e>
 800609c:	296f      	cmp	r1, #111	; 0x6f
 800609e:	d020      	beq.n	80060e2 <_printf_i+0xb2>
 80060a0:	2970      	cmp	r1, #112	; 0x70
 80060a2:	d1dd      	bne.n	8006060 <_printf_i+0x30>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	f043 0320 	orr.w	r3, r3, #32
 80060aa:	6023      	str	r3, [r4, #0]
 80060ac:	e003      	b.n	80060b6 <_printf_i+0x86>
 80060ae:	2975      	cmp	r1, #117	; 0x75
 80060b0:	d017      	beq.n	80060e2 <_printf_i+0xb2>
 80060b2:	2978      	cmp	r1, #120	; 0x78
 80060b4:	d1d4      	bne.n	8006060 <_printf_i+0x30>
 80060b6:	2378      	movs	r3, #120	; 0x78
 80060b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060bc:	4864      	ldr	r0, [pc, #400]	; (8006250 <_printf_i+0x220>)
 80060be:	e055      	b.n	800616c <_printf_i+0x13c>
 80060c0:	6813      	ldr	r3, [r2, #0]
 80060c2:	1d19      	adds	r1, r3, #4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6011      	str	r1, [r2, #0]
 80060c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060d0:	2301      	movs	r3, #1
 80060d2:	e08c      	b.n	80061ee <_printf_i+0x1be>
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6011      	str	r1, [r2, #0]
 80060d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060dc:	bf18      	it	ne
 80060de:	b21b      	sxthne	r3, r3
 80060e0:	e7cf      	b.n	8006082 <_printf_i+0x52>
 80060e2:	6813      	ldr	r3, [r2, #0]
 80060e4:	6825      	ldr	r5, [r4, #0]
 80060e6:	1d18      	adds	r0, r3, #4
 80060e8:	6010      	str	r0, [r2, #0]
 80060ea:	0628      	lsls	r0, r5, #24
 80060ec:	d501      	bpl.n	80060f2 <_printf_i+0xc2>
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	e002      	b.n	80060f8 <_printf_i+0xc8>
 80060f2:	0668      	lsls	r0, r5, #25
 80060f4:	d5fb      	bpl.n	80060ee <_printf_i+0xbe>
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	4854      	ldr	r0, [pc, #336]	; (800624c <_printf_i+0x21c>)
 80060fa:	296f      	cmp	r1, #111	; 0x6f
 80060fc:	bf14      	ite	ne
 80060fe:	220a      	movne	r2, #10
 8006100:	2208      	moveq	r2, #8
 8006102:	2100      	movs	r1, #0
 8006104:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006108:	6865      	ldr	r5, [r4, #4]
 800610a:	60a5      	str	r5, [r4, #8]
 800610c:	2d00      	cmp	r5, #0
 800610e:	f2c0 8095 	blt.w	800623c <_printf_i+0x20c>
 8006112:	6821      	ldr	r1, [r4, #0]
 8006114:	f021 0104 	bic.w	r1, r1, #4
 8006118:	6021      	str	r1, [r4, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d13d      	bne.n	800619a <_printf_i+0x16a>
 800611e:	2d00      	cmp	r5, #0
 8006120:	f040 808e 	bne.w	8006240 <_printf_i+0x210>
 8006124:	4665      	mov	r5, ip
 8006126:	2a08      	cmp	r2, #8
 8006128:	d10b      	bne.n	8006142 <_printf_i+0x112>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	07db      	lsls	r3, r3, #31
 800612e:	d508      	bpl.n	8006142 <_printf_i+0x112>
 8006130:	6923      	ldr	r3, [r4, #16]
 8006132:	6862      	ldr	r2, [r4, #4]
 8006134:	429a      	cmp	r2, r3
 8006136:	bfde      	ittt	le
 8006138:	2330      	movle	r3, #48	; 0x30
 800613a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800613e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006142:	ebac 0305 	sub.w	r3, ip, r5
 8006146:	6123      	str	r3, [r4, #16]
 8006148:	f8cd 8000 	str.w	r8, [sp]
 800614c:	463b      	mov	r3, r7
 800614e:	aa03      	add	r2, sp, #12
 8006150:	4621      	mov	r1, r4
 8006152:	4630      	mov	r0, r6
 8006154:	f7ff fef6 	bl	8005f44 <_printf_common>
 8006158:	3001      	adds	r0, #1
 800615a:	d14d      	bne.n	80061f8 <_printf_i+0x1c8>
 800615c:	f04f 30ff 	mov.w	r0, #4294967295
 8006160:	b005      	add	sp, #20
 8006162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006166:	4839      	ldr	r0, [pc, #228]	; (800624c <_printf_i+0x21c>)
 8006168:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800616c:	6813      	ldr	r3, [r2, #0]
 800616e:	6821      	ldr	r1, [r4, #0]
 8006170:	1d1d      	adds	r5, r3, #4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6015      	str	r5, [r2, #0]
 8006176:	060a      	lsls	r2, r1, #24
 8006178:	d50b      	bpl.n	8006192 <_printf_i+0x162>
 800617a:	07ca      	lsls	r2, r1, #31
 800617c:	bf44      	itt	mi
 800617e:	f041 0120 	orrmi.w	r1, r1, #32
 8006182:	6021      	strmi	r1, [r4, #0]
 8006184:	b91b      	cbnz	r3, 800618e <_printf_i+0x15e>
 8006186:	6822      	ldr	r2, [r4, #0]
 8006188:	f022 0220 	bic.w	r2, r2, #32
 800618c:	6022      	str	r2, [r4, #0]
 800618e:	2210      	movs	r2, #16
 8006190:	e7b7      	b.n	8006102 <_printf_i+0xd2>
 8006192:	064d      	lsls	r5, r1, #25
 8006194:	bf48      	it	mi
 8006196:	b29b      	uxthmi	r3, r3
 8006198:	e7ef      	b.n	800617a <_printf_i+0x14a>
 800619a:	4665      	mov	r5, ip
 800619c:	fbb3 f1f2 	udiv	r1, r3, r2
 80061a0:	fb02 3311 	mls	r3, r2, r1, r3
 80061a4:	5cc3      	ldrb	r3, [r0, r3]
 80061a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80061aa:	460b      	mov	r3, r1
 80061ac:	2900      	cmp	r1, #0
 80061ae:	d1f5      	bne.n	800619c <_printf_i+0x16c>
 80061b0:	e7b9      	b.n	8006126 <_printf_i+0xf6>
 80061b2:	6813      	ldr	r3, [r2, #0]
 80061b4:	6825      	ldr	r5, [r4, #0]
 80061b6:	6961      	ldr	r1, [r4, #20]
 80061b8:	1d18      	adds	r0, r3, #4
 80061ba:	6010      	str	r0, [r2, #0]
 80061bc:	0628      	lsls	r0, r5, #24
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	d501      	bpl.n	80061c6 <_printf_i+0x196>
 80061c2:	6019      	str	r1, [r3, #0]
 80061c4:	e002      	b.n	80061cc <_printf_i+0x19c>
 80061c6:	066a      	lsls	r2, r5, #25
 80061c8:	d5fb      	bpl.n	80061c2 <_printf_i+0x192>
 80061ca:	8019      	strh	r1, [r3, #0]
 80061cc:	2300      	movs	r3, #0
 80061ce:	6123      	str	r3, [r4, #16]
 80061d0:	4665      	mov	r5, ip
 80061d2:	e7b9      	b.n	8006148 <_printf_i+0x118>
 80061d4:	6813      	ldr	r3, [r2, #0]
 80061d6:	1d19      	adds	r1, r3, #4
 80061d8:	6011      	str	r1, [r2, #0]
 80061da:	681d      	ldr	r5, [r3, #0]
 80061dc:	6862      	ldr	r2, [r4, #4]
 80061de:	2100      	movs	r1, #0
 80061e0:	4628      	mov	r0, r5
 80061e2:	f7f9 fffd 	bl	80001e0 <memchr>
 80061e6:	b108      	cbz	r0, 80061ec <_printf_i+0x1bc>
 80061e8:	1b40      	subs	r0, r0, r5
 80061ea:	6060      	str	r0, [r4, #4]
 80061ec:	6863      	ldr	r3, [r4, #4]
 80061ee:	6123      	str	r3, [r4, #16]
 80061f0:	2300      	movs	r3, #0
 80061f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f6:	e7a7      	b.n	8006148 <_printf_i+0x118>
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	462a      	mov	r2, r5
 80061fc:	4639      	mov	r1, r7
 80061fe:	4630      	mov	r0, r6
 8006200:	47c0      	blx	r8
 8006202:	3001      	adds	r0, #1
 8006204:	d0aa      	beq.n	800615c <_printf_i+0x12c>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	079b      	lsls	r3, r3, #30
 800620a:	d413      	bmi.n	8006234 <_printf_i+0x204>
 800620c:	68e0      	ldr	r0, [r4, #12]
 800620e:	9b03      	ldr	r3, [sp, #12]
 8006210:	4298      	cmp	r0, r3
 8006212:	bfb8      	it	lt
 8006214:	4618      	movlt	r0, r3
 8006216:	e7a3      	b.n	8006160 <_printf_i+0x130>
 8006218:	2301      	movs	r3, #1
 800621a:	464a      	mov	r2, r9
 800621c:	4639      	mov	r1, r7
 800621e:	4630      	mov	r0, r6
 8006220:	47c0      	blx	r8
 8006222:	3001      	adds	r0, #1
 8006224:	d09a      	beq.n	800615c <_printf_i+0x12c>
 8006226:	3501      	adds	r5, #1
 8006228:	68e3      	ldr	r3, [r4, #12]
 800622a:	9a03      	ldr	r2, [sp, #12]
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	42ab      	cmp	r3, r5
 8006230:	dcf2      	bgt.n	8006218 <_printf_i+0x1e8>
 8006232:	e7eb      	b.n	800620c <_printf_i+0x1dc>
 8006234:	2500      	movs	r5, #0
 8006236:	f104 0919 	add.w	r9, r4, #25
 800623a:	e7f5      	b.n	8006228 <_printf_i+0x1f8>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1ac      	bne.n	800619a <_printf_i+0x16a>
 8006240:	7803      	ldrb	r3, [r0, #0]
 8006242:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006246:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800624a:	e76c      	b.n	8006126 <_printf_i+0xf6>
 800624c:	08008f66 	.word	0x08008f66
 8006250:	08008f77 	.word	0x08008f77

08006254 <_sbrk_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	4c06      	ldr	r4, [pc, #24]	; (8006270 <_sbrk_r+0x1c>)
 8006258:	2300      	movs	r3, #0
 800625a:	4605      	mov	r5, r0
 800625c:	4608      	mov	r0, r1
 800625e:	6023      	str	r3, [r4, #0]
 8006260:	f7fb fe5e 	bl	8001f20 <_sbrk>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d102      	bne.n	800626e <_sbrk_r+0x1a>
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	b103      	cbz	r3, 800626e <_sbrk_r+0x1a>
 800626c:	602b      	str	r3, [r5, #0]
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	2000050c 	.word	0x2000050c

08006274 <siprintf>:
 8006274:	b40e      	push	{r1, r2, r3}
 8006276:	b500      	push	{lr}
 8006278:	b09c      	sub	sp, #112	; 0x70
 800627a:	ab1d      	add	r3, sp, #116	; 0x74
 800627c:	9002      	str	r0, [sp, #8]
 800627e:	9006      	str	r0, [sp, #24]
 8006280:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006284:	4809      	ldr	r0, [pc, #36]	; (80062ac <siprintf+0x38>)
 8006286:	9107      	str	r1, [sp, #28]
 8006288:	9104      	str	r1, [sp, #16]
 800628a:	4909      	ldr	r1, [pc, #36]	; (80062b0 <siprintf+0x3c>)
 800628c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006290:	9105      	str	r1, [sp, #20]
 8006292:	6800      	ldr	r0, [r0, #0]
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	a902      	add	r1, sp, #8
 8006298:	f001 fb2a 	bl	80078f0 <_svfiprintf_r>
 800629c:	9b02      	ldr	r3, [sp, #8]
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	b01c      	add	sp, #112	; 0x70
 80062a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062a8:	b003      	add	sp, #12
 80062aa:	4770      	bx	lr
 80062ac:	200000dc 	.word	0x200000dc
 80062b0:	ffff0208 	.word	0xffff0208

080062b4 <__sread>:
 80062b4:	b510      	push	{r4, lr}
 80062b6:	460c      	mov	r4, r1
 80062b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062bc:	f001 fc10 	bl	8007ae0 <_read_r>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	bfab      	itete	ge
 80062c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062c6:	89a3      	ldrhlt	r3, [r4, #12]
 80062c8:	181b      	addge	r3, r3, r0
 80062ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062ce:	bfac      	ite	ge
 80062d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80062d2:	81a3      	strhlt	r3, [r4, #12]
 80062d4:	bd10      	pop	{r4, pc}

080062d6 <__swrite>:
 80062d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062da:	461f      	mov	r7, r3
 80062dc:	898b      	ldrh	r3, [r1, #12]
 80062de:	05db      	lsls	r3, r3, #23
 80062e0:	4605      	mov	r5, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	4616      	mov	r6, r2
 80062e6:	d505      	bpl.n	80062f4 <__swrite+0x1e>
 80062e8:	2302      	movs	r3, #2
 80062ea:	2200      	movs	r2, #0
 80062ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f0:	f000 ff50 	bl	8007194 <_lseek_r>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062fe:	81a3      	strh	r3, [r4, #12]
 8006300:	4632      	mov	r2, r6
 8006302:	463b      	mov	r3, r7
 8006304:	4628      	mov	r0, r5
 8006306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800630a:	f000 b81f 	b.w	800634c <_write_r>

0800630e <__sseek>:
 800630e:	b510      	push	{r4, lr}
 8006310:	460c      	mov	r4, r1
 8006312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006316:	f000 ff3d 	bl	8007194 <_lseek_r>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	bf15      	itete	ne
 8006320:	6560      	strne	r0, [r4, #84]	; 0x54
 8006322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800632a:	81a3      	strheq	r3, [r4, #12]
 800632c:	bf18      	it	ne
 800632e:	81a3      	strhne	r3, [r4, #12]
 8006330:	bd10      	pop	{r4, pc}

08006332 <__sclose>:
 8006332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006336:	f000 b81b 	b.w	8006370 <_close_r>

0800633a <strcpy>:
 800633a:	4603      	mov	r3, r0
 800633c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006340:	f803 2b01 	strb.w	r2, [r3], #1
 8006344:	2a00      	cmp	r2, #0
 8006346:	d1f9      	bne.n	800633c <strcpy+0x2>
 8006348:	4770      	bx	lr
	...

0800634c <_write_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4c07      	ldr	r4, [pc, #28]	; (800636c <_write_r+0x20>)
 8006350:	4605      	mov	r5, r0
 8006352:	4608      	mov	r0, r1
 8006354:	4611      	mov	r1, r2
 8006356:	2200      	movs	r2, #0
 8006358:	6022      	str	r2, [r4, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	f7fe ffef 	bl	800533e <_write>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d102      	bne.n	800636a <_write_r+0x1e>
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	b103      	cbz	r3, 800636a <_write_r+0x1e>
 8006368:	602b      	str	r3, [r5, #0]
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	2000050c 	.word	0x2000050c

08006370 <_close_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4c06      	ldr	r4, [pc, #24]	; (800638c <_close_r+0x1c>)
 8006374:	2300      	movs	r3, #0
 8006376:	4605      	mov	r5, r0
 8006378:	4608      	mov	r0, r1
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	f7ff f80e 	bl	800539c <_close>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_close_r+0x1a>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	b103      	cbz	r3, 800638a <_close_r+0x1a>
 8006388:	602b      	str	r3, [r5, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	2000050c 	.word	0x2000050c

08006390 <quorem>:
 8006390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	6903      	ldr	r3, [r0, #16]
 8006396:	690c      	ldr	r4, [r1, #16]
 8006398:	42a3      	cmp	r3, r4
 800639a:	4680      	mov	r8, r0
 800639c:	f2c0 8082 	blt.w	80064a4 <quorem+0x114>
 80063a0:	3c01      	subs	r4, #1
 80063a2:	f101 0714 	add.w	r7, r1, #20
 80063a6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80063aa:	f100 0614 	add.w	r6, r0, #20
 80063ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80063b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80063b6:	eb06 030c 	add.w	r3, r6, ip
 80063ba:	3501      	adds	r5, #1
 80063bc:	eb07 090c 	add.w	r9, r7, ip
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	fbb0 f5f5 	udiv	r5, r0, r5
 80063c6:	b395      	cbz	r5, 800642e <quorem+0x9e>
 80063c8:	f04f 0a00 	mov.w	sl, #0
 80063cc:	4638      	mov	r0, r7
 80063ce:	46b6      	mov	lr, r6
 80063d0:	46d3      	mov	fp, sl
 80063d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80063d6:	b293      	uxth	r3, r2
 80063d8:	fb05 a303 	mla	r3, r5, r3, sl
 80063dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	ebab 0303 	sub.w	r3, fp, r3
 80063e6:	0c12      	lsrs	r2, r2, #16
 80063e8:	f8de b000 	ldr.w	fp, [lr]
 80063ec:	fb05 a202 	mla	r2, r5, r2, sl
 80063f0:	fa13 f38b 	uxtah	r3, r3, fp
 80063f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80063f8:	fa1f fb82 	uxth.w	fp, r2
 80063fc:	f8de 2000 	ldr.w	r2, [lr]
 8006400:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006404:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006408:	b29b      	uxth	r3, r3
 800640a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800640e:	4581      	cmp	r9, r0
 8006410:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006414:	f84e 3b04 	str.w	r3, [lr], #4
 8006418:	d2db      	bcs.n	80063d2 <quorem+0x42>
 800641a:	f856 300c 	ldr.w	r3, [r6, ip]
 800641e:	b933      	cbnz	r3, 800642e <quorem+0x9e>
 8006420:	9b01      	ldr	r3, [sp, #4]
 8006422:	3b04      	subs	r3, #4
 8006424:	429e      	cmp	r6, r3
 8006426:	461a      	mov	r2, r3
 8006428:	d330      	bcc.n	800648c <quorem+0xfc>
 800642a:	f8c8 4010 	str.w	r4, [r8, #16]
 800642e:	4640      	mov	r0, r8
 8006430:	f001 f8e2 	bl	80075f8 <__mcmp>
 8006434:	2800      	cmp	r0, #0
 8006436:	db25      	blt.n	8006484 <quorem+0xf4>
 8006438:	3501      	adds	r5, #1
 800643a:	4630      	mov	r0, r6
 800643c:	f04f 0c00 	mov.w	ip, #0
 8006440:	f857 2b04 	ldr.w	r2, [r7], #4
 8006444:	f8d0 e000 	ldr.w	lr, [r0]
 8006448:	b293      	uxth	r3, r2
 800644a:	ebac 0303 	sub.w	r3, ip, r3
 800644e:	0c12      	lsrs	r2, r2, #16
 8006450:	fa13 f38e 	uxtah	r3, r3, lr
 8006454:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006458:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800645c:	b29b      	uxth	r3, r3
 800645e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006462:	45b9      	cmp	r9, r7
 8006464:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006468:	f840 3b04 	str.w	r3, [r0], #4
 800646c:	d2e8      	bcs.n	8006440 <quorem+0xb0>
 800646e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006472:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006476:	b92a      	cbnz	r2, 8006484 <quorem+0xf4>
 8006478:	3b04      	subs	r3, #4
 800647a:	429e      	cmp	r6, r3
 800647c:	461a      	mov	r2, r3
 800647e:	d30b      	bcc.n	8006498 <quorem+0x108>
 8006480:	f8c8 4010 	str.w	r4, [r8, #16]
 8006484:	4628      	mov	r0, r5
 8006486:	b003      	add	sp, #12
 8006488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	3b04      	subs	r3, #4
 8006490:	2a00      	cmp	r2, #0
 8006492:	d1ca      	bne.n	800642a <quorem+0x9a>
 8006494:	3c01      	subs	r4, #1
 8006496:	e7c5      	b.n	8006424 <quorem+0x94>
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	3b04      	subs	r3, #4
 800649c:	2a00      	cmp	r2, #0
 800649e:	d1ef      	bne.n	8006480 <quorem+0xf0>
 80064a0:	3c01      	subs	r4, #1
 80064a2:	e7ea      	b.n	800647a <quorem+0xea>
 80064a4:	2000      	movs	r0, #0
 80064a6:	e7ee      	b.n	8006486 <quorem+0xf6>

080064a8 <_dtoa_r>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	ec57 6b10 	vmov	r6, r7, d0
 80064b0:	b097      	sub	sp, #92	; 0x5c
 80064b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064b4:	9106      	str	r1, [sp, #24]
 80064b6:	4604      	mov	r4, r0
 80064b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80064ba:	9312      	str	r3, [sp, #72]	; 0x48
 80064bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064c0:	e9cd 6700 	strd	r6, r7, [sp]
 80064c4:	b93d      	cbnz	r5, 80064d6 <_dtoa_r+0x2e>
 80064c6:	2010      	movs	r0, #16
 80064c8:	f000 fe76 	bl	80071b8 <malloc>
 80064cc:	6260      	str	r0, [r4, #36]	; 0x24
 80064ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064d2:	6005      	str	r5, [r0, #0]
 80064d4:	60c5      	str	r5, [r0, #12]
 80064d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d8:	6819      	ldr	r1, [r3, #0]
 80064da:	b151      	cbz	r1, 80064f2 <_dtoa_r+0x4a>
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	604a      	str	r2, [r1, #4]
 80064e0:	2301      	movs	r3, #1
 80064e2:	4093      	lsls	r3, r2
 80064e4:	608b      	str	r3, [r1, #8]
 80064e6:	4620      	mov	r0, r4
 80064e8:	f000 fea4 	bl	8007234 <_Bfree>
 80064ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	1e3b      	subs	r3, r7, #0
 80064f4:	bfbb      	ittet	lt
 80064f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064fa:	9301      	strlt	r3, [sp, #4]
 80064fc:	2300      	movge	r3, #0
 80064fe:	2201      	movlt	r2, #1
 8006500:	bfac      	ite	ge
 8006502:	f8c8 3000 	strge.w	r3, [r8]
 8006506:	f8c8 2000 	strlt.w	r2, [r8]
 800650a:	4baf      	ldr	r3, [pc, #700]	; (80067c8 <_dtoa_r+0x320>)
 800650c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006510:	ea33 0308 	bics.w	r3, r3, r8
 8006514:	d114      	bne.n	8006540 <_dtoa_r+0x98>
 8006516:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006518:	f242 730f 	movw	r3, #9999	; 0x270f
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	9b00      	ldr	r3, [sp, #0]
 8006520:	b923      	cbnz	r3, 800652c <_dtoa_r+0x84>
 8006522:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006526:	2800      	cmp	r0, #0
 8006528:	f000 8542 	beq.w	8006fb0 <_dtoa_r+0xb08>
 800652c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800652e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80067dc <_dtoa_r+0x334>
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 8544 	beq.w	8006fc0 <_dtoa_r+0xb18>
 8006538:	f10b 0303 	add.w	r3, fp, #3
 800653c:	f000 bd3e 	b.w	8006fbc <_dtoa_r+0xb14>
 8006540:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006544:	2200      	movs	r2, #0
 8006546:	2300      	movs	r3, #0
 8006548:	4630      	mov	r0, r6
 800654a:	4639      	mov	r1, r7
 800654c:	f7fa fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006550:	4681      	mov	r9, r0
 8006552:	b168      	cbz	r0, 8006570 <_dtoa_r+0xc8>
 8006554:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006556:	2301      	movs	r3, #1
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8524 	beq.w	8006faa <_dtoa_r+0xb02>
 8006562:	4b9a      	ldr	r3, [pc, #616]	; (80067cc <_dtoa_r+0x324>)
 8006564:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006566:	f103 3bff 	add.w	fp, r3, #4294967295
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	f000 bd28 	b.w	8006fc0 <_dtoa_r+0xb18>
 8006570:	aa14      	add	r2, sp, #80	; 0x50
 8006572:	a915      	add	r1, sp, #84	; 0x54
 8006574:	ec47 6b10 	vmov	d0, r6, r7
 8006578:	4620      	mov	r0, r4
 800657a:	f001 f8b4 	bl	80076e6 <__d2b>
 800657e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006582:	9004      	str	r0, [sp, #16]
 8006584:	2d00      	cmp	r5, #0
 8006586:	d07c      	beq.n	8006682 <_dtoa_r+0x1da>
 8006588:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800658c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006590:	46b2      	mov	sl, r6
 8006592:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006596:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800659a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800659e:	2200      	movs	r2, #0
 80065a0:	4b8b      	ldr	r3, [pc, #556]	; (80067d0 <_dtoa_r+0x328>)
 80065a2:	4650      	mov	r0, sl
 80065a4:	4659      	mov	r1, fp
 80065a6:	f7f9 fe6f 	bl	8000288 <__aeabi_dsub>
 80065aa:	a381      	add	r3, pc, #516	; (adr r3, 80067b0 <_dtoa_r+0x308>)
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f7fa f822 	bl	80005f8 <__aeabi_dmul>
 80065b4:	a380      	add	r3, pc, #512	; (adr r3, 80067b8 <_dtoa_r+0x310>)
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f7f9 fe67 	bl	800028c <__adddf3>
 80065be:	4606      	mov	r6, r0
 80065c0:	4628      	mov	r0, r5
 80065c2:	460f      	mov	r7, r1
 80065c4:	f7f9 ffae 	bl	8000524 <__aeabi_i2d>
 80065c8:	a37d      	add	r3, pc, #500	; (adr r3, 80067c0 <_dtoa_r+0x318>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f7fa f813 	bl	80005f8 <__aeabi_dmul>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4630      	mov	r0, r6
 80065d8:	4639      	mov	r1, r7
 80065da:	f7f9 fe57 	bl	800028c <__adddf3>
 80065de:	4606      	mov	r6, r0
 80065e0:	460f      	mov	r7, r1
 80065e2:	f7fa fab9 	bl	8000b58 <__aeabi_d2iz>
 80065e6:	2200      	movs	r2, #0
 80065e8:	4682      	mov	sl, r0
 80065ea:	2300      	movs	r3, #0
 80065ec:	4630      	mov	r0, r6
 80065ee:	4639      	mov	r1, r7
 80065f0:	f7fa fa74 	bl	8000adc <__aeabi_dcmplt>
 80065f4:	b148      	cbz	r0, 800660a <_dtoa_r+0x162>
 80065f6:	4650      	mov	r0, sl
 80065f8:	f7f9 ff94 	bl	8000524 <__aeabi_i2d>
 80065fc:	4632      	mov	r2, r6
 80065fe:	463b      	mov	r3, r7
 8006600:	f7fa fa62 	bl	8000ac8 <__aeabi_dcmpeq>
 8006604:	b908      	cbnz	r0, 800660a <_dtoa_r+0x162>
 8006606:	f10a 3aff 	add.w	sl, sl, #4294967295
 800660a:	f1ba 0f16 	cmp.w	sl, #22
 800660e:	d859      	bhi.n	80066c4 <_dtoa_r+0x21c>
 8006610:	4970      	ldr	r1, [pc, #448]	; (80067d4 <_dtoa_r+0x32c>)
 8006612:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800661a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800661e:	f7fa fa7b 	bl	8000b18 <__aeabi_dcmpgt>
 8006622:	2800      	cmp	r0, #0
 8006624:	d050      	beq.n	80066c8 <_dtoa_r+0x220>
 8006626:	f10a 3aff 	add.w	sl, sl, #4294967295
 800662a:	2300      	movs	r3, #0
 800662c:	930f      	str	r3, [sp, #60]	; 0x3c
 800662e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006630:	1b5d      	subs	r5, r3, r5
 8006632:	f1b5 0801 	subs.w	r8, r5, #1
 8006636:	bf49      	itett	mi
 8006638:	f1c5 0301 	rsbmi	r3, r5, #1
 800663c:	2300      	movpl	r3, #0
 800663e:	9305      	strmi	r3, [sp, #20]
 8006640:	f04f 0800 	movmi.w	r8, #0
 8006644:	bf58      	it	pl
 8006646:	9305      	strpl	r3, [sp, #20]
 8006648:	f1ba 0f00 	cmp.w	sl, #0
 800664c:	db3e      	blt.n	80066cc <_dtoa_r+0x224>
 800664e:	2300      	movs	r3, #0
 8006650:	44d0      	add	r8, sl
 8006652:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006656:	9307      	str	r3, [sp, #28]
 8006658:	9b06      	ldr	r3, [sp, #24]
 800665a:	2b09      	cmp	r3, #9
 800665c:	f200 8090 	bhi.w	8006780 <_dtoa_r+0x2d8>
 8006660:	2b05      	cmp	r3, #5
 8006662:	bfc4      	itt	gt
 8006664:	3b04      	subgt	r3, #4
 8006666:	9306      	strgt	r3, [sp, #24]
 8006668:	9b06      	ldr	r3, [sp, #24]
 800666a:	f1a3 0302 	sub.w	r3, r3, #2
 800666e:	bfcc      	ite	gt
 8006670:	2500      	movgt	r5, #0
 8006672:	2501      	movle	r5, #1
 8006674:	2b03      	cmp	r3, #3
 8006676:	f200 808f 	bhi.w	8006798 <_dtoa_r+0x2f0>
 800667a:	e8df f003 	tbb	[pc, r3]
 800667e:	7f7d      	.short	0x7f7d
 8006680:	7131      	.short	0x7131
 8006682:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006686:	441d      	add	r5, r3
 8006688:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800668c:	2820      	cmp	r0, #32
 800668e:	dd13      	ble.n	80066b8 <_dtoa_r+0x210>
 8006690:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006694:	9b00      	ldr	r3, [sp, #0]
 8006696:	fa08 f800 	lsl.w	r8, r8, r0
 800669a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800669e:	fa23 f000 	lsr.w	r0, r3, r0
 80066a2:	ea48 0000 	orr.w	r0, r8, r0
 80066a6:	f7f9 ff2d 	bl	8000504 <__aeabi_ui2d>
 80066aa:	2301      	movs	r3, #1
 80066ac:	4682      	mov	sl, r0
 80066ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80066b2:	3d01      	subs	r5, #1
 80066b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80066b6:	e772      	b.n	800659e <_dtoa_r+0xf6>
 80066b8:	9b00      	ldr	r3, [sp, #0]
 80066ba:	f1c0 0020 	rsb	r0, r0, #32
 80066be:	fa03 f000 	lsl.w	r0, r3, r0
 80066c2:	e7f0      	b.n	80066a6 <_dtoa_r+0x1fe>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e7b1      	b.n	800662c <_dtoa_r+0x184>
 80066c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80066ca:	e7b0      	b.n	800662e <_dtoa_r+0x186>
 80066cc:	9b05      	ldr	r3, [sp, #20]
 80066ce:	eba3 030a 	sub.w	r3, r3, sl
 80066d2:	9305      	str	r3, [sp, #20]
 80066d4:	f1ca 0300 	rsb	r3, sl, #0
 80066d8:	9307      	str	r3, [sp, #28]
 80066da:	2300      	movs	r3, #0
 80066dc:	930e      	str	r3, [sp, #56]	; 0x38
 80066de:	e7bb      	b.n	8006658 <_dtoa_r+0x1b0>
 80066e0:	2301      	movs	r3, #1
 80066e2:	930a      	str	r3, [sp, #40]	; 0x28
 80066e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	dd59      	ble.n	800679e <_dtoa_r+0x2f6>
 80066ea:	9302      	str	r3, [sp, #8]
 80066ec:	4699      	mov	r9, r3
 80066ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066f0:	2200      	movs	r2, #0
 80066f2:	6072      	str	r2, [r6, #4]
 80066f4:	2204      	movs	r2, #4
 80066f6:	f102 0014 	add.w	r0, r2, #20
 80066fa:	4298      	cmp	r0, r3
 80066fc:	6871      	ldr	r1, [r6, #4]
 80066fe:	d953      	bls.n	80067a8 <_dtoa_r+0x300>
 8006700:	4620      	mov	r0, r4
 8006702:	f000 fd63 	bl	80071cc <_Balloc>
 8006706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006708:	6030      	str	r0, [r6, #0]
 800670a:	f1b9 0f0e 	cmp.w	r9, #14
 800670e:	f8d3 b000 	ldr.w	fp, [r3]
 8006712:	f200 80e6 	bhi.w	80068e2 <_dtoa_r+0x43a>
 8006716:	2d00      	cmp	r5, #0
 8006718:	f000 80e3 	beq.w	80068e2 <_dtoa_r+0x43a>
 800671c:	ed9d 7b00 	vldr	d7, [sp]
 8006720:	f1ba 0f00 	cmp.w	sl, #0
 8006724:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006728:	dd74      	ble.n	8006814 <_dtoa_r+0x36c>
 800672a:	4a2a      	ldr	r2, [pc, #168]	; (80067d4 <_dtoa_r+0x32c>)
 800672c:	f00a 030f 	and.w	r3, sl, #15
 8006730:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006734:	ed93 7b00 	vldr	d7, [r3]
 8006738:	ea4f 162a 	mov.w	r6, sl, asr #4
 800673c:	06f0      	lsls	r0, r6, #27
 800673e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006742:	d565      	bpl.n	8006810 <_dtoa_r+0x368>
 8006744:	4b24      	ldr	r3, [pc, #144]	; (80067d8 <_dtoa_r+0x330>)
 8006746:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800674a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800674e:	f7fa f87d 	bl	800084c <__aeabi_ddiv>
 8006752:	e9cd 0100 	strd	r0, r1, [sp]
 8006756:	f006 060f 	and.w	r6, r6, #15
 800675a:	2503      	movs	r5, #3
 800675c:	4f1e      	ldr	r7, [pc, #120]	; (80067d8 <_dtoa_r+0x330>)
 800675e:	e04c      	b.n	80067fa <_dtoa_r+0x352>
 8006760:	2301      	movs	r3, #1
 8006762:	930a      	str	r3, [sp, #40]	; 0x28
 8006764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006766:	4453      	add	r3, sl
 8006768:	f103 0901 	add.w	r9, r3, #1
 800676c:	9302      	str	r3, [sp, #8]
 800676e:	464b      	mov	r3, r9
 8006770:	2b01      	cmp	r3, #1
 8006772:	bfb8      	it	lt
 8006774:	2301      	movlt	r3, #1
 8006776:	e7ba      	b.n	80066ee <_dtoa_r+0x246>
 8006778:	2300      	movs	r3, #0
 800677a:	e7b2      	b.n	80066e2 <_dtoa_r+0x23a>
 800677c:	2300      	movs	r3, #0
 800677e:	e7f0      	b.n	8006762 <_dtoa_r+0x2ba>
 8006780:	2501      	movs	r5, #1
 8006782:	2300      	movs	r3, #0
 8006784:	9306      	str	r3, [sp, #24]
 8006786:	950a      	str	r5, [sp, #40]	; 0x28
 8006788:	f04f 33ff 	mov.w	r3, #4294967295
 800678c:	9302      	str	r3, [sp, #8]
 800678e:	4699      	mov	r9, r3
 8006790:	2200      	movs	r2, #0
 8006792:	2312      	movs	r3, #18
 8006794:	920b      	str	r2, [sp, #44]	; 0x2c
 8006796:	e7aa      	b.n	80066ee <_dtoa_r+0x246>
 8006798:	2301      	movs	r3, #1
 800679a:	930a      	str	r3, [sp, #40]	; 0x28
 800679c:	e7f4      	b.n	8006788 <_dtoa_r+0x2e0>
 800679e:	2301      	movs	r3, #1
 80067a0:	9302      	str	r3, [sp, #8]
 80067a2:	4699      	mov	r9, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	e7f5      	b.n	8006794 <_dtoa_r+0x2ec>
 80067a8:	3101      	adds	r1, #1
 80067aa:	6071      	str	r1, [r6, #4]
 80067ac:	0052      	lsls	r2, r2, #1
 80067ae:	e7a2      	b.n	80066f6 <_dtoa_r+0x24e>
 80067b0:	636f4361 	.word	0x636f4361
 80067b4:	3fd287a7 	.word	0x3fd287a7
 80067b8:	8b60c8b3 	.word	0x8b60c8b3
 80067bc:	3fc68a28 	.word	0x3fc68a28
 80067c0:	509f79fb 	.word	0x509f79fb
 80067c4:	3fd34413 	.word	0x3fd34413
 80067c8:	7ff00000 	.word	0x7ff00000
 80067cc:	08008f65 	.word	0x08008f65
 80067d0:	3ff80000 	.word	0x3ff80000
 80067d4:	08008fc0 	.word	0x08008fc0
 80067d8:	08008f98 	.word	0x08008f98
 80067dc:	08008f91 	.word	0x08008f91
 80067e0:	07f1      	lsls	r1, r6, #31
 80067e2:	d508      	bpl.n	80067f6 <_dtoa_r+0x34e>
 80067e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ec:	f7f9 ff04 	bl	80005f8 <__aeabi_dmul>
 80067f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067f4:	3501      	adds	r5, #1
 80067f6:	1076      	asrs	r6, r6, #1
 80067f8:	3708      	adds	r7, #8
 80067fa:	2e00      	cmp	r6, #0
 80067fc:	d1f0      	bne.n	80067e0 <_dtoa_r+0x338>
 80067fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006802:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006806:	f7fa f821 	bl	800084c <__aeabi_ddiv>
 800680a:	e9cd 0100 	strd	r0, r1, [sp]
 800680e:	e01a      	b.n	8006846 <_dtoa_r+0x39e>
 8006810:	2502      	movs	r5, #2
 8006812:	e7a3      	b.n	800675c <_dtoa_r+0x2b4>
 8006814:	f000 80a0 	beq.w	8006958 <_dtoa_r+0x4b0>
 8006818:	f1ca 0600 	rsb	r6, sl, #0
 800681c:	4b9f      	ldr	r3, [pc, #636]	; (8006a9c <_dtoa_r+0x5f4>)
 800681e:	4fa0      	ldr	r7, [pc, #640]	; (8006aa0 <_dtoa_r+0x5f8>)
 8006820:	f006 020f 	and.w	r2, r6, #15
 8006824:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006830:	f7f9 fee2 	bl	80005f8 <__aeabi_dmul>
 8006834:	e9cd 0100 	strd	r0, r1, [sp]
 8006838:	1136      	asrs	r6, r6, #4
 800683a:	2300      	movs	r3, #0
 800683c:	2502      	movs	r5, #2
 800683e:	2e00      	cmp	r6, #0
 8006840:	d17f      	bne.n	8006942 <_dtoa_r+0x49a>
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e1      	bne.n	800680a <_dtoa_r+0x362>
 8006846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 8087 	beq.w	800695c <_dtoa_r+0x4b4>
 800684e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006852:	2200      	movs	r2, #0
 8006854:	4b93      	ldr	r3, [pc, #588]	; (8006aa4 <_dtoa_r+0x5fc>)
 8006856:	4630      	mov	r0, r6
 8006858:	4639      	mov	r1, r7
 800685a:	f7fa f93f 	bl	8000adc <__aeabi_dcmplt>
 800685e:	2800      	cmp	r0, #0
 8006860:	d07c      	beq.n	800695c <_dtoa_r+0x4b4>
 8006862:	f1b9 0f00 	cmp.w	r9, #0
 8006866:	d079      	beq.n	800695c <_dtoa_r+0x4b4>
 8006868:	9b02      	ldr	r3, [sp, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	dd35      	ble.n	80068da <_dtoa_r+0x432>
 800686e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006872:	9308      	str	r3, [sp, #32]
 8006874:	4639      	mov	r1, r7
 8006876:	2200      	movs	r2, #0
 8006878:	4b8b      	ldr	r3, [pc, #556]	; (8006aa8 <_dtoa_r+0x600>)
 800687a:	4630      	mov	r0, r6
 800687c:	f7f9 febc 	bl	80005f8 <__aeabi_dmul>
 8006880:	e9cd 0100 	strd	r0, r1, [sp]
 8006884:	9f02      	ldr	r7, [sp, #8]
 8006886:	3501      	adds	r5, #1
 8006888:	4628      	mov	r0, r5
 800688a:	f7f9 fe4b 	bl	8000524 <__aeabi_i2d>
 800688e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006892:	f7f9 feb1 	bl	80005f8 <__aeabi_dmul>
 8006896:	2200      	movs	r2, #0
 8006898:	4b84      	ldr	r3, [pc, #528]	; (8006aac <_dtoa_r+0x604>)
 800689a:	f7f9 fcf7 	bl	800028c <__adddf3>
 800689e:	4605      	mov	r5, r0
 80068a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80068a4:	2f00      	cmp	r7, #0
 80068a6:	d15d      	bne.n	8006964 <_dtoa_r+0x4bc>
 80068a8:	2200      	movs	r2, #0
 80068aa:	4b81      	ldr	r3, [pc, #516]	; (8006ab0 <_dtoa_r+0x608>)
 80068ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068b0:	f7f9 fcea 	bl	8000288 <__aeabi_dsub>
 80068b4:	462a      	mov	r2, r5
 80068b6:	4633      	mov	r3, r6
 80068b8:	e9cd 0100 	strd	r0, r1, [sp]
 80068bc:	f7fa f92c 	bl	8000b18 <__aeabi_dcmpgt>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	f040 8288 	bne.w	8006dd6 <_dtoa_r+0x92e>
 80068c6:	462a      	mov	r2, r5
 80068c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80068cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068d0:	f7fa f904 	bl	8000adc <__aeabi_dcmplt>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	f040 827c 	bne.w	8006dd2 <_dtoa_r+0x92a>
 80068da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068de:	e9cd 2300 	strd	r2, r3, [sp]
 80068e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f2c0 8150 	blt.w	8006b8a <_dtoa_r+0x6e2>
 80068ea:	f1ba 0f0e 	cmp.w	sl, #14
 80068ee:	f300 814c 	bgt.w	8006b8a <_dtoa_r+0x6e2>
 80068f2:	4b6a      	ldr	r3, [pc, #424]	; (8006a9c <_dtoa_r+0x5f4>)
 80068f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068f8:	ed93 7b00 	vldr	d7, [r3]
 80068fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006904:	f280 80d8 	bge.w	8006ab8 <_dtoa_r+0x610>
 8006908:	f1b9 0f00 	cmp.w	r9, #0
 800690c:	f300 80d4 	bgt.w	8006ab8 <_dtoa_r+0x610>
 8006910:	f040 825e 	bne.w	8006dd0 <_dtoa_r+0x928>
 8006914:	2200      	movs	r2, #0
 8006916:	4b66      	ldr	r3, [pc, #408]	; (8006ab0 <_dtoa_r+0x608>)
 8006918:	ec51 0b17 	vmov	r0, r1, d7
 800691c:	f7f9 fe6c 	bl	80005f8 <__aeabi_dmul>
 8006920:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006924:	f7fa f8ee 	bl	8000b04 <__aeabi_dcmpge>
 8006928:	464f      	mov	r7, r9
 800692a:	464e      	mov	r6, r9
 800692c:	2800      	cmp	r0, #0
 800692e:	f040 8234 	bne.w	8006d9a <_dtoa_r+0x8f2>
 8006932:	2331      	movs	r3, #49	; 0x31
 8006934:	f10b 0501 	add.w	r5, fp, #1
 8006938:	f88b 3000 	strb.w	r3, [fp]
 800693c:	f10a 0a01 	add.w	sl, sl, #1
 8006940:	e22f      	b.n	8006da2 <_dtoa_r+0x8fa>
 8006942:	07f2      	lsls	r2, r6, #31
 8006944:	d505      	bpl.n	8006952 <_dtoa_r+0x4aa>
 8006946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800694a:	f7f9 fe55 	bl	80005f8 <__aeabi_dmul>
 800694e:	3501      	adds	r5, #1
 8006950:	2301      	movs	r3, #1
 8006952:	1076      	asrs	r6, r6, #1
 8006954:	3708      	adds	r7, #8
 8006956:	e772      	b.n	800683e <_dtoa_r+0x396>
 8006958:	2502      	movs	r5, #2
 800695a:	e774      	b.n	8006846 <_dtoa_r+0x39e>
 800695c:	f8cd a020 	str.w	sl, [sp, #32]
 8006960:	464f      	mov	r7, r9
 8006962:	e791      	b.n	8006888 <_dtoa_r+0x3e0>
 8006964:	4b4d      	ldr	r3, [pc, #308]	; (8006a9c <_dtoa_r+0x5f4>)
 8006966:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800696a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800696e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006970:	2b00      	cmp	r3, #0
 8006972:	d047      	beq.n	8006a04 <_dtoa_r+0x55c>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	2000      	movs	r0, #0
 800697a:	494e      	ldr	r1, [pc, #312]	; (8006ab4 <_dtoa_r+0x60c>)
 800697c:	f7f9 ff66 	bl	800084c <__aeabi_ddiv>
 8006980:	462a      	mov	r2, r5
 8006982:	4633      	mov	r3, r6
 8006984:	f7f9 fc80 	bl	8000288 <__aeabi_dsub>
 8006988:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800698c:	465d      	mov	r5, fp
 800698e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006992:	f7fa f8e1 	bl	8000b58 <__aeabi_d2iz>
 8006996:	4606      	mov	r6, r0
 8006998:	f7f9 fdc4 	bl	8000524 <__aeabi_i2d>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069a4:	f7f9 fc70 	bl	8000288 <__aeabi_dsub>
 80069a8:	3630      	adds	r6, #48	; 0x30
 80069aa:	f805 6b01 	strb.w	r6, [r5], #1
 80069ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80069b2:	e9cd 0100 	strd	r0, r1, [sp]
 80069b6:	f7fa f891 	bl	8000adc <__aeabi_dcmplt>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d163      	bne.n	8006a86 <_dtoa_r+0x5de>
 80069be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069c2:	2000      	movs	r0, #0
 80069c4:	4937      	ldr	r1, [pc, #220]	; (8006aa4 <_dtoa_r+0x5fc>)
 80069c6:	f7f9 fc5f 	bl	8000288 <__aeabi_dsub>
 80069ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80069ce:	f7fa f885 	bl	8000adc <__aeabi_dcmplt>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	f040 80b7 	bne.w	8006b46 <_dtoa_r+0x69e>
 80069d8:	eba5 030b 	sub.w	r3, r5, fp
 80069dc:	429f      	cmp	r7, r3
 80069de:	f77f af7c 	ble.w	80068da <_dtoa_r+0x432>
 80069e2:	2200      	movs	r2, #0
 80069e4:	4b30      	ldr	r3, [pc, #192]	; (8006aa8 <_dtoa_r+0x600>)
 80069e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069ea:	f7f9 fe05 	bl	80005f8 <__aeabi_dmul>
 80069ee:	2200      	movs	r2, #0
 80069f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80069f4:	4b2c      	ldr	r3, [pc, #176]	; (8006aa8 <_dtoa_r+0x600>)
 80069f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069fa:	f7f9 fdfd 	bl	80005f8 <__aeabi_dmul>
 80069fe:	e9cd 0100 	strd	r0, r1, [sp]
 8006a02:	e7c4      	b.n	800698e <_dtoa_r+0x4e6>
 8006a04:	462a      	mov	r2, r5
 8006a06:	4633      	mov	r3, r6
 8006a08:	f7f9 fdf6 	bl	80005f8 <__aeabi_dmul>
 8006a0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006a10:	eb0b 0507 	add.w	r5, fp, r7
 8006a14:	465e      	mov	r6, fp
 8006a16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a1a:	f7fa f89d 	bl	8000b58 <__aeabi_d2iz>
 8006a1e:	4607      	mov	r7, r0
 8006a20:	f7f9 fd80 	bl	8000524 <__aeabi_i2d>
 8006a24:	3730      	adds	r7, #48	; 0x30
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a2e:	f7f9 fc2b 	bl	8000288 <__aeabi_dsub>
 8006a32:	f806 7b01 	strb.w	r7, [r6], #1
 8006a36:	42ae      	cmp	r6, r5
 8006a38:	e9cd 0100 	strd	r0, r1, [sp]
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	d126      	bne.n	8006a90 <_dtoa_r+0x5e8>
 8006a42:	4b1c      	ldr	r3, [pc, #112]	; (8006ab4 <_dtoa_r+0x60c>)
 8006a44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a48:	f7f9 fc20 	bl	800028c <__adddf3>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a54:	f7fa f860 	bl	8000b18 <__aeabi_dcmpgt>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d174      	bne.n	8006b46 <_dtoa_r+0x69e>
 8006a5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006a60:	2000      	movs	r0, #0
 8006a62:	4914      	ldr	r1, [pc, #80]	; (8006ab4 <_dtoa_r+0x60c>)
 8006a64:	f7f9 fc10 	bl	8000288 <__aeabi_dsub>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a70:	f7fa f834 	bl	8000adc <__aeabi_dcmplt>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	f43f af30 	beq.w	80068da <_dtoa_r+0x432>
 8006a7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a7e:	2b30      	cmp	r3, #48	; 0x30
 8006a80:	f105 32ff 	add.w	r2, r5, #4294967295
 8006a84:	d002      	beq.n	8006a8c <_dtoa_r+0x5e4>
 8006a86:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006a8a:	e04a      	b.n	8006b22 <_dtoa_r+0x67a>
 8006a8c:	4615      	mov	r5, r2
 8006a8e:	e7f4      	b.n	8006a7a <_dtoa_r+0x5d2>
 8006a90:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <_dtoa_r+0x600>)
 8006a92:	f7f9 fdb1 	bl	80005f8 <__aeabi_dmul>
 8006a96:	e9cd 0100 	strd	r0, r1, [sp]
 8006a9a:	e7bc      	b.n	8006a16 <_dtoa_r+0x56e>
 8006a9c:	08008fc0 	.word	0x08008fc0
 8006aa0:	08008f98 	.word	0x08008f98
 8006aa4:	3ff00000 	.word	0x3ff00000
 8006aa8:	40240000 	.word	0x40240000
 8006aac:	401c0000 	.word	0x401c0000
 8006ab0:	40140000 	.word	0x40140000
 8006ab4:	3fe00000 	.word	0x3fe00000
 8006ab8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006abc:	465d      	mov	r5, fp
 8006abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	f7f9 fec1 	bl	800084c <__aeabi_ddiv>
 8006aca:	f7fa f845 	bl	8000b58 <__aeabi_d2iz>
 8006ace:	4680      	mov	r8, r0
 8006ad0:	f7f9 fd28 	bl	8000524 <__aeabi_i2d>
 8006ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ad8:	f7f9 fd8e 	bl	80005f8 <__aeabi_dmul>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006ae8:	f7f9 fbce 	bl	8000288 <__aeabi_dsub>
 8006aec:	f805 6b01 	strb.w	r6, [r5], #1
 8006af0:	eba5 060b 	sub.w	r6, r5, fp
 8006af4:	45b1      	cmp	r9, r6
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	d139      	bne.n	8006b70 <_dtoa_r+0x6c8>
 8006afc:	f7f9 fbc6 	bl	800028c <__adddf3>
 8006b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b04:	4606      	mov	r6, r0
 8006b06:	460f      	mov	r7, r1
 8006b08:	f7fa f806 	bl	8000b18 <__aeabi_dcmpgt>
 8006b0c:	b9c8      	cbnz	r0, 8006b42 <_dtoa_r+0x69a>
 8006b0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b12:	4630      	mov	r0, r6
 8006b14:	4639      	mov	r1, r7
 8006b16:	f7f9 ffd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b1a:	b110      	cbz	r0, 8006b22 <_dtoa_r+0x67a>
 8006b1c:	f018 0f01 	tst.w	r8, #1
 8006b20:	d10f      	bne.n	8006b42 <_dtoa_r+0x69a>
 8006b22:	9904      	ldr	r1, [sp, #16]
 8006b24:	4620      	mov	r0, r4
 8006b26:	f000 fb85 	bl	8007234 <_Bfree>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b2e:	702b      	strb	r3, [r5, #0]
 8006b30:	f10a 0301 	add.w	r3, sl, #1
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 8241 	beq.w	8006fc0 <_dtoa_r+0xb18>
 8006b3e:	601d      	str	r5, [r3, #0]
 8006b40:	e23e      	b.n	8006fc0 <_dtoa_r+0xb18>
 8006b42:	f8cd a020 	str.w	sl, [sp, #32]
 8006b46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b4a:	2a39      	cmp	r2, #57	; 0x39
 8006b4c:	f105 33ff 	add.w	r3, r5, #4294967295
 8006b50:	d108      	bne.n	8006b64 <_dtoa_r+0x6bc>
 8006b52:	459b      	cmp	fp, r3
 8006b54:	d10a      	bne.n	8006b6c <_dtoa_r+0x6c4>
 8006b56:	9b08      	ldr	r3, [sp, #32]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	9308      	str	r3, [sp, #32]
 8006b5c:	2330      	movs	r3, #48	; 0x30
 8006b5e:	f88b 3000 	strb.w	r3, [fp]
 8006b62:	465b      	mov	r3, fp
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	3201      	adds	r2, #1
 8006b68:	701a      	strb	r2, [r3, #0]
 8006b6a:	e78c      	b.n	8006a86 <_dtoa_r+0x5de>
 8006b6c:	461d      	mov	r5, r3
 8006b6e:	e7ea      	b.n	8006b46 <_dtoa_r+0x69e>
 8006b70:	2200      	movs	r2, #0
 8006b72:	4b9b      	ldr	r3, [pc, #620]	; (8006de0 <_dtoa_r+0x938>)
 8006b74:	f7f9 fd40 	bl	80005f8 <__aeabi_dmul>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	460f      	mov	r7, r1
 8006b80:	f7f9 ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d09a      	beq.n	8006abe <_dtoa_r+0x616>
 8006b88:	e7cb      	b.n	8006b22 <_dtoa_r+0x67a>
 8006b8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b8c:	2a00      	cmp	r2, #0
 8006b8e:	f000 808b 	beq.w	8006ca8 <_dtoa_r+0x800>
 8006b92:	9a06      	ldr	r2, [sp, #24]
 8006b94:	2a01      	cmp	r2, #1
 8006b96:	dc6e      	bgt.n	8006c76 <_dtoa_r+0x7ce>
 8006b98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	d067      	beq.n	8006c6e <_dtoa_r+0x7c6>
 8006b9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ba2:	9f07      	ldr	r7, [sp, #28]
 8006ba4:	9d05      	ldr	r5, [sp, #20]
 8006ba6:	9a05      	ldr	r2, [sp, #20]
 8006ba8:	2101      	movs	r1, #1
 8006baa:	441a      	add	r2, r3
 8006bac:	4620      	mov	r0, r4
 8006bae:	9205      	str	r2, [sp, #20]
 8006bb0:	4498      	add	r8, r3
 8006bb2:	f000 fbdf 	bl	8007374 <__i2b>
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	2d00      	cmp	r5, #0
 8006bba:	dd0c      	ble.n	8006bd6 <_dtoa_r+0x72e>
 8006bbc:	f1b8 0f00 	cmp.w	r8, #0
 8006bc0:	dd09      	ble.n	8006bd6 <_dtoa_r+0x72e>
 8006bc2:	4545      	cmp	r5, r8
 8006bc4:	9a05      	ldr	r2, [sp, #20]
 8006bc6:	462b      	mov	r3, r5
 8006bc8:	bfa8      	it	ge
 8006bca:	4643      	movge	r3, r8
 8006bcc:	1ad2      	subs	r2, r2, r3
 8006bce:	9205      	str	r2, [sp, #20]
 8006bd0:	1aed      	subs	r5, r5, r3
 8006bd2:	eba8 0803 	sub.w	r8, r8, r3
 8006bd6:	9b07      	ldr	r3, [sp, #28]
 8006bd8:	b1eb      	cbz	r3, 8006c16 <_dtoa_r+0x76e>
 8006bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d067      	beq.n	8006cb0 <_dtoa_r+0x808>
 8006be0:	b18f      	cbz	r7, 8006c06 <_dtoa_r+0x75e>
 8006be2:	4631      	mov	r1, r6
 8006be4:	463a      	mov	r2, r7
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 fc64 	bl	80074b4 <__pow5mult>
 8006bec:	9a04      	ldr	r2, [sp, #16]
 8006bee:	4601      	mov	r1, r0
 8006bf0:	4606      	mov	r6, r0
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f000 fbc7 	bl	8007386 <__multiply>
 8006bf8:	9904      	ldr	r1, [sp, #16]
 8006bfa:	9008      	str	r0, [sp, #32]
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 fb19 	bl	8007234 <_Bfree>
 8006c02:	9b08      	ldr	r3, [sp, #32]
 8006c04:	9304      	str	r3, [sp, #16]
 8006c06:	9b07      	ldr	r3, [sp, #28]
 8006c08:	1bda      	subs	r2, r3, r7
 8006c0a:	d004      	beq.n	8006c16 <_dtoa_r+0x76e>
 8006c0c:	9904      	ldr	r1, [sp, #16]
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f000 fc50 	bl	80074b4 <__pow5mult>
 8006c14:	9004      	str	r0, [sp, #16]
 8006c16:	2101      	movs	r1, #1
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 fbab 	bl	8007374 <__i2b>
 8006c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c20:	4607      	mov	r7, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 81d0 	beq.w	8006fc8 <_dtoa_r+0xb20>
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4601      	mov	r1, r0
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f000 fc41 	bl	80074b4 <__pow5mult>
 8006c32:	9b06      	ldr	r3, [sp, #24]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	4607      	mov	r7, r0
 8006c38:	dc40      	bgt.n	8006cbc <_dtoa_r+0x814>
 8006c3a:	9b00      	ldr	r3, [sp, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d139      	bne.n	8006cb4 <_dtoa_r+0x80c>
 8006c40:	9b01      	ldr	r3, [sp, #4]
 8006c42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d136      	bne.n	8006cb8 <_dtoa_r+0x810>
 8006c4a:	9b01      	ldr	r3, [sp, #4]
 8006c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c50:	0d1b      	lsrs	r3, r3, #20
 8006c52:	051b      	lsls	r3, r3, #20
 8006c54:	b12b      	cbz	r3, 8006c62 <_dtoa_r+0x7ba>
 8006c56:	9b05      	ldr	r3, [sp, #20]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	9305      	str	r3, [sp, #20]
 8006c5c:	f108 0801 	add.w	r8, r8, #1
 8006c60:	2301      	movs	r3, #1
 8006c62:	9307      	str	r3, [sp, #28]
 8006c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d12a      	bne.n	8006cc0 <_dtoa_r+0x818>
 8006c6a:	2001      	movs	r0, #1
 8006c6c:	e030      	b.n	8006cd0 <_dtoa_r+0x828>
 8006c6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c74:	e795      	b.n	8006ba2 <_dtoa_r+0x6fa>
 8006c76:	9b07      	ldr	r3, [sp, #28]
 8006c78:	f109 37ff 	add.w	r7, r9, #4294967295
 8006c7c:	42bb      	cmp	r3, r7
 8006c7e:	bfbf      	itttt	lt
 8006c80:	9b07      	ldrlt	r3, [sp, #28]
 8006c82:	9707      	strlt	r7, [sp, #28]
 8006c84:	1afa      	sublt	r2, r7, r3
 8006c86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006c88:	bfbb      	ittet	lt
 8006c8a:	189b      	addlt	r3, r3, r2
 8006c8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006c8e:	1bdf      	subge	r7, r3, r7
 8006c90:	2700      	movlt	r7, #0
 8006c92:	f1b9 0f00 	cmp.w	r9, #0
 8006c96:	bfb5      	itete	lt
 8006c98:	9b05      	ldrlt	r3, [sp, #20]
 8006c9a:	9d05      	ldrge	r5, [sp, #20]
 8006c9c:	eba3 0509 	sublt.w	r5, r3, r9
 8006ca0:	464b      	movge	r3, r9
 8006ca2:	bfb8      	it	lt
 8006ca4:	2300      	movlt	r3, #0
 8006ca6:	e77e      	b.n	8006ba6 <_dtoa_r+0x6fe>
 8006ca8:	9f07      	ldr	r7, [sp, #28]
 8006caa:	9d05      	ldr	r5, [sp, #20]
 8006cac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006cae:	e783      	b.n	8006bb8 <_dtoa_r+0x710>
 8006cb0:	9a07      	ldr	r2, [sp, #28]
 8006cb2:	e7ab      	b.n	8006c0c <_dtoa_r+0x764>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e7d4      	b.n	8006c62 <_dtoa_r+0x7ba>
 8006cb8:	9b00      	ldr	r3, [sp, #0]
 8006cba:	e7d2      	b.n	8006c62 <_dtoa_r+0x7ba>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	9307      	str	r3, [sp, #28]
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006cc6:	6918      	ldr	r0, [r3, #16]
 8006cc8:	f000 fb06 	bl	80072d8 <__hi0bits>
 8006ccc:	f1c0 0020 	rsb	r0, r0, #32
 8006cd0:	4440      	add	r0, r8
 8006cd2:	f010 001f 	ands.w	r0, r0, #31
 8006cd6:	d047      	beq.n	8006d68 <_dtoa_r+0x8c0>
 8006cd8:	f1c0 0320 	rsb	r3, r0, #32
 8006cdc:	2b04      	cmp	r3, #4
 8006cde:	dd3b      	ble.n	8006d58 <_dtoa_r+0x8b0>
 8006ce0:	9b05      	ldr	r3, [sp, #20]
 8006ce2:	f1c0 001c 	rsb	r0, r0, #28
 8006ce6:	4403      	add	r3, r0
 8006ce8:	9305      	str	r3, [sp, #20]
 8006cea:	4405      	add	r5, r0
 8006cec:	4480      	add	r8, r0
 8006cee:	9b05      	ldr	r3, [sp, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	dd05      	ble.n	8006d00 <_dtoa_r+0x858>
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	9904      	ldr	r1, [sp, #16]
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 fc29 	bl	8007550 <__lshift>
 8006cfe:	9004      	str	r0, [sp, #16]
 8006d00:	f1b8 0f00 	cmp.w	r8, #0
 8006d04:	dd05      	ble.n	8006d12 <_dtoa_r+0x86a>
 8006d06:	4639      	mov	r1, r7
 8006d08:	4642      	mov	r2, r8
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f000 fc20 	bl	8007550 <__lshift>
 8006d10:	4607      	mov	r7, r0
 8006d12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d14:	b353      	cbz	r3, 8006d6c <_dtoa_r+0x8c4>
 8006d16:	4639      	mov	r1, r7
 8006d18:	9804      	ldr	r0, [sp, #16]
 8006d1a:	f000 fc6d 	bl	80075f8 <__mcmp>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	da24      	bge.n	8006d6c <_dtoa_r+0x8c4>
 8006d22:	2300      	movs	r3, #0
 8006d24:	220a      	movs	r2, #10
 8006d26:	9904      	ldr	r1, [sp, #16]
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 fa9a 	bl	8007262 <__multadd>
 8006d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d30:	9004      	str	r0, [sp, #16]
 8006d32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 814d 	beq.w	8006fd6 <_dtoa_r+0xb2e>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	4631      	mov	r1, r6
 8006d40:	220a      	movs	r2, #10
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 fa8d 	bl	8007262 <__multadd>
 8006d48:	9b02      	ldr	r3, [sp, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	dc4f      	bgt.n	8006df0 <_dtoa_r+0x948>
 8006d50:	9b06      	ldr	r3, [sp, #24]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	dd4c      	ble.n	8006df0 <_dtoa_r+0x948>
 8006d56:	e011      	b.n	8006d7c <_dtoa_r+0x8d4>
 8006d58:	d0c9      	beq.n	8006cee <_dtoa_r+0x846>
 8006d5a:	9a05      	ldr	r2, [sp, #20]
 8006d5c:	331c      	adds	r3, #28
 8006d5e:	441a      	add	r2, r3
 8006d60:	9205      	str	r2, [sp, #20]
 8006d62:	441d      	add	r5, r3
 8006d64:	4498      	add	r8, r3
 8006d66:	e7c2      	b.n	8006cee <_dtoa_r+0x846>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	e7f6      	b.n	8006d5a <_dtoa_r+0x8b2>
 8006d6c:	f1b9 0f00 	cmp.w	r9, #0
 8006d70:	dc38      	bgt.n	8006de4 <_dtoa_r+0x93c>
 8006d72:	9b06      	ldr	r3, [sp, #24]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	dd35      	ble.n	8006de4 <_dtoa_r+0x93c>
 8006d78:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d7c:	9b02      	ldr	r3, [sp, #8]
 8006d7e:	b963      	cbnz	r3, 8006d9a <_dtoa_r+0x8f2>
 8006d80:	4639      	mov	r1, r7
 8006d82:	2205      	movs	r2, #5
 8006d84:	4620      	mov	r0, r4
 8006d86:	f000 fa6c 	bl	8007262 <__multadd>
 8006d8a:	4601      	mov	r1, r0
 8006d8c:	4607      	mov	r7, r0
 8006d8e:	9804      	ldr	r0, [sp, #16]
 8006d90:	f000 fc32 	bl	80075f8 <__mcmp>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f73f adcc 	bgt.w	8006932 <_dtoa_r+0x48a>
 8006d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d9c:	465d      	mov	r5, fp
 8006d9e:	ea6f 0a03 	mvn.w	sl, r3
 8006da2:	f04f 0900 	mov.w	r9, #0
 8006da6:	4639      	mov	r1, r7
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fa43 	bl	8007234 <_Bfree>
 8006dae:	2e00      	cmp	r6, #0
 8006db0:	f43f aeb7 	beq.w	8006b22 <_dtoa_r+0x67a>
 8006db4:	f1b9 0f00 	cmp.w	r9, #0
 8006db8:	d005      	beq.n	8006dc6 <_dtoa_r+0x91e>
 8006dba:	45b1      	cmp	r9, r6
 8006dbc:	d003      	beq.n	8006dc6 <_dtoa_r+0x91e>
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f000 fa37 	bl	8007234 <_Bfree>
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 fa33 	bl	8007234 <_Bfree>
 8006dce:	e6a8      	b.n	8006b22 <_dtoa_r+0x67a>
 8006dd0:	2700      	movs	r7, #0
 8006dd2:	463e      	mov	r6, r7
 8006dd4:	e7e1      	b.n	8006d9a <_dtoa_r+0x8f2>
 8006dd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006dda:	463e      	mov	r6, r7
 8006ddc:	e5a9      	b.n	8006932 <_dtoa_r+0x48a>
 8006dde:	bf00      	nop
 8006de0:	40240000 	.word	0x40240000
 8006de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de6:	f8cd 9008 	str.w	r9, [sp, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 80fa 	beq.w	8006fe4 <_dtoa_r+0xb3c>
 8006df0:	2d00      	cmp	r5, #0
 8006df2:	dd05      	ble.n	8006e00 <_dtoa_r+0x958>
 8006df4:	4631      	mov	r1, r6
 8006df6:	462a      	mov	r2, r5
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f000 fba9 	bl	8007550 <__lshift>
 8006dfe:	4606      	mov	r6, r0
 8006e00:	9b07      	ldr	r3, [sp, #28]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d04c      	beq.n	8006ea0 <_dtoa_r+0x9f8>
 8006e06:	6871      	ldr	r1, [r6, #4]
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 f9df 	bl	80071cc <_Balloc>
 8006e0e:	6932      	ldr	r2, [r6, #16]
 8006e10:	3202      	adds	r2, #2
 8006e12:	4605      	mov	r5, r0
 8006e14:	0092      	lsls	r2, r2, #2
 8006e16:	f106 010c 	add.w	r1, r6, #12
 8006e1a:	300c      	adds	r0, #12
 8006e1c:	f7fe fd50 	bl	80058c0 <memcpy>
 8006e20:	2201      	movs	r2, #1
 8006e22:	4629      	mov	r1, r5
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 fb93 	bl	8007550 <__lshift>
 8006e2a:	9b00      	ldr	r3, [sp, #0]
 8006e2c:	f8cd b014 	str.w	fp, [sp, #20]
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	46b1      	mov	r9, r6
 8006e36:	9307      	str	r3, [sp, #28]
 8006e38:	4606      	mov	r6, r0
 8006e3a:	4639      	mov	r1, r7
 8006e3c:	9804      	ldr	r0, [sp, #16]
 8006e3e:	f7ff faa7 	bl	8006390 <quorem>
 8006e42:	4649      	mov	r1, r9
 8006e44:	4605      	mov	r5, r0
 8006e46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006e4a:	9804      	ldr	r0, [sp, #16]
 8006e4c:	f000 fbd4 	bl	80075f8 <__mcmp>
 8006e50:	4632      	mov	r2, r6
 8006e52:	9000      	str	r0, [sp, #0]
 8006e54:	4639      	mov	r1, r7
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 fbe8 	bl	800762c <__mdiff>
 8006e5c:	68c3      	ldr	r3, [r0, #12]
 8006e5e:	4602      	mov	r2, r0
 8006e60:	bb03      	cbnz	r3, 8006ea4 <_dtoa_r+0x9fc>
 8006e62:	4601      	mov	r1, r0
 8006e64:	9008      	str	r0, [sp, #32]
 8006e66:	9804      	ldr	r0, [sp, #16]
 8006e68:	f000 fbc6 	bl	80075f8 <__mcmp>
 8006e6c:	9a08      	ldr	r2, [sp, #32]
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4611      	mov	r1, r2
 8006e72:	4620      	mov	r0, r4
 8006e74:	9308      	str	r3, [sp, #32]
 8006e76:	f000 f9dd 	bl	8007234 <_Bfree>
 8006e7a:	9b08      	ldr	r3, [sp, #32]
 8006e7c:	b9a3      	cbnz	r3, 8006ea8 <_dtoa_r+0xa00>
 8006e7e:	9a06      	ldr	r2, [sp, #24]
 8006e80:	b992      	cbnz	r2, 8006ea8 <_dtoa_r+0xa00>
 8006e82:	9a07      	ldr	r2, [sp, #28]
 8006e84:	b982      	cbnz	r2, 8006ea8 <_dtoa_r+0xa00>
 8006e86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e8a:	d029      	beq.n	8006ee0 <_dtoa_r+0xa38>
 8006e8c:	9b00      	ldr	r3, [sp, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	dd01      	ble.n	8006e96 <_dtoa_r+0x9ee>
 8006e92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006e96:	9b05      	ldr	r3, [sp, #20]
 8006e98:	1c5d      	adds	r5, r3, #1
 8006e9a:	f883 8000 	strb.w	r8, [r3]
 8006e9e:	e782      	b.n	8006da6 <_dtoa_r+0x8fe>
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	e7c2      	b.n	8006e2a <_dtoa_r+0x982>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e7e3      	b.n	8006e70 <_dtoa_r+0x9c8>
 8006ea8:	9a00      	ldr	r2, [sp, #0]
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	db04      	blt.n	8006eb8 <_dtoa_r+0xa10>
 8006eae:	d125      	bne.n	8006efc <_dtoa_r+0xa54>
 8006eb0:	9a06      	ldr	r2, [sp, #24]
 8006eb2:	bb1a      	cbnz	r2, 8006efc <_dtoa_r+0xa54>
 8006eb4:	9a07      	ldr	r2, [sp, #28]
 8006eb6:	bb0a      	cbnz	r2, 8006efc <_dtoa_r+0xa54>
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	ddec      	ble.n	8006e96 <_dtoa_r+0x9ee>
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	9904      	ldr	r1, [sp, #16]
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 fb45 	bl	8007550 <__lshift>
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	9004      	str	r0, [sp, #16]
 8006eca:	f000 fb95 	bl	80075f8 <__mcmp>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	dc03      	bgt.n	8006eda <_dtoa_r+0xa32>
 8006ed2:	d1e0      	bne.n	8006e96 <_dtoa_r+0x9ee>
 8006ed4:	f018 0f01 	tst.w	r8, #1
 8006ed8:	d0dd      	beq.n	8006e96 <_dtoa_r+0x9ee>
 8006eda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ede:	d1d8      	bne.n	8006e92 <_dtoa_r+0x9ea>
 8006ee0:	9b05      	ldr	r3, [sp, #20]
 8006ee2:	9a05      	ldr	r2, [sp, #20]
 8006ee4:	1c5d      	adds	r5, r3, #1
 8006ee6:	2339      	movs	r3, #57	; 0x39
 8006ee8:	7013      	strb	r3, [r2, #0]
 8006eea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006eee:	2b39      	cmp	r3, #57	; 0x39
 8006ef0:	f105 32ff 	add.w	r2, r5, #4294967295
 8006ef4:	d04f      	beq.n	8006f96 <_dtoa_r+0xaee>
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	7013      	strb	r3, [r2, #0]
 8006efa:	e754      	b.n	8006da6 <_dtoa_r+0x8fe>
 8006efc:	9a05      	ldr	r2, [sp, #20]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f102 0501 	add.w	r5, r2, #1
 8006f04:	dd06      	ble.n	8006f14 <_dtoa_r+0xa6c>
 8006f06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006f0a:	d0e9      	beq.n	8006ee0 <_dtoa_r+0xa38>
 8006f0c:	f108 0801 	add.w	r8, r8, #1
 8006f10:	9b05      	ldr	r3, [sp, #20]
 8006f12:	e7c2      	b.n	8006e9a <_dtoa_r+0x9f2>
 8006f14:	9a02      	ldr	r2, [sp, #8]
 8006f16:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006f1a:	eba5 030b 	sub.w	r3, r5, fp
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d021      	beq.n	8006f66 <_dtoa_r+0xabe>
 8006f22:	2300      	movs	r3, #0
 8006f24:	220a      	movs	r2, #10
 8006f26:	9904      	ldr	r1, [sp, #16]
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 f99a 	bl	8007262 <__multadd>
 8006f2e:	45b1      	cmp	r9, r6
 8006f30:	9004      	str	r0, [sp, #16]
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	f04f 020a 	mov.w	r2, #10
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	d105      	bne.n	8006f4c <_dtoa_r+0xaa4>
 8006f40:	f000 f98f 	bl	8007262 <__multadd>
 8006f44:	4681      	mov	r9, r0
 8006f46:	4606      	mov	r6, r0
 8006f48:	9505      	str	r5, [sp, #20]
 8006f4a:	e776      	b.n	8006e3a <_dtoa_r+0x992>
 8006f4c:	f000 f989 	bl	8007262 <__multadd>
 8006f50:	4631      	mov	r1, r6
 8006f52:	4681      	mov	r9, r0
 8006f54:	2300      	movs	r3, #0
 8006f56:	220a      	movs	r2, #10
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 f982 	bl	8007262 <__multadd>
 8006f5e:	4606      	mov	r6, r0
 8006f60:	e7f2      	b.n	8006f48 <_dtoa_r+0xaa0>
 8006f62:	f04f 0900 	mov.w	r9, #0
 8006f66:	2201      	movs	r2, #1
 8006f68:	9904      	ldr	r1, [sp, #16]
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 faf0 	bl	8007550 <__lshift>
 8006f70:	4639      	mov	r1, r7
 8006f72:	9004      	str	r0, [sp, #16]
 8006f74:	f000 fb40 	bl	80075f8 <__mcmp>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	dcb6      	bgt.n	8006eea <_dtoa_r+0xa42>
 8006f7c:	d102      	bne.n	8006f84 <_dtoa_r+0xadc>
 8006f7e:	f018 0f01 	tst.w	r8, #1
 8006f82:	d1b2      	bne.n	8006eea <_dtoa_r+0xa42>
 8006f84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f88:	2b30      	cmp	r3, #48	; 0x30
 8006f8a:	f105 32ff 	add.w	r2, r5, #4294967295
 8006f8e:	f47f af0a 	bne.w	8006da6 <_dtoa_r+0x8fe>
 8006f92:	4615      	mov	r5, r2
 8006f94:	e7f6      	b.n	8006f84 <_dtoa_r+0xadc>
 8006f96:	4593      	cmp	fp, r2
 8006f98:	d105      	bne.n	8006fa6 <_dtoa_r+0xafe>
 8006f9a:	2331      	movs	r3, #49	; 0x31
 8006f9c:	f10a 0a01 	add.w	sl, sl, #1
 8006fa0:	f88b 3000 	strb.w	r3, [fp]
 8006fa4:	e6ff      	b.n	8006da6 <_dtoa_r+0x8fe>
 8006fa6:	4615      	mov	r5, r2
 8006fa8:	e79f      	b.n	8006eea <_dtoa_r+0xa42>
 8006faa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007010 <_dtoa_r+0xb68>
 8006fae:	e007      	b.n	8006fc0 <_dtoa_r+0xb18>
 8006fb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fb2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007014 <_dtoa_r+0xb6c>
 8006fb6:	b11b      	cbz	r3, 8006fc0 <_dtoa_r+0xb18>
 8006fb8:	f10b 0308 	add.w	r3, fp, #8
 8006fbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006fbe:	6013      	str	r3, [r2, #0]
 8006fc0:	4658      	mov	r0, fp
 8006fc2:	b017      	add	sp, #92	; 0x5c
 8006fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc8:	9b06      	ldr	r3, [sp, #24]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	f77f ae35 	ble.w	8006c3a <_dtoa_r+0x792>
 8006fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fd2:	9307      	str	r3, [sp, #28]
 8006fd4:	e649      	b.n	8006c6a <_dtoa_r+0x7c2>
 8006fd6:	9b02      	ldr	r3, [sp, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	dc03      	bgt.n	8006fe4 <_dtoa_r+0xb3c>
 8006fdc:	9b06      	ldr	r3, [sp, #24]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	f73f aecc 	bgt.w	8006d7c <_dtoa_r+0x8d4>
 8006fe4:	465d      	mov	r5, fp
 8006fe6:	4639      	mov	r1, r7
 8006fe8:	9804      	ldr	r0, [sp, #16]
 8006fea:	f7ff f9d1 	bl	8006390 <quorem>
 8006fee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006ff2:	f805 8b01 	strb.w	r8, [r5], #1
 8006ff6:	9a02      	ldr	r2, [sp, #8]
 8006ff8:	eba5 030b 	sub.w	r3, r5, fp
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	ddb0      	ble.n	8006f62 <_dtoa_r+0xaba>
 8007000:	2300      	movs	r3, #0
 8007002:	220a      	movs	r2, #10
 8007004:	9904      	ldr	r1, [sp, #16]
 8007006:	4620      	mov	r0, r4
 8007008:	f000 f92b 	bl	8007262 <__multadd>
 800700c:	9004      	str	r0, [sp, #16]
 800700e:	e7ea      	b.n	8006fe6 <_dtoa_r+0xb3e>
 8007010:	08008f64 	.word	0x08008f64
 8007014:	08008f88 	.word	0x08008f88

08007018 <__sflush_r>:
 8007018:	898a      	ldrh	r2, [r1, #12]
 800701a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701e:	4605      	mov	r5, r0
 8007020:	0710      	lsls	r0, r2, #28
 8007022:	460c      	mov	r4, r1
 8007024:	d458      	bmi.n	80070d8 <__sflush_r+0xc0>
 8007026:	684b      	ldr	r3, [r1, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	dc05      	bgt.n	8007038 <__sflush_r+0x20>
 800702c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	dc02      	bgt.n	8007038 <__sflush_r+0x20>
 8007032:	2000      	movs	r0, #0
 8007034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800703a:	2e00      	cmp	r6, #0
 800703c:	d0f9      	beq.n	8007032 <__sflush_r+0x1a>
 800703e:	2300      	movs	r3, #0
 8007040:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007044:	682f      	ldr	r7, [r5, #0]
 8007046:	6a21      	ldr	r1, [r4, #32]
 8007048:	602b      	str	r3, [r5, #0]
 800704a:	d032      	beq.n	80070b2 <__sflush_r+0x9a>
 800704c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	075a      	lsls	r2, r3, #29
 8007052:	d505      	bpl.n	8007060 <__sflush_r+0x48>
 8007054:	6863      	ldr	r3, [r4, #4]
 8007056:	1ac0      	subs	r0, r0, r3
 8007058:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800705a:	b10b      	cbz	r3, 8007060 <__sflush_r+0x48>
 800705c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800705e:	1ac0      	subs	r0, r0, r3
 8007060:	2300      	movs	r3, #0
 8007062:	4602      	mov	r2, r0
 8007064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007066:	6a21      	ldr	r1, [r4, #32]
 8007068:	4628      	mov	r0, r5
 800706a:	47b0      	blx	r6
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	d106      	bne.n	8007080 <__sflush_r+0x68>
 8007072:	6829      	ldr	r1, [r5, #0]
 8007074:	291d      	cmp	r1, #29
 8007076:	d848      	bhi.n	800710a <__sflush_r+0xf2>
 8007078:	4a29      	ldr	r2, [pc, #164]	; (8007120 <__sflush_r+0x108>)
 800707a:	40ca      	lsrs	r2, r1
 800707c:	07d6      	lsls	r6, r2, #31
 800707e:	d544      	bpl.n	800710a <__sflush_r+0xf2>
 8007080:	2200      	movs	r2, #0
 8007082:	6062      	str	r2, [r4, #4]
 8007084:	04d9      	lsls	r1, r3, #19
 8007086:	6922      	ldr	r2, [r4, #16]
 8007088:	6022      	str	r2, [r4, #0]
 800708a:	d504      	bpl.n	8007096 <__sflush_r+0x7e>
 800708c:	1c42      	adds	r2, r0, #1
 800708e:	d101      	bne.n	8007094 <__sflush_r+0x7c>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b903      	cbnz	r3, 8007096 <__sflush_r+0x7e>
 8007094:	6560      	str	r0, [r4, #84]	; 0x54
 8007096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007098:	602f      	str	r7, [r5, #0]
 800709a:	2900      	cmp	r1, #0
 800709c:	d0c9      	beq.n	8007032 <__sflush_r+0x1a>
 800709e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070a2:	4299      	cmp	r1, r3
 80070a4:	d002      	beq.n	80070ac <__sflush_r+0x94>
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 fb7a 	bl	80077a0 <_free_r>
 80070ac:	2000      	movs	r0, #0
 80070ae:	6360      	str	r0, [r4, #52]	; 0x34
 80070b0:	e7c0      	b.n	8007034 <__sflush_r+0x1c>
 80070b2:	2301      	movs	r3, #1
 80070b4:	4628      	mov	r0, r5
 80070b6:	47b0      	blx	r6
 80070b8:	1c41      	adds	r1, r0, #1
 80070ba:	d1c8      	bne.n	800704e <__sflush_r+0x36>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0c5      	beq.n	800704e <__sflush_r+0x36>
 80070c2:	2b1d      	cmp	r3, #29
 80070c4:	d001      	beq.n	80070ca <__sflush_r+0xb2>
 80070c6:	2b16      	cmp	r3, #22
 80070c8:	d101      	bne.n	80070ce <__sflush_r+0xb6>
 80070ca:	602f      	str	r7, [r5, #0]
 80070cc:	e7b1      	b.n	8007032 <__sflush_r+0x1a>
 80070ce:	89a3      	ldrh	r3, [r4, #12]
 80070d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d4:	81a3      	strh	r3, [r4, #12]
 80070d6:	e7ad      	b.n	8007034 <__sflush_r+0x1c>
 80070d8:	690f      	ldr	r7, [r1, #16]
 80070da:	2f00      	cmp	r7, #0
 80070dc:	d0a9      	beq.n	8007032 <__sflush_r+0x1a>
 80070de:	0793      	lsls	r3, r2, #30
 80070e0:	680e      	ldr	r6, [r1, #0]
 80070e2:	bf08      	it	eq
 80070e4:	694b      	ldreq	r3, [r1, #20]
 80070e6:	600f      	str	r7, [r1, #0]
 80070e8:	bf18      	it	ne
 80070ea:	2300      	movne	r3, #0
 80070ec:	eba6 0807 	sub.w	r8, r6, r7
 80070f0:	608b      	str	r3, [r1, #8]
 80070f2:	f1b8 0f00 	cmp.w	r8, #0
 80070f6:	dd9c      	ble.n	8007032 <__sflush_r+0x1a>
 80070f8:	4643      	mov	r3, r8
 80070fa:	463a      	mov	r2, r7
 80070fc:	6a21      	ldr	r1, [r4, #32]
 80070fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007100:	4628      	mov	r0, r5
 8007102:	47b0      	blx	r6
 8007104:	2800      	cmp	r0, #0
 8007106:	dc06      	bgt.n	8007116 <__sflush_r+0xfe>
 8007108:	89a3      	ldrh	r3, [r4, #12]
 800710a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800710e:	81a3      	strh	r3, [r4, #12]
 8007110:	f04f 30ff 	mov.w	r0, #4294967295
 8007114:	e78e      	b.n	8007034 <__sflush_r+0x1c>
 8007116:	4407      	add	r7, r0
 8007118:	eba8 0800 	sub.w	r8, r8, r0
 800711c:	e7e9      	b.n	80070f2 <__sflush_r+0xda>
 800711e:	bf00      	nop
 8007120:	20400001 	.word	0x20400001

08007124 <_fflush_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	690b      	ldr	r3, [r1, #16]
 8007128:	4605      	mov	r5, r0
 800712a:	460c      	mov	r4, r1
 800712c:	b1db      	cbz	r3, 8007166 <_fflush_r+0x42>
 800712e:	b118      	cbz	r0, 8007138 <_fflush_r+0x14>
 8007130:	6983      	ldr	r3, [r0, #24]
 8007132:	b90b      	cbnz	r3, 8007138 <_fflush_r+0x14>
 8007134:	f7fe fb16 	bl	8005764 <__sinit>
 8007138:	4b0c      	ldr	r3, [pc, #48]	; (800716c <_fflush_r+0x48>)
 800713a:	429c      	cmp	r4, r3
 800713c:	d109      	bne.n	8007152 <_fflush_r+0x2e>
 800713e:	686c      	ldr	r4, [r5, #4]
 8007140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007144:	b17b      	cbz	r3, 8007166 <_fflush_r+0x42>
 8007146:	4621      	mov	r1, r4
 8007148:	4628      	mov	r0, r5
 800714a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800714e:	f7ff bf63 	b.w	8007018 <__sflush_r>
 8007152:	4b07      	ldr	r3, [pc, #28]	; (8007170 <_fflush_r+0x4c>)
 8007154:	429c      	cmp	r4, r3
 8007156:	d101      	bne.n	800715c <_fflush_r+0x38>
 8007158:	68ac      	ldr	r4, [r5, #8]
 800715a:	e7f1      	b.n	8007140 <_fflush_r+0x1c>
 800715c:	4b05      	ldr	r3, [pc, #20]	; (8007174 <_fflush_r+0x50>)
 800715e:	429c      	cmp	r4, r3
 8007160:	bf08      	it	eq
 8007162:	68ec      	ldreq	r4, [r5, #12]
 8007164:	e7ec      	b.n	8007140 <_fflush_r+0x1c>
 8007166:	2000      	movs	r0, #0
 8007168:	bd38      	pop	{r3, r4, r5, pc}
 800716a:	bf00      	nop
 800716c:	08008f10 	.word	0x08008f10
 8007170:	08008f30 	.word	0x08008f30
 8007174:	08008ef0 	.word	0x08008ef0

08007178 <_localeconv_r>:
 8007178:	4b04      	ldr	r3, [pc, #16]	; (800718c <_localeconv_r+0x14>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6a18      	ldr	r0, [r3, #32]
 800717e:	4b04      	ldr	r3, [pc, #16]	; (8007190 <_localeconv_r+0x18>)
 8007180:	2800      	cmp	r0, #0
 8007182:	bf08      	it	eq
 8007184:	4618      	moveq	r0, r3
 8007186:	30f0      	adds	r0, #240	; 0xf0
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	200000dc 	.word	0x200000dc
 8007190:	20000140 	.word	0x20000140

08007194 <_lseek_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	4c07      	ldr	r4, [pc, #28]	; (80071b4 <_lseek_r+0x20>)
 8007198:	4605      	mov	r5, r0
 800719a:	4608      	mov	r0, r1
 800719c:	4611      	mov	r1, r2
 800719e:	2200      	movs	r2, #0
 80071a0:	6022      	str	r2, [r4, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	f7fe f8b9 	bl	800531a <_lseek>
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	d102      	bne.n	80071b2 <_lseek_r+0x1e>
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	b103      	cbz	r3, 80071b2 <_lseek_r+0x1e>
 80071b0:	602b      	str	r3, [r5, #0]
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	2000050c 	.word	0x2000050c

080071b8 <malloc>:
 80071b8:	4b02      	ldr	r3, [pc, #8]	; (80071c4 <malloc+0xc>)
 80071ba:	4601      	mov	r1, r0
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	f7fe bb93 	b.w	80058e8 <_malloc_r>
 80071c2:	bf00      	nop
 80071c4:	200000dc 	.word	0x200000dc

080071c8 <__malloc_lock>:
 80071c8:	4770      	bx	lr

080071ca <__malloc_unlock>:
 80071ca:	4770      	bx	lr

080071cc <_Balloc>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071d0:	4604      	mov	r4, r0
 80071d2:	460e      	mov	r6, r1
 80071d4:	b93d      	cbnz	r5, 80071e6 <_Balloc+0x1a>
 80071d6:	2010      	movs	r0, #16
 80071d8:	f7ff ffee 	bl	80071b8 <malloc>
 80071dc:	6260      	str	r0, [r4, #36]	; 0x24
 80071de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071e2:	6005      	str	r5, [r0, #0]
 80071e4:	60c5      	str	r5, [r0, #12]
 80071e6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80071e8:	68eb      	ldr	r3, [r5, #12]
 80071ea:	b183      	cbz	r3, 800720e <_Balloc+0x42>
 80071ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80071f4:	b9b8      	cbnz	r0, 8007226 <_Balloc+0x5a>
 80071f6:	2101      	movs	r1, #1
 80071f8:	fa01 f506 	lsl.w	r5, r1, r6
 80071fc:	1d6a      	adds	r2, r5, #5
 80071fe:	0092      	lsls	r2, r2, #2
 8007200:	4620      	mov	r0, r4
 8007202:	f000 fabf 	bl	8007784 <_calloc_r>
 8007206:	b160      	cbz	r0, 8007222 <_Balloc+0x56>
 8007208:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800720c:	e00e      	b.n	800722c <_Balloc+0x60>
 800720e:	2221      	movs	r2, #33	; 0x21
 8007210:	2104      	movs	r1, #4
 8007212:	4620      	mov	r0, r4
 8007214:	f000 fab6 	bl	8007784 <_calloc_r>
 8007218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800721a:	60e8      	str	r0, [r5, #12]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e4      	bne.n	80071ec <_Balloc+0x20>
 8007222:	2000      	movs	r0, #0
 8007224:	bd70      	pop	{r4, r5, r6, pc}
 8007226:	6802      	ldr	r2, [r0, #0]
 8007228:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800722c:	2300      	movs	r3, #0
 800722e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007232:	e7f7      	b.n	8007224 <_Balloc+0x58>

08007234 <_Bfree>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007238:	4606      	mov	r6, r0
 800723a:	460d      	mov	r5, r1
 800723c:	b93c      	cbnz	r4, 800724e <_Bfree+0x1a>
 800723e:	2010      	movs	r0, #16
 8007240:	f7ff ffba 	bl	80071b8 <malloc>
 8007244:	6270      	str	r0, [r6, #36]	; 0x24
 8007246:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800724a:	6004      	str	r4, [r0, #0]
 800724c:	60c4      	str	r4, [r0, #12]
 800724e:	b13d      	cbz	r5, 8007260 <_Bfree+0x2c>
 8007250:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007252:	686a      	ldr	r2, [r5, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800725a:	6029      	str	r1, [r5, #0]
 800725c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007260:	bd70      	pop	{r4, r5, r6, pc}

08007262 <__multadd>:
 8007262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007266:	690d      	ldr	r5, [r1, #16]
 8007268:	461f      	mov	r7, r3
 800726a:	4606      	mov	r6, r0
 800726c:	460c      	mov	r4, r1
 800726e:	f101 0c14 	add.w	ip, r1, #20
 8007272:	2300      	movs	r3, #0
 8007274:	f8dc 0000 	ldr.w	r0, [ip]
 8007278:	b281      	uxth	r1, r0
 800727a:	fb02 7101 	mla	r1, r2, r1, r7
 800727e:	0c0f      	lsrs	r7, r1, #16
 8007280:	0c00      	lsrs	r0, r0, #16
 8007282:	fb02 7000 	mla	r0, r2, r0, r7
 8007286:	b289      	uxth	r1, r1
 8007288:	3301      	adds	r3, #1
 800728a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800728e:	429d      	cmp	r5, r3
 8007290:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007294:	f84c 1b04 	str.w	r1, [ip], #4
 8007298:	dcec      	bgt.n	8007274 <__multadd+0x12>
 800729a:	b1d7      	cbz	r7, 80072d2 <__multadd+0x70>
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	42ab      	cmp	r3, r5
 80072a0:	dc12      	bgt.n	80072c8 <__multadd+0x66>
 80072a2:	6861      	ldr	r1, [r4, #4]
 80072a4:	4630      	mov	r0, r6
 80072a6:	3101      	adds	r1, #1
 80072a8:	f7ff ff90 	bl	80071cc <_Balloc>
 80072ac:	6922      	ldr	r2, [r4, #16]
 80072ae:	3202      	adds	r2, #2
 80072b0:	f104 010c 	add.w	r1, r4, #12
 80072b4:	4680      	mov	r8, r0
 80072b6:	0092      	lsls	r2, r2, #2
 80072b8:	300c      	adds	r0, #12
 80072ba:	f7fe fb01 	bl	80058c0 <memcpy>
 80072be:	4621      	mov	r1, r4
 80072c0:	4630      	mov	r0, r6
 80072c2:	f7ff ffb7 	bl	8007234 <_Bfree>
 80072c6:	4644      	mov	r4, r8
 80072c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072cc:	3501      	adds	r5, #1
 80072ce:	615f      	str	r7, [r3, #20]
 80072d0:	6125      	str	r5, [r4, #16]
 80072d2:	4620      	mov	r0, r4
 80072d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072d8 <__hi0bits>:
 80072d8:	0c02      	lsrs	r2, r0, #16
 80072da:	0412      	lsls	r2, r2, #16
 80072dc:	4603      	mov	r3, r0
 80072de:	b9b2      	cbnz	r2, 800730e <__hi0bits+0x36>
 80072e0:	0403      	lsls	r3, r0, #16
 80072e2:	2010      	movs	r0, #16
 80072e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072e8:	bf04      	itt	eq
 80072ea:	021b      	lsleq	r3, r3, #8
 80072ec:	3008      	addeq	r0, #8
 80072ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072f2:	bf04      	itt	eq
 80072f4:	011b      	lsleq	r3, r3, #4
 80072f6:	3004      	addeq	r0, #4
 80072f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072fc:	bf04      	itt	eq
 80072fe:	009b      	lsleq	r3, r3, #2
 8007300:	3002      	addeq	r0, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	db06      	blt.n	8007314 <__hi0bits+0x3c>
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	d503      	bpl.n	8007312 <__hi0bits+0x3a>
 800730a:	3001      	adds	r0, #1
 800730c:	4770      	bx	lr
 800730e:	2000      	movs	r0, #0
 8007310:	e7e8      	b.n	80072e4 <__hi0bits+0xc>
 8007312:	2020      	movs	r0, #32
 8007314:	4770      	bx	lr

08007316 <__lo0bits>:
 8007316:	6803      	ldr	r3, [r0, #0]
 8007318:	f013 0207 	ands.w	r2, r3, #7
 800731c:	4601      	mov	r1, r0
 800731e:	d00b      	beq.n	8007338 <__lo0bits+0x22>
 8007320:	07da      	lsls	r2, r3, #31
 8007322:	d423      	bmi.n	800736c <__lo0bits+0x56>
 8007324:	0798      	lsls	r0, r3, #30
 8007326:	bf49      	itett	mi
 8007328:	085b      	lsrmi	r3, r3, #1
 800732a:	089b      	lsrpl	r3, r3, #2
 800732c:	2001      	movmi	r0, #1
 800732e:	600b      	strmi	r3, [r1, #0]
 8007330:	bf5c      	itt	pl
 8007332:	600b      	strpl	r3, [r1, #0]
 8007334:	2002      	movpl	r0, #2
 8007336:	4770      	bx	lr
 8007338:	b298      	uxth	r0, r3
 800733a:	b9a8      	cbnz	r0, 8007368 <__lo0bits+0x52>
 800733c:	0c1b      	lsrs	r3, r3, #16
 800733e:	2010      	movs	r0, #16
 8007340:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007344:	bf04      	itt	eq
 8007346:	0a1b      	lsreq	r3, r3, #8
 8007348:	3008      	addeq	r0, #8
 800734a:	071a      	lsls	r2, r3, #28
 800734c:	bf04      	itt	eq
 800734e:	091b      	lsreq	r3, r3, #4
 8007350:	3004      	addeq	r0, #4
 8007352:	079a      	lsls	r2, r3, #30
 8007354:	bf04      	itt	eq
 8007356:	089b      	lsreq	r3, r3, #2
 8007358:	3002      	addeq	r0, #2
 800735a:	07da      	lsls	r2, r3, #31
 800735c:	d402      	bmi.n	8007364 <__lo0bits+0x4e>
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	d006      	beq.n	8007370 <__lo0bits+0x5a>
 8007362:	3001      	adds	r0, #1
 8007364:	600b      	str	r3, [r1, #0]
 8007366:	4770      	bx	lr
 8007368:	4610      	mov	r0, r2
 800736a:	e7e9      	b.n	8007340 <__lo0bits+0x2a>
 800736c:	2000      	movs	r0, #0
 800736e:	4770      	bx	lr
 8007370:	2020      	movs	r0, #32
 8007372:	4770      	bx	lr

08007374 <__i2b>:
 8007374:	b510      	push	{r4, lr}
 8007376:	460c      	mov	r4, r1
 8007378:	2101      	movs	r1, #1
 800737a:	f7ff ff27 	bl	80071cc <_Balloc>
 800737e:	2201      	movs	r2, #1
 8007380:	6144      	str	r4, [r0, #20]
 8007382:	6102      	str	r2, [r0, #16]
 8007384:	bd10      	pop	{r4, pc}

08007386 <__multiply>:
 8007386:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738a:	4614      	mov	r4, r2
 800738c:	690a      	ldr	r2, [r1, #16]
 800738e:	6923      	ldr	r3, [r4, #16]
 8007390:	429a      	cmp	r2, r3
 8007392:	bfb8      	it	lt
 8007394:	460b      	movlt	r3, r1
 8007396:	4688      	mov	r8, r1
 8007398:	bfbc      	itt	lt
 800739a:	46a0      	movlt	r8, r4
 800739c:	461c      	movlt	r4, r3
 800739e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80073a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073ae:	eb07 0609 	add.w	r6, r7, r9
 80073b2:	42b3      	cmp	r3, r6
 80073b4:	bfb8      	it	lt
 80073b6:	3101      	addlt	r1, #1
 80073b8:	f7ff ff08 	bl	80071cc <_Balloc>
 80073bc:	f100 0514 	add.w	r5, r0, #20
 80073c0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80073c4:	462b      	mov	r3, r5
 80073c6:	2200      	movs	r2, #0
 80073c8:	4573      	cmp	r3, lr
 80073ca:	d316      	bcc.n	80073fa <__multiply+0x74>
 80073cc:	f104 0214 	add.w	r2, r4, #20
 80073d0:	f108 0114 	add.w	r1, r8, #20
 80073d4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80073d8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	9b00      	ldr	r3, [sp, #0]
 80073e0:	9201      	str	r2, [sp, #4]
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d80c      	bhi.n	8007400 <__multiply+0x7a>
 80073e6:	2e00      	cmp	r6, #0
 80073e8:	dd03      	ble.n	80073f2 <__multiply+0x6c>
 80073ea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d05d      	beq.n	80074ae <__multiply+0x128>
 80073f2:	6106      	str	r6, [r0, #16]
 80073f4:	b003      	add	sp, #12
 80073f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	f843 2b04 	str.w	r2, [r3], #4
 80073fe:	e7e3      	b.n	80073c8 <__multiply+0x42>
 8007400:	f8b2 b000 	ldrh.w	fp, [r2]
 8007404:	f1bb 0f00 	cmp.w	fp, #0
 8007408:	d023      	beq.n	8007452 <__multiply+0xcc>
 800740a:	4689      	mov	r9, r1
 800740c:	46ac      	mov	ip, r5
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	f859 4b04 	ldr.w	r4, [r9], #4
 8007416:	f8dc a000 	ldr.w	sl, [ip]
 800741a:	b2a3      	uxth	r3, r4
 800741c:	fa1f fa8a 	uxth.w	sl, sl
 8007420:	fb0b a303 	mla	r3, fp, r3, sl
 8007424:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007428:	f8dc 4000 	ldr.w	r4, [ip]
 800742c:	4443      	add	r3, r8
 800742e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007432:	fb0b 840a 	mla	r4, fp, sl, r8
 8007436:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800743a:	46e2      	mov	sl, ip
 800743c:	b29b      	uxth	r3, r3
 800743e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007442:	454f      	cmp	r7, r9
 8007444:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007448:	f84a 3b04 	str.w	r3, [sl], #4
 800744c:	d82b      	bhi.n	80074a6 <__multiply+0x120>
 800744e:	f8cc 8004 	str.w	r8, [ip, #4]
 8007452:	9b01      	ldr	r3, [sp, #4]
 8007454:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007458:	3204      	adds	r2, #4
 800745a:	f1ba 0f00 	cmp.w	sl, #0
 800745e:	d020      	beq.n	80074a2 <__multiply+0x11c>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	4689      	mov	r9, r1
 8007464:	46a8      	mov	r8, r5
 8007466:	f04f 0b00 	mov.w	fp, #0
 800746a:	f8b9 c000 	ldrh.w	ip, [r9]
 800746e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007472:	fb0a 440c 	mla	r4, sl, ip, r4
 8007476:	445c      	add	r4, fp
 8007478:	46c4      	mov	ip, r8
 800747a:	b29b      	uxth	r3, r3
 800747c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007480:	f84c 3b04 	str.w	r3, [ip], #4
 8007484:	f859 3b04 	ldr.w	r3, [r9], #4
 8007488:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800748c:	0c1b      	lsrs	r3, r3, #16
 800748e:	fb0a b303 	mla	r3, sl, r3, fp
 8007492:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007496:	454f      	cmp	r7, r9
 8007498:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800749c:	d805      	bhi.n	80074aa <__multiply+0x124>
 800749e:	f8c8 3004 	str.w	r3, [r8, #4]
 80074a2:	3504      	adds	r5, #4
 80074a4:	e79b      	b.n	80073de <__multiply+0x58>
 80074a6:	46d4      	mov	ip, sl
 80074a8:	e7b3      	b.n	8007412 <__multiply+0x8c>
 80074aa:	46e0      	mov	r8, ip
 80074ac:	e7dd      	b.n	800746a <__multiply+0xe4>
 80074ae:	3e01      	subs	r6, #1
 80074b0:	e799      	b.n	80073e6 <__multiply+0x60>
	...

080074b4 <__pow5mult>:
 80074b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b8:	4615      	mov	r5, r2
 80074ba:	f012 0203 	ands.w	r2, r2, #3
 80074be:	4606      	mov	r6, r0
 80074c0:	460f      	mov	r7, r1
 80074c2:	d007      	beq.n	80074d4 <__pow5mult+0x20>
 80074c4:	3a01      	subs	r2, #1
 80074c6:	4c21      	ldr	r4, [pc, #132]	; (800754c <__pow5mult+0x98>)
 80074c8:	2300      	movs	r3, #0
 80074ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074ce:	f7ff fec8 	bl	8007262 <__multadd>
 80074d2:	4607      	mov	r7, r0
 80074d4:	10ad      	asrs	r5, r5, #2
 80074d6:	d035      	beq.n	8007544 <__pow5mult+0x90>
 80074d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074da:	b93c      	cbnz	r4, 80074ec <__pow5mult+0x38>
 80074dc:	2010      	movs	r0, #16
 80074de:	f7ff fe6b 	bl	80071b8 <malloc>
 80074e2:	6270      	str	r0, [r6, #36]	; 0x24
 80074e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074e8:	6004      	str	r4, [r0, #0]
 80074ea:	60c4      	str	r4, [r0, #12]
 80074ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074f4:	b94c      	cbnz	r4, 800750a <__pow5mult+0x56>
 80074f6:	f240 2171 	movw	r1, #625	; 0x271
 80074fa:	4630      	mov	r0, r6
 80074fc:	f7ff ff3a 	bl	8007374 <__i2b>
 8007500:	2300      	movs	r3, #0
 8007502:	f8c8 0008 	str.w	r0, [r8, #8]
 8007506:	4604      	mov	r4, r0
 8007508:	6003      	str	r3, [r0, #0]
 800750a:	f04f 0800 	mov.w	r8, #0
 800750e:	07eb      	lsls	r3, r5, #31
 8007510:	d50a      	bpl.n	8007528 <__pow5mult+0x74>
 8007512:	4639      	mov	r1, r7
 8007514:	4622      	mov	r2, r4
 8007516:	4630      	mov	r0, r6
 8007518:	f7ff ff35 	bl	8007386 <__multiply>
 800751c:	4639      	mov	r1, r7
 800751e:	4681      	mov	r9, r0
 8007520:	4630      	mov	r0, r6
 8007522:	f7ff fe87 	bl	8007234 <_Bfree>
 8007526:	464f      	mov	r7, r9
 8007528:	106d      	asrs	r5, r5, #1
 800752a:	d00b      	beq.n	8007544 <__pow5mult+0x90>
 800752c:	6820      	ldr	r0, [r4, #0]
 800752e:	b938      	cbnz	r0, 8007540 <__pow5mult+0x8c>
 8007530:	4622      	mov	r2, r4
 8007532:	4621      	mov	r1, r4
 8007534:	4630      	mov	r0, r6
 8007536:	f7ff ff26 	bl	8007386 <__multiply>
 800753a:	6020      	str	r0, [r4, #0]
 800753c:	f8c0 8000 	str.w	r8, [r0]
 8007540:	4604      	mov	r4, r0
 8007542:	e7e4      	b.n	800750e <__pow5mult+0x5a>
 8007544:	4638      	mov	r0, r7
 8007546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800754a:	bf00      	nop
 800754c:	08009088 	.word	0x08009088

08007550 <__lshift>:
 8007550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	460c      	mov	r4, r1
 8007556:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800755a:	6923      	ldr	r3, [r4, #16]
 800755c:	6849      	ldr	r1, [r1, #4]
 800755e:	eb0a 0903 	add.w	r9, sl, r3
 8007562:	68a3      	ldr	r3, [r4, #8]
 8007564:	4607      	mov	r7, r0
 8007566:	4616      	mov	r6, r2
 8007568:	f109 0501 	add.w	r5, r9, #1
 800756c:	42ab      	cmp	r3, r5
 800756e:	db32      	blt.n	80075d6 <__lshift+0x86>
 8007570:	4638      	mov	r0, r7
 8007572:	f7ff fe2b 	bl	80071cc <_Balloc>
 8007576:	2300      	movs	r3, #0
 8007578:	4680      	mov	r8, r0
 800757a:	f100 0114 	add.w	r1, r0, #20
 800757e:	461a      	mov	r2, r3
 8007580:	4553      	cmp	r3, sl
 8007582:	db2b      	blt.n	80075dc <__lshift+0x8c>
 8007584:	6920      	ldr	r0, [r4, #16]
 8007586:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800758a:	f104 0314 	add.w	r3, r4, #20
 800758e:	f016 021f 	ands.w	r2, r6, #31
 8007592:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007596:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800759a:	d025      	beq.n	80075e8 <__lshift+0x98>
 800759c:	f1c2 0e20 	rsb	lr, r2, #32
 80075a0:	2000      	movs	r0, #0
 80075a2:	681e      	ldr	r6, [r3, #0]
 80075a4:	468a      	mov	sl, r1
 80075a6:	4096      	lsls	r6, r2
 80075a8:	4330      	orrs	r0, r6
 80075aa:	f84a 0b04 	str.w	r0, [sl], #4
 80075ae:	f853 0b04 	ldr.w	r0, [r3], #4
 80075b2:	459c      	cmp	ip, r3
 80075b4:	fa20 f00e 	lsr.w	r0, r0, lr
 80075b8:	d814      	bhi.n	80075e4 <__lshift+0x94>
 80075ba:	6048      	str	r0, [r1, #4]
 80075bc:	b108      	cbz	r0, 80075c2 <__lshift+0x72>
 80075be:	f109 0502 	add.w	r5, r9, #2
 80075c2:	3d01      	subs	r5, #1
 80075c4:	4638      	mov	r0, r7
 80075c6:	f8c8 5010 	str.w	r5, [r8, #16]
 80075ca:	4621      	mov	r1, r4
 80075cc:	f7ff fe32 	bl	8007234 <_Bfree>
 80075d0:	4640      	mov	r0, r8
 80075d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d6:	3101      	adds	r1, #1
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	e7c7      	b.n	800756c <__lshift+0x1c>
 80075dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80075e0:	3301      	adds	r3, #1
 80075e2:	e7cd      	b.n	8007580 <__lshift+0x30>
 80075e4:	4651      	mov	r1, sl
 80075e6:	e7dc      	b.n	80075a2 <__lshift+0x52>
 80075e8:	3904      	subs	r1, #4
 80075ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80075f2:	459c      	cmp	ip, r3
 80075f4:	d8f9      	bhi.n	80075ea <__lshift+0x9a>
 80075f6:	e7e4      	b.n	80075c2 <__lshift+0x72>

080075f8 <__mcmp>:
 80075f8:	6903      	ldr	r3, [r0, #16]
 80075fa:	690a      	ldr	r2, [r1, #16]
 80075fc:	1a9b      	subs	r3, r3, r2
 80075fe:	b530      	push	{r4, r5, lr}
 8007600:	d10c      	bne.n	800761c <__mcmp+0x24>
 8007602:	0092      	lsls	r2, r2, #2
 8007604:	3014      	adds	r0, #20
 8007606:	3114      	adds	r1, #20
 8007608:	1884      	adds	r4, r0, r2
 800760a:	4411      	add	r1, r2
 800760c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007610:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007614:	4295      	cmp	r5, r2
 8007616:	d003      	beq.n	8007620 <__mcmp+0x28>
 8007618:	d305      	bcc.n	8007626 <__mcmp+0x2e>
 800761a:	2301      	movs	r3, #1
 800761c:	4618      	mov	r0, r3
 800761e:	bd30      	pop	{r4, r5, pc}
 8007620:	42a0      	cmp	r0, r4
 8007622:	d3f3      	bcc.n	800760c <__mcmp+0x14>
 8007624:	e7fa      	b.n	800761c <__mcmp+0x24>
 8007626:	f04f 33ff 	mov.w	r3, #4294967295
 800762a:	e7f7      	b.n	800761c <__mcmp+0x24>

0800762c <__mdiff>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	460d      	mov	r5, r1
 8007632:	4607      	mov	r7, r0
 8007634:	4611      	mov	r1, r2
 8007636:	4628      	mov	r0, r5
 8007638:	4614      	mov	r4, r2
 800763a:	f7ff ffdd 	bl	80075f8 <__mcmp>
 800763e:	1e06      	subs	r6, r0, #0
 8007640:	d108      	bne.n	8007654 <__mdiff+0x28>
 8007642:	4631      	mov	r1, r6
 8007644:	4638      	mov	r0, r7
 8007646:	f7ff fdc1 	bl	80071cc <_Balloc>
 800764a:	2301      	movs	r3, #1
 800764c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007654:	bfa4      	itt	ge
 8007656:	4623      	movge	r3, r4
 8007658:	462c      	movge	r4, r5
 800765a:	4638      	mov	r0, r7
 800765c:	6861      	ldr	r1, [r4, #4]
 800765e:	bfa6      	itte	ge
 8007660:	461d      	movge	r5, r3
 8007662:	2600      	movge	r6, #0
 8007664:	2601      	movlt	r6, #1
 8007666:	f7ff fdb1 	bl	80071cc <_Balloc>
 800766a:	692b      	ldr	r3, [r5, #16]
 800766c:	60c6      	str	r6, [r0, #12]
 800766e:	6926      	ldr	r6, [r4, #16]
 8007670:	f105 0914 	add.w	r9, r5, #20
 8007674:	f104 0214 	add.w	r2, r4, #20
 8007678:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800767c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007680:	f100 0514 	add.w	r5, r0, #20
 8007684:	f04f 0e00 	mov.w	lr, #0
 8007688:	f852 ab04 	ldr.w	sl, [r2], #4
 800768c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007690:	fa1e f18a 	uxtah	r1, lr, sl
 8007694:	b2a3      	uxth	r3, r4
 8007696:	1ac9      	subs	r1, r1, r3
 8007698:	0c23      	lsrs	r3, r4, #16
 800769a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800769e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80076a2:	b289      	uxth	r1, r1
 80076a4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80076a8:	45c8      	cmp	r8, r9
 80076aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80076ae:	4694      	mov	ip, r2
 80076b0:	f845 3b04 	str.w	r3, [r5], #4
 80076b4:	d8e8      	bhi.n	8007688 <__mdiff+0x5c>
 80076b6:	45bc      	cmp	ip, r7
 80076b8:	d304      	bcc.n	80076c4 <__mdiff+0x98>
 80076ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80076be:	b183      	cbz	r3, 80076e2 <__mdiff+0xb6>
 80076c0:	6106      	str	r6, [r0, #16]
 80076c2:	e7c5      	b.n	8007650 <__mdiff+0x24>
 80076c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80076c8:	fa1e f381 	uxtah	r3, lr, r1
 80076cc:	141a      	asrs	r2, r3, #16
 80076ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076d8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80076dc:	f845 3b04 	str.w	r3, [r5], #4
 80076e0:	e7e9      	b.n	80076b6 <__mdiff+0x8a>
 80076e2:	3e01      	subs	r6, #1
 80076e4:	e7e9      	b.n	80076ba <__mdiff+0x8e>

080076e6 <__d2b>:
 80076e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076ea:	460e      	mov	r6, r1
 80076ec:	2101      	movs	r1, #1
 80076ee:	ec59 8b10 	vmov	r8, r9, d0
 80076f2:	4615      	mov	r5, r2
 80076f4:	f7ff fd6a 	bl	80071cc <_Balloc>
 80076f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80076fc:	4607      	mov	r7, r0
 80076fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007702:	bb34      	cbnz	r4, 8007752 <__d2b+0x6c>
 8007704:	9301      	str	r3, [sp, #4]
 8007706:	f1b8 0300 	subs.w	r3, r8, #0
 800770a:	d027      	beq.n	800775c <__d2b+0x76>
 800770c:	a802      	add	r0, sp, #8
 800770e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007712:	f7ff fe00 	bl	8007316 <__lo0bits>
 8007716:	9900      	ldr	r1, [sp, #0]
 8007718:	b1f0      	cbz	r0, 8007758 <__d2b+0x72>
 800771a:	9a01      	ldr	r2, [sp, #4]
 800771c:	f1c0 0320 	rsb	r3, r0, #32
 8007720:	fa02 f303 	lsl.w	r3, r2, r3
 8007724:	430b      	orrs	r3, r1
 8007726:	40c2      	lsrs	r2, r0
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	9201      	str	r2, [sp, #4]
 800772c:	9b01      	ldr	r3, [sp, #4]
 800772e:	61bb      	str	r3, [r7, #24]
 8007730:	2b00      	cmp	r3, #0
 8007732:	bf14      	ite	ne
 8007734:	2102      	movne	r1, #2
 8007736:	2101      	moveq	r1, #1
 8007738:	6139      	str	r1, [r7, #16]
 800773a:	b1c4      	cbz	r4, 800776e <__d2b+0x88>
 800773c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007740:	4404      	add	r4, r0
 8007742:	6034      	str	r4, [r6, #0]
 8007744:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007748:	6028      	str	r0, [r5, #0]
 800774a:	4638      	mov	r0, r7
 800774c:	b003      	add	sp, #12
 800774e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007756:	e7d5      	b.n	8007704 <__d2b+0x1e>
 8007758:	6179      	str	r1, [r7, #20]
 800775a:	e7e7      	b.n	800772c <__d2b+0x46>
 800775c:	a801      	add	r0, sp, #4
 800775e:	f7ff fdda 	bl	8007316 <__lo0bits>
 8007762:	9b01      	ldr	r3, [sp, #4]
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	2101      	movs	r1, #1
 8007768:	6139      	str	r1, [r7, #16]
 800776a:	3020      	adds	r0, #32
 800776c:	e7e5      	b.n	800773a <__d2b+0x54>
 800776e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007772:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007776:	6030      	str	r0, [r6, #0]
 8007778:	6918      	ldr	r0, [r3, #16]
 800777a:	f7ff fdad 	bl	80072d8 <__hi0bits>
 800777e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007782:	e7e1      	b.n	8007748 <__d2b+0x62>

08007784 <_calloc_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	fb02 f401 	mul.w	r4, r2, r1
 800778a:	4621      	mov	r1, r4
 800778c:	f7fe f8ac 	bl	80058e8 <_malloc_r>
 8007790:	4605      	mov	r5, r0
 8007792:	b118      	cbz	r0, 800779c <_calloc_r+0x18>
 8007794:	4622      	mov	r2, r4
 8007796:	2100      	movs	r1, #0
 8007798:	f7fe f89d 	bl	80058d6 <memset>
 800779c:	4628      	mov	r0, r5
 800779e:	bd38      	pop	{r3, r4, r5, pc}

080077a0 <_free_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4605      	mov	r5, r0
 80077a4:	2900      	cmp	r1, #0
 80077a6:	d045      	beq.n	8007834 <_free_r+0x94>
 80077a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ac:	1f0c      	subs	r4, r1, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bfb8      	it	lt
 80077b2:	18e4      	addlt	r4, r4, r3
 80077b4:	f7ff fd08 	bl	80071c8 <__malloc_lock>
 80077b8:	4a1f      	ldr	r2, [pc, #124]	; (8007838 <_free_r+0x98>)
 80077ba:	6813      	ldr	r3, [r2, #0]
 80077bc:	4610      	mov	r0, r2
 80077be:	b933      	cbnz	r3, 80077ce <_free_r+0x2e>
 80077c0:	6063      	str	r3, [r4, #4]
 80077c2:	6014      	str	r4, [r2, #0]
 80077c4:	4628      	mov	r0, r5
 80077c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077ca:	f7ff bcfe 	b.w	80071ca <__malloc_unlock>
 80077ce:	42a3      	cmp	r3, r4
 80077d0:	d90c      	bls.n	80077ec <_free_r+0x4c>
 80077d2:	6821      	ldr	r1, [r4, #0]
 80077d4:	1862      	adds	r2, r4, r1
 80077d6:	4293      	cmp	r3, r2
 80077d8:	bf04      	itt	eq
 80077da:	681a      	ldreq	r2, [r3, #0]
 80077dc:	685b      	ldreq	r3, [r3, #4]
 80077de:	6063      	str	r3, [r4, #4]
 80077e0:	bf04      	itt	eq
 80077e2:	1852      	addeq	r2, r2, r1
 80077e4:	6022      	streq	r2, [r4, #0]
 80077e6:	6004      	str	r4, [r0, #0]
 80077e8:	e7ec      	b.n	80077c4 <_free_r+0x24>
 80077ea:	4613      	mov	r3, r2
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	b10a      	cbz	r2, 80077f4 <_free_r+0x54>
 80077f0:	42a2      	cmp	r2, r4
 80077f2:	d9fa      	bls.n	80077ea <_free_r+0x4a>
 80077f4:	6819      	ldr	r1, [r3, #0]
 80077f6:	1858      	adds	r0, r3, r1
 80077f8:	42a0      	cmp	r0, r4
 80077fa:	d10b      	bne.n	8007814 <_free_r+0x74>
 80077fc:	6820      	ldr	r0, [r4, #0]
 80077fe:	4401      	add	r1, r0
 8007800:	1858      	adds	r0, r3, r1
 8007802:	4282      	cmp	r2, r0
 8007804:	6019      	str	r1, [r3, #0]
 8007806:	d1dd      	bne.n	80077c4 <_free_r+0x24>
 8007808:	6810      	ldr	r0, [r2, #0]
 800780a:	6852      	ldr	r2, [r2, #4]
 800780c:	605a      	str	r2, [r3, #4]
 800780e:	4401      	add	r1, r0
 8007810:	6019      	str	r1, [r3, #0]
 8007812:	e7d7      	b.n	80077c4 <_free_r+0x24>
 8007814:	d902      	bls.n	800781c <_free_r+0x7c>
 8007816:	230c      	movs	r3, #12
 8007818:	602b      	str	r3, [r5, #0]
 800781a:	e7d3      	b.n	80077c4 <_free_r+0x24>
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	1821      	adds	r1, r4, r0
 8007820:	428a      	cmp	r2, r1
 8007822:	bf04      	itt	eq
 8007824:	6811      	ldreq	r1, [r2, #0]
 8007826:	6852      	ldreq	r2, [r2, #4]
 8007828:	6062      	str	r2, [r4, #4]
 800782a:	bf04      	itt	eq
 800782c:	1809      	addeq	r1, r1, r0
 800782e:	6021      	streq	r1, [r4, #0]
 8007830:	605c      	str	r4, [r3, #4]
 8007832:	e7c7      	b.n	80077c4 <_free_r+0x24>
 8007834:	bd38      	pop	{r3, r4, r5, pc}
 8007836:	bf00      	nop
 8007838:	200003b4 	.word	0x200003b4

0800783c <__ssputs_r>:
 800783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007840:	688e      	ldr	r6, [r1, #8]
 8007842:	429e      	cmp	r6, r3
 8007844:	4682      	mov	sl, r0
 8007846:	460c      	mov	r4, r1
 8007848:	4690      	mov	r8, r2
 800784a:	4699      	mov	r9, r3
 800784c:	d837      	bhi.n	80078be <__ssputs_r+0x82>
 800784e:	898a      	ldrh	r2, [r1, #12]
 8007850:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007854:	d031      	beq.n	80078ba <__ssputs_r+0x7e>
 8007856:	6825      	ldr	r5, [r4, #0]
 8007858:	6909      	ldr	r1, [r1, #16]
 800785a:	1a6f      	subs	r7, r5, r1
 800785c:	6965      	ldr	r5, [r4, #20]
 800785e:	2302      	movs	r3, #2
 8007860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007864:	fb95 f5f3 	sdiv	r5, r5, r3
 8007868:	f109 0301 	add.w	r3, r9, #1
 800786c:	443b      	add	r3, r7
 800786e:	429d      	cmp	r5, r3
 8007870:	bf38      	it	cc
 8007872:	461d      	movcc	r5, r3
 8007874:	0553      	lsls	r3, r2, #21
 8007876:	d530      	bpl.n	80078da <__ssputs_r+0x9e>
 8007878:	4629      	mov	r1, r5
 800787a:	f7fe f835 	bl	80058e8 <_malloc_r>
 800787e:	4606      	mov	r6, r0
 8007880:	b950      	cbnz	r0, 8007898 <__ssputs_r+0x5c>
 8007882:	230c      	movs	r3, #12
 8007884:	f8ca 3000 	str.w	r3, [sl]
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800788e:	81a3      	strh	r3, [r4, #12]
 8007890:	f04f 30ff 	mov.w	r0, #4294967295
 8007894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007898:	463a      	mov	r2, r7
 800789a:	6921      	ldr	r1, [r4, #16]
 800789c:	f7fe f810 	bl	80058c0 <memcpy>
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078aa:	81a3      	strh	r3, [r4, #12]
 80078ac:	6126      	str	r6, [r4, #16]
 80078ae:	6165      	str	r5, [r4, #20]
 80078b0:	443e      	add	r6, r7
 80078b2:	1bed      	subs	r5, r5, r7
 80078b4:	6026      	str	r6, [r4, #0]
 80078b6:	60a5      	str	r5, [r4, #8]
 80078b8:	464e      	mov	r6, r9
 80078ba:	454e      	cmp	r6, r9
 80078bc:	d900      	bls.n	80078c0 <__ssputs_r+0x84>
 80078be:	464e      	mov	r6, r9
 80078c0:	4632      	mov	r2, r6
 80078c2:	4641      	mov	r1, r8
 80078c4:	6820      	ldr	r0, [r4, #0]
 80078c6:	f000 f92f 	bl	8007b28 <memmove>
 80078ca:	68a3      	ldr	r3, [r4, #8]
 80078cc:	1b9b      	subs	r3, r3, r6
 80078ce:	60a3      	str	r3, [r4, #8]
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	441e      	add	r6, r3
 80078d4:	6026      	str	r6, [r4, #0]
 80078d6:	2000      	movs	r0, #0
 80078d8:	e7dc      	b.n	8007894 <__ssputs_r+0x58>
 80078da:	462a      	mov	r2, r5
 80078dc:	f000 f93d 	bl	8007b5a <_realloc_r>
 80078e0:	4606      	mov	r6, r0
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d1e2      	bne.n	80078ac <__ssputs_r+0x70>
 80078e6:	6921      	ldr	r1, [r4, #16]
 80078e8:	4650      	mov	r0, sl
 80078ea:	f7ff ff59 	bl	80077a0 <_free_r>
 80078ee:	e7c8      	b.n	8007882 <__ssputs_r+0x46>

080078f0 <_svfiprintf_r>:
 80078f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	461d      	mov	r5, r3
 80078f6:	898b      	ldrh	r3, [r1, #12]
 80078f8:	061f      	lsls	r7, r3, #24
 80078fa:	b09d      	sub	sp, #116	; 0x74
 80078fc:	4680      	mov	r8, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	4616      	mov	r6, r2
 8007902:	d50f      	bpl.n	8007924 <_svfiprintf_r+0x34>
 8007904:	690b      	ldr	r3, [r1, #16]
 8007906:	b96b      	cbnz	r3, 8007924 <_svfiprintf_r+0x34>
 8007908:	2140      	movs	r1, #64	; 0x40
 800790a:	f7fd ffed 	bl	80058e8 <_malloc_r>
 800790e:	6020      	str	r0, [r4, #0]
 8007910:	6120      	str	r0, [r4, #16]
 8007912:	b928      	cbnz	r0, 8007920 <_svfiprintf_r+0x30>
 8007914:	230c      	movs	r3, #12
 8007916:	f8c8 3000 	str.w	r3, [r8]
 800791a:	f04f 30ff 	mov.w	r0, #4294967295
 800791e:	e0c8      	b.n	8007ab2 <_svfiprintf_r+0x1c2>
 8007920:	2340      	movs	r3, #64	; 0x40
 8007922:	6163      	str	r3, [r4, #20]
 8007924:	2300      	movs	r3, #0
 8007926:	9309      	str	r3, [sp, #36]	; 0x24
 8007928:	2320      	movs	r3, #32
 800792a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800792e:	2330      	movs	r3, #48	; 0x30
 8007930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007934:	9503      	str	r5, [sp, #12]
 8007936:	f04f 0b01 	mov.w	fp, #1
 800793a:	4637      	mov	r7, r6
 800793c:	463d      	mov	r5, r7
 800793e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007942:	b10b      	cbz	r3, 8007948 <_svfiprintf_r+0x58>
 8007944:	2b25      	cmp	r3, #37	; 0x25
 8007946:	d13e      	bne.n	80079c6 <_svfiprintf_r+0xd6>
 8007948:	ebb7 0a06 	subs.w	sl, r7, r6
 800794c:	d00b      	beq.n	8007966 <_svfiprintf_r+0x76>
 800794e:	4653      	mov	r3, sl
 8007950:	4632      	mov	r2, r6
 8007952:	4621      	mov	r1, r4
 8007954:	4640      	mov	r0, r8
 8007956:	f7ff ff71 	bl	800783c <__ssputs_r>
 800795a:	3001      	adds	r0, #1
 800795c:	f000 80a4 	beq.w	8007aa8 <_svfiprintf_r+0x1b8>
 8007960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007962:	4453      	add	r3, sl
 8007964:	9309      	str	r3, [sp, #36]	; 0x24
 8007966:	783b      	ldrb	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 809d 	beq.w	8007aa8 <_svfiprintf_r+0x1b8>
 800796e:	2300      	movs	r3, #0
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007978:	9304      	str	r3, [sp, #16]
 800797a:	9307      	str	r3, [sp, #28]
 800797c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007980:	931a      	str	r3, [sp, #104]	; 0x68
 8007982:	462f      	mov	r7, r5
 8007984:	2205      	movs	r2, #5
 8007986:	f817 1b01 	ldrb.w	r1, [r7], #1
 800798a:	4850      	ldr	r0, [pc, #320]	; (8007acc <_svfiprintf_r+0x1dc>)
 800798c:	f7f8 fc28 	bl	80001e0 <memchr>
 8007990:	9b04      	ldr	r3, [sp, #16]
 8007992:	b9d0      	cbnz	r0, 80079ca <_svfiprintf_r+0xda>
 8007994:	06d9      	lsls	r1, r3, #27
 8007996:	bf44      	itt	mi
 8007998:	2220      	movmi	r2, #32
 800799a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800799e:	071a      	lsls	r2, r3, #28
 80079a0:	bf44      	itt	mi
 80079a2:	222b      	movmi	r2, #43	; 0x2b
 80079a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079a8:	782a      	ldrb	r2, [r5, #0]
 80079aa:	2a2a      	cmp	r2, #42	; 0x2a
 80079ac:	d015      	beq.n	80079da <_svfiprintf_r+0xea>
 80079ae:	9a07      	ldr	r2, [sp, #28]
 80079b0:	462f      	mov	r7, r5
 80079b2:	2000      	movs	r0, #0
 80079b4:	250a      	movs	r5, #10
 80079b6:	4639      	mov	r1, r7
 80079b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079bc:	3b30      	subs	r3, #48	; 0x30
 80079be:	2b09      	cmp	r3, #9
 80079c0:	d94d      	bls.n	8007a5e <_svfiprintf_r+0x16e>
 80079c2:	b1b8      	cbz	r0, 80079f4 <_svfiprintf_r+0x104>
 80079c4:	e00f      	b.n	80079e6 <_svfiprintf_r+0xf6>
 80079c6:	462f      	mov	r7, r5
 80079c8:	e7b8      	b.n	800793c <_svfiprintf_r+0x4c>
 80079ca:	4a40      	ldr	r2, [pc, #256]	; (8007acc <_svfiprintf_r+0x1dc>)
 80079cc:	1a80      	subs	r0, r0, r2
 80079ce:	fa0b f000 	lsl.w	r0, fp, r0
 80079d2:	4318      	orrs	r0, r3
 80079d4:	9004      	str	r0, [sp, #16]
 80079d6:	463d      	mov	r5, r7
 80079d8:	e7d3      	b.n	8007982 <_svfiprintf_r+0x92>
 80079da:	9a03      	ldr	r2, [sp, #12]
 80079dc:	1d11      	adds	r1, r2, #4
 80079de:	6812      	ldr	r2, [r2, #0]
 80079e0:	9103      	str	r1, [sp, #12]
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	db01      	blt.n	80079ea <_svfiprintf_r+0xfa>
 80079e6:	9207      	str	r2, [sp, #28]
 80079e8:	e004      	b.n	80079f4 <_svfiprintf_r+0x104>
 80079ea:	4252      	negs	r2, r2
 80079ec:	f043 0302 	orr.w	r3, r3, #2
 80079f0:	9207      	str	r2, [sp, #28]
 80079f2:	9304      	str	r3, [sp, #16]
 80079f4:	783b      	ldrb	r3, [r7, #0]
 80079f6:	2b2e      	cmp	r3, #46	; 0x2e
 80079f8:	d10c      	bne.n	8007a14 <_svfiprintf_r+0x124>
 80079fa:	787b      	ldrb	r3, [r7, #1]
 80079fc:	2b2a      	cmp	r3, #42	; 0x2a
 80079fe:	d133      	bne.n	8007a68 <_svfiprintf_r+0x178>
 8007a00:	9b03      	ldr	r3, [sp, #12]
 8007a02:	1d1a      	adds	r2, r3, #4
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	9203      	str	r2, [sp, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	bfb8      	it	lt
 8007a0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a10:	3702      	adds	r7, #2
 8007a12:	9305      	str	r3, [sp, #20]
 8007a14:	4d2e      	ldr	r5, [pc, #184]	; (8007ad0 <_svfiprintf_r+0x1e0>)
 8007a16:	7839      	ldrb	r1, [r7, #0]
 8007a18:	2203      	movs	r2, #3
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f7f8 fbe0 	bl	80001e0 <memchr>
 8007a20:	b138      	cbz	r0, 8007a32 <_svfiprintf_r+0x142>
 8007a22:	2340      	movs	r3, #64	; 0x40
 8007a24:	1b40      	subs	r0, r0, r5
 8007a26:	fa03 f000 	lsl.w	r0, r3, r0
 8007a2a:	9b04      	ldr	r3, [sp, #16]
 8007a2c:	4303      	orrs	r3, r0
 8007a2e:	3701      	adds	r7, #1
 8007a30:	9304      	str	r3, [sp, #16]
 8007a32:	7839      	ldrb	r1, [r7, #0]
 8007a34:	4827      	ldr	r0, [pc, #156]	; (8007ad4 <_svfiprintf_r+0x1e4>)
 8007a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a3a:	2206      	movs	r2, #6
 8007a3c:	1c7e      	adds	r6, r7, #1
 8007a3e:	f7f8 fbcf 	bl	80001e0 <memchr>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d038      	beq.n	8007ab8 <_svfiprintf_r+0x1c8>
 8007a46:	4b24      	ldr	r3, [pc, #144]	; (8007ad8 <_svfiprintf_r+0x1e8>)
 8007a48:	bb13      	cbnz	r3, 8007a90 <_svfiprintf_r+0x1a0>
 8007a4a:	9b03      	ldr	r3, [sp, #12]
 8007a4c:	3307      	adds	r3, #7
 8007a4e:	f023 0307 	bic.w	r3, r3, #7
 8007a52:	3308      	adds	r3, #8
 8007a54:	9303      	str	r3, [sp, #12]
 8007a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a58:	444b      	add	r3, r9
 8007a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5c:	e76d      	b.n	800793a <_svfiprintf_r+0x4a>
 8007a5e:	fb05 3202 	mla	r2, r5, r2, r3
 8007a62:	2001      	movs	r0, #1
 8007a64:	460f      	mov	r7, r1
 8007a66:	e7a6      	b.n	80079b6 <_svfiprintf_r+0xc6>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	3701      	adds	r7, #1
 8007a6c:	9305      	str	r3, [sp, #20]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	250a      	movs	r5, #10
 8007a72:	4638      	mov	r0, r7
 8007a74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a78:	3a30      	subs	r2, #48	; 0x30
 8007a7a:	2a09      	cmp	r2, #9
 8007a7c:	d903      	bls.n	8007a86 <_svfiprintf_r+0x196>
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0c8      	beq.n	8007a14 <_svfiprintf_r+0x124>
 8007a82:	9105      	str	r1, [sp, #20]
 8007a84:	e7c6      	b.n	8007a14 <_svfiprintf_r+0x124>
 8007a86:	fb05 2101 	mla	r1, r5, r1, r2
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	4607      	mov	r7, r0
 8007a8e:	e7f0      	b.n	8007a72 <_svfiprintf_r+0x182>
 8007a90:	ab03      	add	r3, sp, #12
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	4622      	mov	r2, r4
 8007a96:	4b11      	ldr	r3, [pc, #68]	; (8007adc <_svfiprintf_r+0x1ec>)
 8007a98:	a904      	add	r1, sp, #16
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	f7fe f812 	bl	8005ac4 <_printf_float>
 8007aa0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007aa4:	4681      	mov	r9, r0
 8007aa6:	d1d6      	bne.n	8007a56 <_svfiprintf_r+0x166>
 8007aa8:	89a3      	ldrh	r3, [r4, #12]
 8007aaa:	065b      	lsls	r3, r3, #25
 8007aac:	f53f af35 	bmi.w	800791a <_svfiprintf_r+0x2a>
 8007ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ab2:	b01d      	add	sp, #116	; 0x74
 8007ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab8:	ab03      	add	r3, sp, #12
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	4622      	mov	r2, r4
 8007abe:	4b07      	ldr	r3, [pc, #28]	; (8007adc <_svfiprintf_r+0x1ec>)
 8007ac0:	a904      	add	r1, sp, #16
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	f7fe fab4 	bl	8006030 <_printf_i>
 8007ac8:	e7ea      	b.n	8007aa0 <_svfiprintf_r+0x1b0>
 8007aca:	bf00      	nop
 8007acc:	08009094 	.word	0x08009094
 8007ad0:	0800909a 	.word	0x0800909a
 8007ad4:	0800909e 	.word	0x0800909e
 8007ad8:	08005ac5 	.word	0x08005ac5
 8007adc:	0800783d 	.word	0x0800783d

08007ae0 <_read_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4c07      	ldr	r4, [pc, #28]	; (8007b00 <_read_r+0x20>)
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	4608      	mov	r0, r1
 8007ae8:	4611      	mov	r1, r2
 8007aea:	2200      	movs	r2, #0
 8007aec:	6022      	str	r2, [r4, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	f7fd fbbc 	bl	800526c <_read>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d102      	bne.n	8007afe <_read_r+0x1e>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	b103      	cbz	r3, 8007afe <_read_r+0x1e>
 8007afc:	602b      	str	r3, [r5, #0]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	2000050c 	.word	0x2000050c

08007b04 <__ascii_mbtowc>:
 8007b04:	b082      	sub	sp, #8
 8007b06:	b901      	cbnz	r1, 8007b0a <__ascii_mbtowc+0x6>
 8007b08:	a901      	add	r1, sp, #4
 8007b0a:	b142      	cbz	r2, 8007b1e <__ascii_mbtowc+0x1a>
 8007b0c:	b14b      	cbz	r3, 8007b22 <__ascii_mbtowc+0x1e>
 8007b0e:	7813      	ldrb	r3, [r2, #0]
 8007b10:	600b      	str	r3, [r1, #0]
 8007b12:	7812      	ldrb	r2, [r2, #0]
 8007b14:	1c10      	adds	r0, r2, #0
 8007b16:	bf18      	it	ne
 8007b18:	2001      	movne	r0, #1
 8007b1a:	b002      	add	sp, #8
 8007b1c:	4770      	bx	lr
 8007b1e:	4610      	mov	r0, r2
 8007b20:	e7fb      	b.n	8007b1a <__ascii_mbtowc+0x16>
 8007b22:	f06f 0001 	mvn.w	r0, #1
 8007b26:	e7f8      	b.n	8007b1a <__ascii_mbtowc+0x16>

08007b28 <memmove>:
 8007b28:	4288      	cmp	r0, r1
 8007b2a:	b510      	push	{r4, lr}
 8007b2c:	eb01 0302 	add.w	r3, r1, r2
 8007b30:	d807      	bhi.n	8007b42 <memmove+0x1a>
 8007b32:	1e42      	subs	r2, r0, #1
 8007b34:	4299      	cmp	r1, r3
 8007b36:	d00a      	beq.n	8007b4e <memmove+0x26>
 8007b38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b3c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007b40:	e7f8      	b.n	8007b34 <memmove+0xc>
 8007b42:	4283      	cmp	r3, r0
 8007b44:	d9f5      	bls.n	8007b32 <memmove+0xa>
 8007b46:	1881      	adds	r1, r0, r2
 8007b48:	1ad2      	subs	r2, r2, r3
 8007b4a:	42d3      	cmn	r3, r2
 8007b4c:	d100      	bne.n	8007b50 <memmove+0x28>
 8007b4e:	bd10      	pop	{r4, pc}
 8007b50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007b58:	e7f7      	b.n	8007b4a <memmove+0x22>

08007b5a <_realloc_r>:
 8007b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5c:	4607      	mov	r7, r0
 8007b5e:	4614      	mov	r4, r2
 8007b60:	460e      	mov	r6, r1
 8007b62:	b921      	cbnz	r1, 8007b6e <_realloc_r+0x14>
 8007b64:	4611      	mov	r1, r2
 8007b66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b6a:	f7fd bebd 	b.w	80058e8 <_malloc_r>
 8007b6e:	b922      	cbnz	r2, 8007b7a <_realloc_r+0x20>
 8007b70:	f7ff fe16 	bl	80077a0 <_free_r>
 8007b74:	4625      	mov	r5, r4
 8007b76:	4628      	mov	r0, r5
 8007b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b7a:	f000 f821 	bl	8007bc0 <_malloc_usable_size_r>
 8007b7e:	42a0      	cmp	r0, r4
 8007b80:	d20f      	bcs.n	8007ba2 <_realloc_r+0x48>
 8007b82:	4621      	mov	r1, r4
 8007b84:	4638      	mov	r0, r7
 8007b86:	f7fd feaf 	bl	80058e8 <_malloc_r>
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d0f2      	beq.n	8007b76 <_realloc_r+0x1c>
 8007b90:	4631      	mov	r1, r6
 8007b92:	4622      	mov	r2, r4
 8007b94:	f7fd fe94 	bl	80058c0 <memcpy>
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	f7ff fe00 	bl	80077a0 <_free_r>
 8007ba0:	e7e9      	b.n	8007b76 <_realloc_r+0x1c>
 8007ba2:	4635      	mov	r5, r6
 8007ba4:	e7e7      	b.n	8007b76 <_realloc_r+0x1c>

08007ba6 <__ascii_wctomb>:
 8007ba6:	b149      	cbz	r1, 8007bbc <__ascii_wctomb+0x16>
 8007ba8:	2aff      	cmp	r2, #255	; 0xff
 8007baa:	bf85      	ittet	hi
 8007bac:	238a      	movhi	r3, #138	; 0x8a
 8007bae:	6003      	strhi	r3, [r0, #0]
 8007bb0:	700a      	strbls	r2, [r1, #0]
 8007bb2:	f04f 30ff 	movhi.w	r0, #4294967295
 8007bb6:	bf98      	it	ls
 8007bb8:	2001      	movls	r0, #1
 8007bba:	4770      	bx	lr
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	4770      	bx	lr

08007bc0 <_malloc_usable_size_r>:
 8007bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc4:	1f18      	subs	r0, r3, #4
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfbc      	itt	lt
 8007bca:	580b      	ldrlt	r3, [r1, r0]
 8007bcc:	18c0      	addlt	r0, r0, r3
 8007bce:	4770      	bx	lr

08007bd0 <pow>:
 8007bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	ed2d 8b04 	vpush	{d8-d9}
 8007bd8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007eac <pow+0x2dc>
 8007bdc:	b08d      	sub	sp, #52	; 0x34
 8007bde:	ec57 6b10 	vmov	r6, r7, d0
 8007be2:	ec55 4b11 	vmov	r4, r5, d1
 8007be6:	f000 f9bf 	bl	8007f68 <__ieee754_pow>
 8007bea:	f999 3000 	ldrsb.w	r3, [r9]
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	eeb0 8a40 	vmov.f32	s16, s0
 8007bf6:	eef0 8a60 	vmov.f32	s17, s1
 8007bfa:	46c8      	mov	r8, r9
 8007bfc:	d05f      	beq.n	8007cbe <pow+0xee>
 8007bfe:	4622      	mov	r2, r4
 8007c00:	462b      	mov	r3, r5
 8007c02:	4620      	mov	r0, r4
 8007c04:	4629      	mov	r1, r5
 8007c06:	f7f8 ff91 	bl	8000b2c <__aeabi_dcmpun>
 8007c0a:	4683      	mov	fp, r0
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d156      	bne.n	8007cbe <pow+0xee>
 8007c10:	4632      	mov	r2, r6
 8007c12:	463b      	mov	r3, r7
 8007c14:	4630      	mov	r0, r6
 8007c16:	4639      	mov	r1, r7
 8007c18:	f7f8 ff88 	bl	8000b2c <__aeabi_dcmpun>
 8007c1c:	9001      	str	r0, [sp, #4]
 8007c1e:	b1e8      	cbz	r0, 8007c5c <pow+0x8c>
 8007c20:	2200      	movs	r2, #0
 8007c22:	2300      	movs	r3, #0
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 ff4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d046      	beq.n	8007cbe <pow+0xee>
 8007c30:	2301      	movs	r3, #1
 8007c32:	9302      	str	r3, [sp, #8]
 8007c34:	4b96      	ldr	r3, [pc, #600]	; (8007e90 <pow+0x2c0>)
 8007c36:	9303      	str	r3, [sp, #12]
 8007c38:	4b96      	ldr	r3, [pc, #600]	; (8007e94 <pow+0x2c4>)
 8007c3a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007c3e:	2200      	movs	r2, #0
 8007c40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c44:	9b00      	ldr	r3, [sp, #0]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007c4c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007c50:	d033      	beq.n	8007cba <pow+0xea>
 8007c52:	a802      	add	r0, sp, #8
 8007c54:	f000 ff57 	bl	8008b06 <matherr>
 8007c58:	bb48      	cbnz	r0, 8007cae <pow+0xde>
 8007c5a:	e05d      	b.n	8007d18 <pow+0x148>
 8007c5c:	f04f 0a00 	mov.w	sl, #0
 8007c60:	f04f 0b00 	mov.w	fp, #0
 8007c64:	4652      	mov	r2, sl
 8007c66:	465b      	mov	r3, fp
 8007c68:	4630      	mov	r0, r6
 8007c6a:	4639      	mov	r1, r7
 8007c6c:	f7f8 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c70:	ec4b ab19 	vmov	d9, sl, fp
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d054      	beq.n	8007d22 <pow+0x152>
 8007c78:	4652      	mov	r2, sl
 8007c7a:	465b      	mov	r3, fp
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	4629      	mov	r1, r5
 8007c80:	f7f8 ff22 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c84:	4680      	mov	r8, r0
 8007c86:	b318      	cbz	r0, 8007cd0 <pow+0x100>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	9302      	str	r3, [sp, #8]
 8007c8c:	4b80      	ldr	r3, [pc, #512]	; (8007e90 <pow+0x2c0>)
 8007c8e:	9303      	str	r3, [sp, #12]
 8007c90:	9b01      	ldr	r3, [sp, #4]
 8007c92:	930a      	str	r3, [sp, #40]	; 0x28
 8007c94:	9b00      	ldr	r3, [sp, #0]
 8007c96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007c9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007c9e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0d5      	beq.n	8007c52 <pow+0x82>
 8007ca6:	4b7b      	ldr	r3, [pc, #492]	; (8007e94 <pow+0x2c4>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb0:	b11b      	cbz	r3, 8007cba <pow+0xea>
 8007cb2:	f7fd fd11 	bl	80056d8 <__errno>
 8007cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb8:	6003      	str	r3, [r0, #0]
 8007cba:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007cbe:	eeb0 0a48 	vmov.f32	s0, s16
 8007cc2:	eef0 0a68 	vmov.f32	s1, s17
 8007cc6:	b00d      	add	sp, #52	; 0x34
 8007cc8:	ecbd 8b04 	vpop	{d8-d9}
 8007ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd0:	ec45 4b10 	vmov	d0, r4, r5
 8007cd4:	f000 ff0f 	bl	8008af6 <finite>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d0f0      	beq.n	8007cbe <pow+0xee>
 8007cdc:	4652      	mov	r2, sl
 8007cde:	465b      	mov	r3, fp
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	4629      	mov	r1, r5
 8007ce4:	f7f8 fefa 	bl	8000adc <__aeabi_dcmplt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d0e8      	beq.n	8007cbe <pow+0xee>
 8007cec:	2301      	movs	r3, #1
 8007cee:	9302      	str	r3, [sp, #8]
 8007cf0:	4b67      	ldr	r3, [pc, #412]	; (8007e90 <pow+0x2c0>)
 8007cf2:	9303      	str	r3, [sp, #12]
 8007cf4:	f999 3000 	ldrsb.w	r3, [r9]
 8007cf8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007cfc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007d00:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007d04:	b913      	cbnz	r3, 8007d0c <pow+0x13c>
 8007d06:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007d0a:	e7a2      	b.n	8007c52 <pow+0x82>
 8007d0c:	4962      	ldr	r1, [pc, #392]	; (8007e98 <pow+0x2c8>)
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d19c      	bne.n	8007c52 <pow+0x82>
 8007d18:	f7fd fcde 	bl	80056d8 <__errno>
 8007d1c:	2321      	movs	r3, #33	; 0x21
 8007d1e:	6003      	str	r3, [r0, #0]
 8007d20:	e7c5      	b.n	8007cae <pow+0xde>
 8007d22:	eeb0 0a48 	vmov.f32	s0, s16
 8007d26:	eef0 0a68 	vmov.f32	s1, s17
 8007d2a:	f000 fee4 	bl	8008af6 <finite>
 8007d2e:	9000      	str	r0, [sp, #0]
 8007d30:	2800      	cmp	r0, #0
 8007d32:	f040 8081 	bne.w	8007e38 <pow+0x268>
 8007d36:	ec47 6b10 	vmov	d0, r6, r7
 8007d3a:	f000 fedc 	bl	8008af6 <finite>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d07a      	beq.n	8007e38 <pow+0x268>
 8007d42:	ec45 4b10 	vmov	d0, r4, r5
 8007d46:	f000 fed6 	bl	8008af6 <finite>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d074      	beq.n	8007e38 <pow+0x268>
 8007d4e:	ec53 2b18 	vmov	r2, r3, d8
 8007d52:	ee18 0a10 	vmov	r0, s16
 8007d56:	4619      	mov	r1, r3
 8007d58:	f7f8 fee8 	bl	8000b2c <__aeabi_dcmpun>
 8007d5c:	f999 9000 	ldrsb.w	r9, [r9]
 8007d60:	4b4b      	ldr	r3, [pc, #300]	; (8007e90 <pow+0x2c0>)
 8007d62:	b1b0      	cbz	r0, 8007d92 <pow+0x1c2>
 8007d64:	2201      	movs	r2, #1
 8007d66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d6a:	9b00      	ldr	r3, [sp, #0]
 8007d6c:	930a      	str	r3, [sp, #40]	; 0x28
 8007d6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007d72:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007d76:	f1b9 0f00 	cmp.w	r9, #0
 8007d7a:	d0c4      	beq.n	8007d06 <pow+0x136>
 8007d7c:	4652      	mov	r2, sl
 8007d7e:	465b      	mov	r3, fp
 8007d80:	4650      	mov	r0, sl
 8007d82:	4659      	mov	r1, fp
 8007d84:	f7f8 fd62 	bl	800084c <__aeabi_ddiv>
 8007d88:	f1b9 0f02 	cmp.w	r9, #2
 8007d8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d90:	e7c1      	b.n	8007d16 <pow+0x146>
 8007d92:	2203      	movs	r2, #3
 8007d94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d98:	900a      	str	r0, [sp, #40]	; 0x28
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	2200      	movs	r2, #0
 8007da0:	4b3e      	ldr	r3, [pc, #248]	; (8007e9c <pow+0x2cc>)
 8007da2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007da6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007daa:	f7f8 fc25 	bl	80005f8 <__aeabi_dmul>
 8007dae:	4604      	mov	r4, r0
 8007db0:	460d      	mov	r5, r1
 8007db2:	f1b9 0f00 	cmp.w	r9, #0
 8007db6:	d124      	bne.n	8007e02 <pow+0x232>
 8007db8:	4b39      	ldr	r3, [pc, #228]	; (8007ea0 <pow+0x2d0>)
 8007dba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007dbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	4652      	mov	r2, sl
 8007dc6:	465b      	mov	r3, fp
 8007dc8:	4639      	mov	r1, r7
 8007dca:	f7f8 fe87 	bl	8000adc <__aeabi_dcmplt>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d056      	beq.n	8007e80 <pow+0x2b0>
 8007dd2:	ec45 4b10 	vmov	d0, r4, r5
 8007dd6:	f000 fea3 	bl	8008b20 <rint>
 8007dda:	4622      	mov	r2, r4
 8007ddc:	462b      	mov	r3, r5
 8007dde:	ec51 0b10 	vmov	r0, r1, d0
 8007de2:	f7f8 fe71 	bl	8000ac8 <__aeabi_dcmpeq>
 8007de6:	b920      	cbnz	r0, 8007df2 <pow+0x222>
 8007de8:	4b2e      	ldr	r3, [pc, #184]	; (8007ea4 <pow+0x2d4>)
 8007dea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007dee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007df2:	f998 3000 	ldrsb.w	r3, [r8]
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d142      	bne.n	8007e80 <pow+0x2b0>
 8007dfa:	f7fd fc6d 	bl	80056d8 <__errno>
 8007dfe:	2322      	movs	r3, #34	; 0x22
 8007e00:	e78d      	b.n	8007d1e <pow+0x14e>
 8007e02:	4b29      	ldr	r3, [pc, #164]	; (8007ea8 <pow+0x2d8>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	4652      	mov	r2, sl
 8007e0e:	465b      	mov	r3, fp
 8007e10:	4639      	mov	r1, r7
 8007e12:	f7f8 fe63 	bl	8000adc <__aeabi_dcmplt>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d0eb      	beq.n	8007df2 <pow+0x222>
 8007e1a:	ec45 4b10 	vmov	d0, r4, r5
 8007e1e:	f000 fe7f 	bl	8008b20 <rint>
 8007e22:	4622      	mov	r2, r4
 8007e24:	462b      	mov	r3, r5
 8007e26:	ec51 0b10 	vmov	r0, r1, d0
 8007e2a:	f7f8 fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d1df      	bne.n	8007df2 <pow+0x222>
 8007e32:	2200      	movs	r2, #0
 8007e34:	4b18      	ldr	r3, [pc, #96]	; (8007e98 <pow+0x2c8>)
 8007e36:	e7da      	b.n	8007dee <pow+0x21e>
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	ec51 0b18 	vmov	r0, r1, d8
 8007e40:	f7f8 fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	f43f af3a 	beq.w	8007cbe <pow+0xee>
 8007e4a:	ec47 6b10 	vmov	d0, r6, r7
 8007e4e:	f000 fe52 	bl	8008af6 <finite>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	f43f af33 	beq.w	8007cbe <pow+0xee>
 8007e58:	ec45 4b10 	vmov	d0, r4, r5
 8007e5c:	f000 fe4b 	bl	8008af6 <finite>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	f43f af2c 	beq.w	8007cbe <pow+0xee>
 8007e66:	2304      	movs	r3, #4
 8007e68:	9302      	str	r3, [sp, #8]
 8007e6a:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <pow+0x2c0>)
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	930a      	str	r3, [sp, #40]	; 0x28
 8007e72:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e76:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007e7a:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007e7e:	e7b8      	b.n	8007df2 <pow+0x222>
 8007e80:	a802      	add	r0, sp, #8
 8007e82:	f000 fe40 	bl	8008b06 <matherr>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f47f af11 	bne.w	8007cae <pow+0xde>
 8007e8c:	e7b5      	b.n	8007dfa <pow+0x22a>
 8007e8e:	bf00      	nop
 8007e90:	080091b0 	.word	0x080091b0
 8007e94:	3ff00000 	.word	0x3ff00000
 8007e98:	fff00000 	.word	0xfff00000
 8007e9c:	3fe00000 	.word	0x3fe00000
 8007ea0:	47efffff 	.word	0x47efffff
 8007ea4:	c7efffff 	.word	0xc7efffff
 8007ea8:	7ff00000 	.word	0x7ff00000
 8007eac:	200002ac 	.word	0x200002ac

08007eb0 <sqrt>:
 8007eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007eb4:	ed2d 8b02 	vpush	{d8}
 8007eb8:	b08b      	sub	sp, #44	; 0x2c
 8007eba:	ec55 4b10 	vmov	r4, r5, d0
 8007ebe:	f000 fd61 	bl	8008984 <__ieee754_sqrt>
 8007ec2:	4b26      	ldr	r3, [pc, #152]	; (8007f5c <sqrt+0xac>)
 8007ec4:	eeb0 8a40 	vmov.f32	s16, s0
 8007ec8:	eef0 8a60 	vmov.f32	s17, s1
 8007ecc:	f993 6000 	ldrsb.w	r6, [r3]
 8007ed0:	1c73      	adds	r3, r6, #1
 8007ed2:	d02a      	beq.n	8007f2a <sqrt+0x7a>
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	462b      	mov	r3, r5
 8007ed8:	4620      	mov	r0, r4
 8007eda:	4629      	mov	r1, r5
 8007edc:	f7f8 fe26 	bl	8000b2c <__aeabi_dcmpun>
 8007ee0:	4607      	mov	r7, r0
 8007ee2:	bb10      	cbnz	r0, 8007f2a <sqrt+0x7a>
 8007ee4:	f04f 0800 	mov.w	r8, #0
 8007ee8:	f04f 0900 	mov.w	r9, #0
 8007eec:	4642      	mov	r2, r8
 8007eee:	464b      	mov	r3, r9
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	f7f8 fdf2 	bl	8000adc <__aeabi_dcmplt>
 8007ef8:	b1b8      	cbz	r0, 8007f2a <sqrt+0x7a>
 8007efa:	2301      	movs	r3, #1
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	4b18      	ldr	r3, [pc, #96]	; (8007f60 <sqrt+0xb0>)
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	9708      	str	r7, [sp, #32]
 8007f04:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007f08:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007f0c:	b9b6      	cbnz	r6, 8007f3c <sqrt+0x8c>
 8007f0e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007f12:	4668      	mov	r0, sp
 8007f14:	f000 fdf7 	bl	8008b06 <matherr>
 8007f18:	b1d0      	cbz	r0, 8007f50 <sqrt+0xa0>
 8007f1a:	9b08      	ldr	r3, [sp, #32]
 8007f1c:	b11b      	cbz	r3, 8007f26 <sqrt+0x76>
 8007f1e:	f7fd fbdb 	bl	80056d8 <__errno>
 8007f22:	9b08      	ldr	r3, [sp, #32]
 8007f24:	6003      	str	r3, [r0, #0]
 8007f26:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007f2a:	eeb0 0a48 	vmov.f32	s0, s16
 8007f2e:	eef0 0a68 	vmov.f32	s1, s17
 8007f32:	b00b      	add	sp, #44	; 0x2c
 8007f34:	ecbd 8b02 	vpop	{d8}
 8007f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f3c:	4642      	mov	r2, r8
 8007f3e:	464b      	mov	r3, r9
 8007f40:	4640      	mov	r0, r8
 8007f42:	4649      	mov	r1, r9
 8007f44:	f7f8 fc82 	bl	800084c <__aeabi_ddiv>
 8007f48:	2e02      	cmp	r6, #2
 8007f4a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f4e:	d1e0      	bne.n	8007f12 <sqrt+0x62>
 8007f50:	f7fd fbc2 	bl	80056d8 <__errno>
 8007f54:	2321      	movs	r3, #33	; 0x21
 8007f56:	6003      	str	r3, [r0, #0]
 8007f58:	e7df      	b.n	8007f1a <sqrt+0x6a>
 8007f5a:	bf00      	nop
 8007f5c:	200002ac 	.word	0x200002ac
 8007f60:	080091b4 	.word	0x080091b4
 8007f64:	00000000 	.word	0x00000000

08007f68 <__ieee754_pow>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	b091      	sub	sp, #68	; 0x44
 8007f6e:	ed8d 1b00 	vstr	d1, [sp]
 8007f72:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007f76:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007f7a:	ea58 0302 	orrs.w	r3, r8, r2
 8007f7e:	ec57 6b10 	vmov	r6, r7, d0
 8007f82:	f000 84be 	beq.w	8008902 <__ieee754_pow+0x99a>
 8007f86:	4b7a      	ldr	r3, [pc, #488]	; (8008170 <__ieee754_pow+0x208>)
 8007f88:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007f8c:	429c      	cmp	r4, r3
 8007f8e:	463d      	mov	r5, r7
 8007f90:	ee10 aa10 	vmov	sl, s0
 8007f94:	dc09      	bgt.n	8007faa <__ieee754_pow+0x42>
 8007f96:	d103      	bne.n	8007fa0 <__ieee754_pow+0x38>
 8007f98:	b93e      	cbnz	r6, 8007faa <__ieee754_pow+0x42>
 8007f9a:	45a0      	cmp	r8, r4
 8007f9c:	dc0d      	bgt.n	8007fba <__ieee754_pow+0x52>
 8007f9e:	e001      	b.n	8007fa4 <__ieee754_pow+0x3c>
 8007fa0:	4598      	cmp	r8, r3
 8007fa2:	dc02      	bgt.n	8007faa <__ieee754_pow+0x42>
 8007fa4:	4598      	cmp	r8, r3
 8007fa6:	d10e      	bne.n	8007fc6 <__ieee754_pow+0x5e>
 8007fa8:	b16a      	cbz	r2, 8007fc6 <__ieee754_pow+0x5e>
 8007faa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007fae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007fb2:	ea54 030a 	orrs.w	r3, r4, sl
 8007fb6:	f000 84a4 	beq.w	8008902 <__ieee754_pow+0x99a>
 8007fba:	486e      	ldr	r0, [pc, #440]	; (8008174 <__ieee754_pow+0x20c>)
 8007fbc:	b011      	add	sp, #68	; 0x44
 8007fbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc2:	f000 bda5 	b.w	8008b10 <nan>
 8007fc6:	2d00      	cmp	r5, #0
 8007fc8:	da53      	bge.n	8008072 <__ieee754_pow+0x10a>
 8007fca:	4b6b      	ldr	r3, [pc, #428]	; (8008178 <__ieee754_pow+0x210>)
 8007fcc:	4598      	cmp	r8, r3
 8007fce:	dc4d      	bgt.n	800806c <__ieee754_pow+0x104>
 8007fd0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007fd4:	4598      	cmp	r8, r3
 8007fd6:	dd4c      	ble.n	8008072 <__ieee754_pow+0x10a>
 8007fd8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007fdc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007fe0:	2b14      	cmp	r3, #20
 8007fe2:	dd26      	ble.n	8008032 <__ieee754_pow+0xca>
 8007fe4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007fe8:	fa22 f103 	lsr.w	r1, r2, r3
 8007fec:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d13e      	bne.n	8008072 <__ieee754_pow+0x10a>
 8007ff4:	f001 0101 	and.w	r1, r1, #1
 8007ff8:	f1c1 0b02 	rsb	fp, r1, #2
 8007ffc:	2a00      	cmp	r2, #0
 8007ffe:	d15b      	bne.n	80080b8 <__ieee754_pow+0x150>
 8008000:	4b5b      	ldr	r3, [pc, #364]	; (8008170 <__ieee754_pow+0x208>)
 8008002:	4598      	cmp	r8, r3
 8008004:	d124      	bne.n	8008050 <__ieee754_pow+0xe8>
 8008006:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800800a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800800e:	ea53 030a 	orrs.w	r3, r3, sl
 8008012:	f000 8476 	beq.w	8008902 <__ieee754_pow+0x99a>
 8008016:	4b59      	ldr	r3, [pc, #356]	; (800817c <__ieee754_pow+0x214>)
 8008018:	429c      	cmp	r4, r3
 800801a:	dd2d      	ble.n	8008078 <__ieee754_pow+0x110>
 800801c:	f1b9 0f00 	cmp.w	r9, #0
 8008020:	f280 8473 	bge.w	800890a <__ieee754_pow+0x9a2>
 8008024:	2000      	movs	r0, #0
 8008026:	2100      	movs	r1, #0
 8008028:	ec41 0b10 	vmov	d0, r0, r1
 800802c:	b011      	add	sp, #68	; 0x44
 800802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008032:	2a00      	cmp	r2, #0
 8008034:	d13e      	bne.n	80080b4 <__ieee754_pow+0x14c>
 8008036:	f1c3 0314 	rsb	r3, r3, #20
 800803a:	fa48 f103 	asr.w	r1, r8, r3
 800803e:	fa01 f303 	lsl.w	r3, r1, r3
 8008042:	4543      	cmp	r3, r8
 8008044:	f040 8469 	bne.w	800891a <__ieee754_pow+0x9b2>
 8008048:	f001 0101 	and.w	r1, r1, #1
 800804c:	f1c1 0b02 	rsb	fp, r1, #2
 8008050:	4b4b      	ldr	r3, [pc, #300]	; (8008180 <__ieee754_pow+0x218>)
 8008052:	4598      	cmp	r8, r3
 8008054:	d118      	bne.n	8008088 <__ieee754_pow+0x120>
 8008056:	f1b9 0f00 	cmp.w	r9, #0
 800805a:	f280 845a 	bge.w	8008912 <__ieee754_pow+0x9aa>
 800805e:	4948      	ldr	r1, [pc, #288]	; (8008180 <__ieee754_pow+0x218>)
 8008060:	4632      	mov	r2, r6
 8008062:	463b      	mov	r3, r7
 8008064:	2000      	movs	r0, #0
 8008066:	f7f8 fbf1 	bl	800084c <__aeabi_ddiv>
 800806a:	e7dd      	b.n	8008028 <__ieee754_pow+0xc0>
 800806c:	f04f 0b02 	mov.w	fp, #2
 8008070:	e7c4      	b.n	8007ffc <__ieee754_pow+0x94>
 8008072:	f04f 0b00 	mov.w	fp, #0
 8008076:	e7c1      	b.n	8007ffc <__ieee754_pow+0x94>
 8008078:	f1b9 0f00 	cmp.w	r9, #0
 800807c:	dad2      	bge.n	8008024 <__ieee754_pow+0xbc>
 800807e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008082:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008086:	e7cf      	b.n	8008028 <__ieee754_pow+0xc0>
 8008088:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800808c:	d106      	bne.n	800809c <__ieee754_pow+0x134>
 800808e:	4632      	mov	r2, r6
 8008090:	463b      	mov	r3, r7
 8008092:	4610      	mov	r0, r2
 8008094:	4619      	mov	r1, r3
 8008096:	f7f8 faaf 	bl	80005f8 <__aeabi_dmul>
 800809a:	e7c5      	b.n	8008028 <__ieee754_pow+0xc0>
 800809c:	4b39      	ldr	r3, [pc, #228]	; (8008184 <__ieee754_pow+0x21c>)
 800809e:	4599      	cmp	r9, r3
 80080a0:	d10a      	bne.n	80080b8 <__ieee754_pow+0x150>
 80080a2:	2d00      	cmp	r5, #0
 80080a4:	db08      	blt.n	80080b8 <__ieee754_pow+0x150>
 80080a6:	ec47 6b10 	vmov	d0, r6, r7
 80080aa:	b011      	add	sp, #68	; 0x44
 80080ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b0:	f000 bc68 	b.w	8008984 <__ieee754_sqrt>
 80080b4:	f04f 0b00 	mov.w	fp, #0
 80080b8:	ec47 6b10 	vmov	d0, r6, r7
 80080bc:	f000 fd12 	bl	8008ae4 <fabs>
 80080c0:	ec51 0b10 	vmov	r0, r1, d0
 80080c4:	f1ba 0f00 	cmp.w	sl, #0
 80080c8:	d127      	bne.n	800811a <__ieee754_pow+0x1b2>
 80080ca:	b124      	cbz	r4, 80080d6 <__ieee754_pow+0x16e>
 80080cc:	4b2c      	ldr	r3, [pc, #176]	; (8008180 <__ieee754_pow+0x218>)
 80080ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d121      	bne.n	800811a <__ieee754_pow+0x1b2>
 80080d6:	f1b9 0f00 	cmp.w	r9, #0
 80080da:	da05      	bge.n	80080e8 <__ieee754_pow+0x180>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	2000      	movs	r0, #0
 80080e2:	4927      	ldr	r1, [pc, #156]	; (8008180 <__ieee754_pow+0x218>)
 80080e4:	f7f8 fbb2 	bl	800084c <__aeabi_ddiv>
 80080e8:	2d00      	cmp	r5, #0
 80080ea:	da9d      	bge.n	8008028 <__ieee754_pow+0xc0>
 80080ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80080f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80080f4:	ea54 030b 	orrs.w	r3, r4, fp
 80080f8:	d108      	bne.n	800810c <__ieee754_pow+0x1a4>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	4610      	mov	r0, r2
 8008100:	4619      	mov	r1, r3
 8008102:	f7f8 f8c1 	bl	8000288 <__aeabi_dsub>
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	e7ac      	b.n	8008066 <__ieee754_pow+0xfe>
 800810c:	f1bb 0f01 	cmp.w	fp, #1
 8008110:	d18a      	bne.n	8008028 <__ieee754_pow+0xc0>
 8008112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008116:	4619      	mov	r1, r3
 8008118:	e786      	b.n	8008028 <__ieee754_pow+0xc0>
 800811a:	0fed      	lsrs	r5, r5, #31
 800811c:	1e6b      	subs	r3, r5, #1
 800811e:	930d      	str	r3, [sp, #52]	; 0x34
 8008120:	ea5b 0303 	orrs.w	r3, fp, r3
 8008124:	d102      	bne.n	800812c <__ieee754_pow+0x1c4>
 8008126:	4632      	mov	r2, r6
 8008128:	463b      	mov	r3, r7
 800812a:	e7e8      	b.n	80080fe <__ieee754_pow+0x196>
 800812c:	4b16      	ldr	r3, [pc, #88]	; (8008188 <__ieee754_pow+0x220>)
 800812e:	4598      	cmp	r8, r3
 8008130:	f340 80fe 	ble.w	8008330 <__ieee754_pow+0x3c8>
 8008134:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008138:	4598      	cmp	r8, r3
 800813a:	dd0a      	ble.n	8008152 <__ieee754_pow+0x1ea>
 800813c:	4b0f      	ldr	r3, [pc, #60]	; (800817c <__ieee754_pow+0x214>)
 800813e:	429c      	cmp	r4, r3
 8008140:	dc0d      	bgt.n	800815e <__ieee754_pow+0x1f6>
 8008142:	f1b9 0f00 	cmp.w	r9, #0
 8008146:	f6bf af6d 	bge.w	8008024 <__ieee754_pow+0xbc>
 800814a:	a307      	add	r3, pc, #28	; (adr r3, 8008168 <__ieee754_pow+0x200>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	e79f      	b.n	8008092 <__ieee754_pow+0x12a>
 8008152:	4b0e      	ldr	r3, [pc, #56]	; (800818c <__ieee754_pow+0x224>)
 8008154:	429c      	cmp	r4, r3
 8008156:	ddf4      	ble.n	8008142 <__ieee754_pow+0x1da>
 8008158:	4b09      	ldr	r3, [pc, #36]	; (8008180 <__ieee754_pow+0x218>)
 800815a:	429c      	cmp	r4, r3
 800815c:	dd18      	ble.n	8008190 <__ieee754_pow+0x228>
 800815e:	f1b9 0f00 	cmp.w	r9, #0
 8008162:	dcf2      	bgt.n	800814a <__ieee754_pow+0x1e2>
 8008164:	e75e      	b.n	8008024 <__ieee754_pow+0xbc>
 8008166:	bf00      	nop
 8008168:	8800759c 	.word	0x8800759c
 800816c:	7e37e43c 	.word	0x7e37e43c
 8008170:	7ff00000 	.word	0x7ff00000
 8008174:	08009099 	.word	0x08009099
 8008178:	433fffff 	.word	0x433fffff
 800817c:	3fefffff 	.word	0x3fefffff
 8008180:	3ff00000 	.word	0x3ff00000
 8008184:	3fe00000 	.word	0x3fe00000
 8008188:	41e00000 	.word	0x41e00000
 800818c:	3feffffe 	.word	0x3feffffe
 8008190:	2200      	movs	r2, #0
 8008192:	4b63      	ldr	r3, [pc, #396]	; (8008320 <__ieee754_pow+0x3b8>)
 8008194:	f7f8 f878 	bl	8000288 <__aeabi_dsub>
 8008198:	a355      	add	r3, pc, #340	; (adr r3, 80082f0 <__ieee754_pow+0x388>)
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	4604      	mov	r4, r0
 80081a0:	460d      	mov	r5, r1
 80081a2:	f7f8 fa29 	bl	80005f8 <__aeabi_dmul>
 80081a6:	a354      	add	r3, pc, #336	; (adr r3, 80082f8 <__ieee754_pow+0x390>)
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	4606      	mov	r6, r0
 80081ae:	460f      	mov	r7, r1
 80081b0:	4620      	mov	r0, r4
 80081b2:	4629      	mov	r1, r5
 80081b4:	f7f8 fa20 	bl	80005f8 <__aeabi_dmul>
 80081b8:	2200      	movs	r2, #0
 80081ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081be:	4b59      	ldr	r3, [pc, #356]	; (8008324 <__ieee754_pow+0x3bc>)
 80081c0:	4620      	mov	r0, r4
 80081c2:	4629      	mov	r1, r5
 80081c4:	f7f8 fa18 	bl	80005f8 <__aeabi_dmul>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	a14c      	add	r1, pc, #304	; (adr r1, 8008300 <__ieee754_pow+0x398>)
 80081ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081d2:	f7f8 f859 	bl	8000288 <__aeabi_dsub>
 80081d6:	4622      	mov	r2, r4
 80081d8:	462b      	mov	r3, r5
 80081da:	f7f8 fa0d 	bl	80005f8 <__aeabi_dmul>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	2000      	movs	r0, #0
 80081e4:	4950      	ldr	r1, [pc, #320]	; (8008328 <__ieee754_pow+0x3c0>)
 80081e6:	f7f8 f84f 	bl	8000288 <__aeabi_dsub>
 80081ea:	4622      	mov	r2, r4
 80081ec:	462b      	mov	r3, r5
 80081ee:	4680      	mov	r8, r0
 80081f0:	4689      	mov	r9, r1
 80081f2:	4620      	mov	r0, r4
 80081f4:	4629      	mov	r1, r5
 80081f6:	f7f8 f9ff 	bl	80005f8 <__aeabi_dmul>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4640      	mov	r0, r8
 8008200:	4649      	mov	r1, r9
 8008202:	f7f8 f9f9 	bl	80005f8 <__aeabi_dmul>
 8008206:	a340      	add	r3, pc, #256	; (adr r3, 8008308 <__ieee754_pow+0x3a0>)
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f7f8 f9f4 	bl	80005f8 <__aeabi_dmul>
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008218:	f7f8 f836 	bl	8000288 <__aeabi_dsub>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4604      	mov	r4, r0
 8008222:	460d      	mov	r5, r1
 8008224:	4630      	mov	r0, r6
 8008226:	4639      	mov	r1, r7
 8008228:	f7f8 f830 	bl	800028c <__adddf3>
 800822c:	2000      	movs	r0, #0
 800822e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008232:	4632      	mov	r2, r6
 8008234:	463b      	mov	r3, r7
 8008236:	f7f8 f827 	bl	8000288 <__aeabi_dsub>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4620      	mov	r0, r4
 8008240:	4629      	mov	r1, r5
 8008242:	f7f8 f821 	bl	8000288 <__aeabi_dsub>
 8008246:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008248:	f10b 33ff 	add.w	r3, fp, #4294967295
 800824c:	4313      	orrs	r3, r2
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	f040 81eb 	bne.w	800862c <__ieee754_pow+0x6c4>
 8008256:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008310 <__ieee754_pow+0x3a8>
 800825a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800825e:	2400      	movs	r4, #0
 8008260:	4622      	mov	r2, r4
 8008262:	462b      	mov	r3, r5
 8008264:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008268:	ed8d 7b02 	vstr	d7, [sp, #8]
 800826c:	f7f8 f80c 	bl	8000288 <__aeabi_dsub>
 8008270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008274:	f7f8 f9c0 	bl	80005f8 <__aeabi_dmul>
 8008278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800827c:	4680      	mov	r8, r0
 800827e:	4689      	mov	r9, r1
 8008280:	4630      	mov	r0, r6
 8008282:	4639      	mov	r1, r7
 8008284:	f7f8 f9b8 	bl	80005f8 <__aeabi_dmul>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4640      	mov	r0, r8
 800828e:	4649      	mov	r1, r9
 8008290:	f7f7 fffc 	bl	800028c <__adddf3>
 8008294:	4622      	mov	r2, r4
 8008296:	462b      	mov	r3, r5
 8008298:	4680      	mov	r8, r0
 800829a:	4689      	mov	r9, r1
 800829c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082a0:	f7f8 f9aa 	bl	80005f8 <__aeabi_dmul>
 80082a4:	460b      	mov	r3, r1
 80082a6:	4604      	mov	r4, r0
 80082a8:	460d      	mov	r5, r1
 80082aa:	4602      	mov	r2, r0
 80082ac:	4649      	mov	r1, r9
 80082ae:	4640      	mov	r0, r8
 80082b0:	e9cd 4500 	strd	r4, r5, [sp]
 80082b4:	f7f7 ffea 	bl	800028c <__adddf3>
 80082b8:	4b1c      	ldr	r3, [pc, #112]	; (800832c <__ieee754_pow+0x3c4>)
 80082ba:	4299      	cmp	r1, r3
 80082bc:	4606      	mov	r6, r0
 80082be:	460f      	mov	r7, r1
 80082c0:	468b      	mov	fp, r1
 80082c2:	f340 82f7 	ble.w	80088b4 <__ieee754_pow+0x94c>
 80082c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80082ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80082ce:	4303      	orrs	r3, r0
 80082d0:	f000 81ea 	beq.w	80086a8 <__ieee754_pow+0x740>
 80082d4:	a310      	add	r3, pc, #64	; (adr r3, 8008318 <__ieee754_pow+0x3b0>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082de:	f7f8 f98b 	bl	80005f8 <__aeabi_dmul>
 80082e2:	a30d      	add	r3, pc, #52	; (adr r3, 8008318 <__ieee754_pow+0x3b0>)
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	e6d5      	b.n	8008096 <__ieee754_pow+0x12e>
 80082ea:	bf00      	nop
 80082ec:	f3af 8000 	nop.w
 80082f0:	60000000 	.word	0x60000000
 80082f4:	3ff71547 	.word	0x3ff71547
 80082f8:	f85ddf44 	.word	0xf85ddf44
 80082fc:	3e54ae0b 	.word	0x3e54ae0b
 8008300:	55555555 	.word	0x55555555
 8008304:	3fd55555 	.word	0x3fd55555
 8008308:	652b82fe 	.word	0x652b82fe
 800830c:	3ff71547 	.word	0x3ff71547
 8008310:	00000000 	.word	0x00000000
 8008314:	bff00000 	.word	0xbff00000
 8008318:	8800759c 	.word	0x8800759c
 800831c:	7e37e43c 	.word	0x7e37e43c
 8008320:	3ff00000 	.word	0x3ff00000
 8008324:	3fd00000 	.word	0x3fd00000
 8008328:	3fe00000 	.word	0x3fe00000
 800832c:	408fffff 	.word	0x408fffff
 8008330:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	da05      	bge.n	8008346 <__ieee754_pow+0x3de>
 800833a:	4bd3      	ldr	r3, [pc, #844]	; (8008688 <__ieee754_pow+0x720>)
 800833c:	f7f8 f95c 	bl	80005f8 <__aeabi_dmul>
 8008340:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008344:	460c      	mov	r4, r1
 8008346:	1523      	asrs	r3, r4, #20
 8008348:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800834c:	4413      	add	r3, r2
 800834e:	9309      	str	r3, [sp, #36]	; 0x24
 8008350:	4bce      	ldr	r3, [pc, #824]	; (800868c <__ieee754_pow+0x724>)
 8008352:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008356:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800835a:	429c      	cmp	r4, r3
 800835c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008360:	dd08      	ble.n	8008374 <__ieee754_pow+0x40c>
 8008362:	4bcb      	ldr	r3, [pc, #812]	; (8008690 <__ieee754_pow+0x728>)
 8008364:	429c      	cmp	r4, r3
 8008366:	f340 815e 	ble.w	8008626 <__ieee754_pow+0x6be>
 800836a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836c:	3301      	adds	r3, #1
 800836e:	9309      	str	r3, [sp, #36]	; 0x24
 8008370:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008374:	f04f 0a00 	mov.w	sl, #0
 8008378:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800837c:	930c      	str	r3, [sp, #48]	; 0x30
 800837e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008380:	4bc4      	ldr	r3, [pc, #784]	; (8008694 <__ieee754_pow+0x72c>)
 8008382:	4413      	add	r3, r2
 8008384:	ed93 7b00 	vldr	d7, [r3]
 8008388:	4629      	mov	r1, r5
 800838a:	ec53 2b17 	vmov	r2, r3, d7
 800838e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008392:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008396:	f7f7 ff77 	bl	8000288 <__aeabi_dsub>
 800839a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800839e:	4606      	mov	r6, r0
 80083a0:	460f      	mov	r7, r1
 80083a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083a6:	f7f7 ff71 	bl	800028c <__adddf3>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	2000      	movs	r0, #0
 80083b0:	49b9      	ldr	r1, [pc, #740]	; (8008698 <__ieee754_pow+0x730>)
 80083b2:	f7f8 fa4b 	bl	800084c <__aeabi_ddiv>
 80083b6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4630      	mov	r0, r6
 80083c0:	4639      	mov	r1, r7
 80083c2:	f7f8 f919 	bl	80005f8 <__aeabi_dmul>
 80083c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083ca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80083ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80083d2:	2300      	movs	r3, #0
 80083d4:	9302      	str	r3, [sp, #8]
 80083d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80083da:	106d      	asrs	r5, r5, #1
 80083dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80083e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80083e4:	2200      	movs	r2, #0
 80083e6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80083ea:	4640      	mov	r0, r8
 80083ec:	4649      	mov	r1, r9
 80083ee:	4614      	mov	r4, r2
 80083f0:	461d      	mov	r5, r3
 80083f2:	f7f8 f901 	bl	80005f8 <__aeabi_dmul>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4630      	mov	r0, r6
 80083fc:	4639      	mov	r1, r7
 80083fe:	f7f7 ff43 	bl	8000288 <__aeabi_dsub>
 8008402:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008406:	4606      	mov	r6, r0
 8008408:	460f      	mov	r7, r1
 800840a:	4620      	mov	r0, r4
 800840c:	4629      	mov	r1, r5
 800840e:	f7f7 ff3b 	bl	8000288 <__aeabi_dsub>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800841a:	f7f7 ff35 	bl	8000288 <__aeabi_dsub>
 800841e:	4642      	mov	r2, r8
 8008420:	464b      	mov	r3, r9
 8008422:	f7f8 f8e9 	bl	80005f8 <__aeabi_dmul>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4630      	mov	r0, r6
 800842c:	4639      	mov	r1, r7
 800842e:	f7f7 ff2b 	bl	8000288 <__aeabi_dsub>
 8008432:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008436:	f7f8 f8df 	bl	80005f8 <__aeabi_dmul>
 800843a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800843e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008442:	4610      	mov	r0, r2
 8008444:	4619      	mov	r1, r3
 8008446:	f7f8 f8d7 	bl	80005f8 <__aeabi_dmul>
 800844a:	a37b      	add	r3, pc, #492	; (adr r3, 8008638 <__ieee754_pow+0x6d0>)
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	4604      	mov	r4, r0
 8008452:	460d      	mov	r5, r1
 8008454:	f7f8 f8d0 	bl	80005f8 <__aeabi_dmul>
 8008458:	a379      	add	r3, pc, #484	; (adr r3, 8008640 <__ieee754_pow+0x6d8>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f7f7 ff15 	bl	800028c <__adddf3>
 8008462:	4622      	mov	r2, r4
 8008464:	462b      	mov	r3, r5
 8008466:	f7f8 f8c7 	bl	80005f8 <__aeabi_dmul>
 800846a:	a377      	add	r3, pc, #476	; (adr r3, 8008648 <__ieee754_pow+0x6e0>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f7f7 ff0c 	bl	800028c <__adddf3>
 8008474:	4622      	mov	r2, r4
 8008476:	462b      	mov	r3, r5
 8008478:	f7f8 f8be 	bl	80005f8 <__aeabi_dmul>
 800847c:	a374      	add	r3, pc, #464	; (adr r3, 8008650 <__ieee754_pow+0x6e8>)
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f7f7 ff03 	bl	800028c <__adddf3>
 8008486:	4622      	mov	r2, r4
 8008488:	462b      	mov	r3, r5
 800848a:	f7f8 f8b5 	bl	80005f8 <__aeabi_dmul>
 800848e:	a372      	add	r3, pc, #456	; (adr r3, 8008658 <__ieee754_pow+0x6f0>)
 8008490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008494:	f7f7 fefa 	bl	800028c <__adddf3>
 8008498:	4622      	mov	r2, r4
 800849a:	462b      	mov	r3, r5
 800849c:	f7f8 f8ac 	bl	80005f8 <__aeabi_dmul>
 80084a0:	a36f      	add	r3, pc, #444	; (adr r3, 8008660 <__ieee754_pow+0x6f8>)
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f7f7 fef1 	bl	800028c <__adddf3>
 80084aa:	4622      	mov	r2, r4
 80084ac:	4606      	mov	r6, r0
 80084ae:	460f      	mov	r7, r1
 80084b0:	462b      	mov	r3, r5
 80084b2:	4620      	mov	r0, r4
 80084b4:	4629      	mov	r1, r5
 80084b6:	f7f8 f89f 	bl	80005f8 <__aeabi_dmul>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4630      	mov	r0, r6
 80084c0:	4639      	mov	r1, r7
 80084c2:	f7f8 f899 	bl	80005f8 <__aeabi_dmul>
 80084c6:	4642      	mov	r2, r8
 80084c8:	4604      	mov	r4, r0
 80084ca:	460d      	mov	r5, r1
 80084cc:	464b      	mov	r3, r9
 80084ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084d2:	f7f7 fedb 	bl	800028c <__adddf3>
 80084d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084da:	f7f8 f88d 	bl	80005f8 <__aeabi_dmul>
 80084de:	4622      	mov	r2, r4
 80084e0:	462b      	mov	r3, r5
 80084e2:	f7f7 fed3 	bl	800028c <__adddf3>
 80084e6:	4642      	mov	r2, r8
 80084e8:	4606      	mov	r6, r0
 80084ea:	460f      	mov	r7, r1
 80084ec:	464b      	mov	r3, r9
 80084ee:	4640      	mov	r0, r8
 80084f0:	4649      	mov	r1, r9
 80084f2:	f7f8 f881 	bl	80005f8 <__aeabi_dmul>
 80084f6:	2200      	movs	r2, #0
 80084f8:	4b68      	ldr	r3, [pc, #416]	; (800869c <__ieee754_pow+0x734>)
 80084fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80084fe:	f7f7 fec5 	bl	800028c <__adddf3>
 8008502:	4632      	mov	r2, r6
 8008504:	463b      	mov	r3, r7
 8008506:	f7f7 fec1 	bl	800028c <__adddf3>
 800850a:	9802      	ldr	r0, [sp, #8]
 800850c:	460d      	mov	r5, r1
 800850e:	4604      	mov	r4, r0
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4640      	mov	r0, r8
 8008516:	4649      	mov	r1, r9
 8008518:	f7f8 f86e 	bl	80005f8 <__aeabi_dmul>
 800851c:	2200      	movs	r2, #0
 800851e:	4680      	mov	r8, r0
 8008520:	4689      	mov	r9, r1
 8008522:	4b5e      	ldr	r3, [pc, #376]	; (800869c <__ieee754_pow+0x734>)
 8008524:	4620      	mov	r0, r4
 8008526:	4629      	mov	r1, r5
 8008528:	f7f7 feae 	bl	8000288 <__aeabi_dsub>
 800852c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008530:	f7f7 feaa 	bl	8000288 <__aeabi_dsub>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4630      	mov	r0, r6
 800853a:	4639      	mov	r1, r7
 800853c:	f7f7 fea4 	bl	8000288 <__aeabi_dsub>
 8008540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008544:	f7f8 f858 	bl	80005f8 <__aeabi_dmul>
 8008548:	4622      	mov	r2, r4
 800854a:	4606      	mov	r6, r0
 800854c:	460f      	mov	r7, r1
 800854e:	462b      	mov	r3, r5
 8008550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008554:	f7f8 f850 	bl	80005f8 <__aeabi_dmul>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4630      	mov	r0, r6
 800855e:	4639      	mov	r1, r7
 8008560:	f7f7 fe94 	bl	800028c <__adddf3>
 8008564:	4606      	mov	r6, r0
 8008566:	460f      	mov	r7, r1
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4640      	mov	r0, r8
 800856e:	4649      	mov	r1, r9
 8008570:	f7f7 fe8c 	bl	800028c <__adddf3>
 8008574:	9802      	ldr	r0, [sp, #8]
 8008576:	a33c      	add	r3, pc, #240	; (adr r3, 8008668 <__ieee754_pow+0x700>)
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	4604      	mov	r4, r0
 800857e:	460d      	mov	r5, r1
 8008580:	f7f8 f83a 	bl	80005f8 <__aeabi_dmul>
 8008584:	4642      	mov	r2, r8
 8008586:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800858a:	464b      	mov	r3, r9
 800858c:	4620      	mov	r0, r4
 800858e:	4629      	mov	r1, r5
 8008590:	f7f7 fe7a 	bl	8000288 <__aeabi_dsub>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	f7f7 fe74 	bl	8000288 <__aeabi_dsub>
 80085a0:	a333      	add	r3, pc, #204	; (adr r3, 8008670 <__ieee754_pow+0x708>)
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	f7f8 f827 	bl	80005f8 <__aeabi_dmul>
 80085aa:	a333      	add	r3, pc, #204	; (adr r3, 8008678 <__ieee754_pow+0x710>)
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	4606      	mov	r6, r0
 80085b2:	460f      	mov	r7, r1
 80085b4:	4620      	mov	r0, r4
 80085b6:	4629      	mov	r1, r5
 80085b8:	f7f8 f81e 	bl	80005f8 <__aeabi_dmul>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4630      	mov	r0, r6
 80085c2:	4639      	mov	r1, r7
 80085c4:	f7f7 fe62 	bl	800028c <__adddf3>
 80085c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085ca:	4b35      	ldr	r3, [pc, #212]	; (80086a0 <__ieee754_pow+0x738>)
 80085cc:	4413      	add	r3, r2
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f7f7 fe5b 	bl	800028c <__adddf3>
 80085d6:	4604      	mov	r4, r0
 80085d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085da:	460d      	mov	r5, r1
 80085dc:	f7f7 ffa2 	bl	8000524 <__aeabi_i2d>
 80085e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085e2:	4b30      	ldr	r3, [pc, #192]	; (80086a4 <__ieee754_pow+0x73c>)
 80085e4:	4413      	add	r3, r2
 80085e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085ea:	4606      	mov	r6, r0
 80085ec:	460f      	mov	r7, r1
 80085ee:	4622      	mov	r2, r4
 80085f0:	462b      	mov	r3, r5
 80085f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085f6:	f7f7 fe49 	bl	800028c <__adddf3>
 80085fa:	4642      	mov	r2, r8
 80085fc:	464b      	mov	r3, r9
 80085fe:	f7f7 fe45 	bl	800028c <__adddf3>
 8008602:	4632      	mov	r2, r6
 8008604:	463b      	mov	r3, r7
 8008606:	f7f7 fe41 	bl	800028c <__adddf3>
 800860a:	9802      	ldr	r0, [sp, #8]
 800860c:	4632      	mov	r2, r6
 800860e:	463b      	mov	r3, r7
 8008610:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008614:	f7f7 fe38 	bl	8000288 <__aeabi_dsub>
 8008618:	4642      	mov	r2, r8
 800861a:	464b      	mov	r3, r9
 800861c:	f7f7 fe34 	bl	8000288 <__aeabi_dsub>
 8008620:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008624:	e607      	b.n	8008236 <__ieee754_pow+0x2ce>
 8008626:	f04f 0a01 	mov.w	sl, #1
 800862a:	e6a5      	b.n	8008378 <__ieee754_pow+0x410>
 800862c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008680 <__ieee754_pow+0x718>
 8008630:	e613      	b.n	800825a <__ieee754_pow+0x2f2>
 8008632:	bf00      	nop
 8008634:	f3af 8000 	nop.w
 8008638:	4a454eef 	.word	0x4a454eef
 800863c:	3fca7e28 	.word	0x3fca7e28
 8008640:	93c9db65 	.word	0x93c9db65
 8008644:	3fcd864a 	.word	0x3fcd864a
 8008648:	a91d4101 	.word	0xa91d4101
 800864c:	3fd17460 	.word	0x3fd17460
 8008650:	518f264d 	.word	0x518f264d
 8008654:	3fd55555 	.word	0x3fd55555
 8008658:	db6fabff 	.word	0xdb6fabff
 800865c:	3fdb6db6 	.word	0x3fdb6db6
 8008660:	33333303 	.word	0x33333303
 8008664:	3fe33333 	.word	0x3fe33333
 8008668:	e0000000 	.word	0xe0000000
 800866c:	3feec709 	.word	0x3feec709
 8008670:	dc3a03fd 	.word	0xdc3a03fd
 8008674:	3feec709 	.word	0x3feec709
 8008678:	145b01f5 	.word	0x145b01f5
 800867c:	be3e2fe0 	.word	0xbe3e2fe0
 8008680:	00000000 	.word	0x00000000
 8008684:	3ff00000 	.word	0x3ff00000
 8008688:	43400000 	.word	0x43400000
 800868c:	0003988e 	.word	0x0003988e
 8008690:	000bb679 	.word	0x000bb679
 8008694:	080091c0 	.word	0x080091c0
 8008698:	3ff00000 	.word	0x3ff00000
 800869c:	40080000 	.word	0x40080000
 80086a0:	080091e0 	.word	0x080091e0
 80086a4:	080091d0 	.word	0x080091d0
 80086a8:	a3b4      	add	r3, pc, #720	; (adr r3, 800897c <__ieee754_pow+0xa14>)
 80086aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ae:	4640      	mov	r0, r8
 80086b0:	4649      	mov	r1, r9
 80086b2:	f7f7 fdeb 	bl	800028c <__adddf3>
 80086b6:	4622      	mov	r2, r4
 80086b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086bc:	462b      	mov	r3, r5
 80086be:	4630      	mov	r0, r6
 80086c0:	4639      	mov	r1, r7
 80086c2:	f7f7 fde1 	bl	8000288 <__aeabi_dsub>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ce:	f7f8 fa23 	bl	8000b18 <__aeabi_dcmpgt>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	f47f adfe 	bne.w	80082d4 <__ieee754_pow+0x36c>
 80086d8:	4aa3      	ldr	r2, [pc, #652]	; (8008968 <__ieee754_pow+0xa00>)
 80086da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80086de:	4293      	cmp	r3, r2
 80086e0:	f340 810a 	ble.w	80088f8 <__ieee754_pow+0x990>
 80086e4:	151b      	asrs	r3, r3, #20
 80086e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80086ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80086ee:	fa4a f303 	asr.w	r3, sl, r3
 80086f2:	445b      	add	r3, fp
 80086f4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80086f8:	4e9c      	ldr	r6, [pc, #624]	; (800896c <__ieee754_pow+0xa04>)
 80086fa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80086fe:	4116      	asrs	r6, r2
 8008700:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008704:	2000      	movs	r0, #0
 8008706:	ea23 0106 	bic.w	r1, r3, r6
 800870a:	f1c2 0214 	rsb	r2, r2, #20
 800870e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008712:	fa4a fa02 	asr.w	sl, sl, r2
 8008716:	f1bb 0f00 	cmp.w	fp, #0
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	4620      	mov	r0, r4
 8008720:	4629      	mov	r1, r5
 8008722:	bfb8      	it	lt
 8008724:	f1ca 0a00 	rsblt	sl, sl, #0
 8008728:	f7f7 fdae 	bl	8000288 <__aeabi_dsub>
 800872c:	e9cd 0100 	strd	r0, r1, [sp]
 8008730:	4642      	mov	r2, r8
 8008732:	464b      	mov	r3, r9
 8008734:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008738:	f7f7 fda8 	bl	800028c <__adddf3>
 800873c:	2000      	movs	r0, #0
 800873e:	a378      	add	r3, pc, #480	; (adr r3, 8008920 <__ieee754_pow+0x9b8>)
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	4604      	mov	r4, r0
 8008746:	460d      	mov	r5, r1
 8008748:	f7f7 ff56 	bl	80005f8 <__aeabi_dmul>
 800874c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008750:	4606      	mov	r6, r0
 8008752:	460f      	mov	r7, r1
 8008754:	4620      	mov	r0, r4
 8008756:	4629      	mov	r1, r5
 8008758:	f7f7 fd96 	bl	8000288 <__aeabi_dsub>
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4640      	mov	r0, r8
 8008762:	4649      	mov	r1, r9
 8008764:	f7f7 fd90 	bl	8000288 <__aeabi_dsub>
 8008768:	a36f      	add	r3, pc, #444	; (adr r3, 8008928 <__ieee754_pow+0x9c0>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f7f7 ff43 	bl	80005f8 <__aeabi_dmul>
 8008772:	a36f      	add	r3, pc, #444	; (adr r3, 8008930 <__ieee754_pow+0x9c8>)
 8008774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008778:	4680      	mov	r8, r0
 800877a:	4689      	mov	r9, r1
 800877c:	4620      	mov	r0, r4
 800877e:	4629      	mov	r1, r5
 8008780:	f7f7 ff3a 	bl	80005f8 <__aeabi_dmul>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	4640      	mov	r0, r8
 800878a:	4649      	mov	r1, r9
 800878c:	f7f7 fd7e 	bl	800028c <__adddf3>
 8008790:	4604      	mov	r4, r0
 8008792:	460d      	mov	r5, r1
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4630      	mov	r0, r6
 800879a:	4639      	mov	r1, r7
 800879c:	f7f7 fd76 	bl	800028c <__adddf3>
 80087a0:	4632      	mov	r2, r6
 80087a2:	463b      	mov	r3, r7
 80087a4:	4680      	mov	r8, r0
 80087a6:	4689      	mov	r9, r1
 80087a8:	f7f7 fd6e 	bl	8000288 <__aeabi_dsub>
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	4620      	mov	r0, r4
 80087b2:	4629      	mov	r1, r5
 80087b4:	f7f7 fd68 	bl	8000288 <__aeabi_dsub>
 80087b8:	4642      	mov	r2, r8
 80087ba:	4606      	mov	r6, r0
 80087bc:	460f      	mov	r7, r1
 80087be:	464b      	mov	r3, r9
 80087c0:	4640      	mov	r0, r8
 80087c2:	4649      	mov	r1, r9
 80087c4:	f7f7 ff18 	bl	80005f8 <__aeabi_dmul>
 80087c8:	a35b      	add	r3, pc, #364	; (adr r3, 8008938 <__ieee754_pow+0x9d0>)
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	4604      	mov	r4, r0
 80087d0:	460d      	mov	r5, r1
 80087d2:	f7f7 ff11 	bl	80005f8 <__aeabi_dmul>
 80087d6:	a35a      	add	r3, pc, #360	; (adr r3, 8008940 <__ieee754_pow+0x9d8>)
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	f7f7 fd54 	bl	8000288 <__aeabi_dsub>
 80087e0:	4622      	mov	r2, r4
 80087e2:	462b      	mov	r3, r5
 80087e4:	f7f7 ff08 	bl	80005f8 <__aeabi_dmul>
 80087e8:	a357      	add	r3, pc, #348	; (adr r3, 8008948 <__ieee754_pow+0x9e0>)
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f7f7 fd4d 	bl	800028c <__adddf3>
 80087f2:	4622      	mov	r2, r4
 80087f4:	462b      	mov	r3, r5
 80087f6:	f7f7 feff 	bl	80005f8 <__aeabi_dmul>
 80087fa:	a355      	add	r3, pc, #340	; (adr r3, 8008950 <__ieee754_pow+0x9e8>)
 80087fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008800:	f7f7 fd42 	bl	8000288 <__aeabi_dsub>
 8008804:	4622      	mov	r2, r4
 8008806:	462b      	mov	r3, r5
 8008808:	f7f7 fef6 	bl	80005f8 <__aeabi_dmul>
 800880c:	a352      	add	r3, pc, #328	; (adr r3, 8008958 <__ieee754_pow+0x9f0>)
 800880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008812:	f7f7 fd3b 	bl	800028c <__adddf3>
 8008816:	4622      	mov	r2, r4
 8008818:	462b      	mov	r3, r5
 800881a:	f7f7 feed 	bl	80005f8 <__aeabi_dmul>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4640      	mov	r0, r8
 8008824:	4649      	mov	r1, r9
 8008826:	f7f7 fd2f 	bl	8000288 <__aeabi_dsub>
 800882a:	4604      	mov	r4, r0
 800882c:	460d      	mov	r5, r1
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	4640      	mov	r0, r8
 8008834:	4649      	mov	r1, r9
 8008836:	f7f7 fedf 	bl	80005f8 <__aeabi_dmul>
 800883a:	2200      	movs	r2, #0
 800883c:	e9cd 0100 	strd	r0, r1, [sp]
 8008840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008844:	4620      	mov	r0, r4
 8008846:	4629      	mov	r1, r5
 8008848:	f7f7 fd1e 	bl	8000288 <__aeabi_dsub>
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008854:	f7f7 fffa 	bl	800084c <__aeabi_ddiv>
 8008858:	4632      	mov	r2, r6
 800885a:	4604      	mov	r4, r0
 800885c:	460d      	mov	r5, r1
 800885e:	463b      	mov	r3, r7
 8008860:	4640      	mov	r0, r8
 8008862:	4649      	mov	r1, r9
 8008864:	f7f7 fec8 	bl	80005f8 <__aeabi_dmul>
 8008868:	4632      	mov	r2, r6
 800886a:	463b      	mov	r3, r7
 800886c:	f7f7 fd0e 	bl	800028c <__adddf3>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4620      	mov	r0, r4
 8008876:	4629      	mov	r1, r5
 8008878:	f7f7 fd06 	bl	8000288 <__aeabi_dsub>
 800887c:	4642      	mov	r2, r8
 800887e:	464b      	mov	r3, r9
 8008880:	f7f7 fd02 	bl	8000288 <__aeabi_dsub>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	2000      	movs	r0, #0
 800888a:	4939      	ldr	r1, [pc, #228]	; (8008970 <__ieee754_pow+0xa08>)
 800888c:	f7f7 fcfc 	bl	8000288 <__aeabi_dsub>
 8008890:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008894:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	da2f      	bge.n	80088fe <__ieee754_pow+0x996>
 800889e:	4650      	mov	r0, sl
 80088a0:	ec43 2b10 	vmov	d0, r2, r3
 80088a4:	f000 f9c0 	bl	8008c28 <scalbn>
 80088a8:	ec51 0b10 	vmov	r0, r1, d0
 80088ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088b0:	f7ff bbf1 	b.w	8008096 <__ieee754_pow+0x12e>
 80088b4:	4b2f      	ldr	r3, [pc, #188]	; (8008974 <__ieee754_pow+0xa0c>)
 80088b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80088ba:	429e      	cmp	r6, r3
 80088bc:	f77f af0c 	ble.w	80086d8 <__ieee754_pow+0x770>
 80088c0:	4b2d      	ldr	r3, [pc, #180]	; (8008978 <__ieee754_pow+0xa10>)
 80088c2:	440b      	add	r3, r1
 80088c4:	4303      	orrs	r3, r0
 80088c6:	d00b      	beq.n	80088e0 <__ieee754_pow+0x978>
 80088c8:	a325      	add	r3, pc, #148	; (adr r3, 8008960 <__ieee754_pow+0x9f8>)
 80088ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088d2:	f7f7 fe91 	bl	80005f8 <__aeabi_dmul>
 80088d6:	a322      	add	r3, pc, #136	; (adr r3, 8008960 <__ieee754_pow+0x9f8>)
 80088d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088dc:	f7ff bbdb 	b.w	8008096 <__ieee754_pow+0x12e>
 80088e0:	4622      	mov	r2, r4
 80088e2:	462b      	mov	r3, r5
 80088e4:	f7f7 fcd0 	bl	8000288 <__aeabi_dsub>
 80088e8:	4642      	mov	r2, r8
 80088ea:	464b      	mov	r3, r9
 80088ec:	f7f8 f90a 	bl	8000b04 <__aeabi_dcmpge>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	f43f aef1 	beq.w	80086d8 <__ieee754_pow+0x770>
 80088f6:	e7e7      	b.n	80088c8 <__ieee754_pow+0x960>
 80088f8:	f04f 0a00 	mov.w	sl, #0
 80088fc:	e718      	b.n	8008730 <__ieee754_pow+0x7c8>
 80088fe:	4621      	mov	r1, r4
 8008900:	e7d4      	b.n	80088ac <__ieee754_pow+0x944>
 8008902:	2000      	movs	r0, #0
 8008904:	491a      	ldr	r1, [pc, #104]	; (8008970 <__ieee754_pow+0xa08>)
 8008906:	f7ff bb8f 	b.w	8008028 <__ieee754_pow+0xc0>
 800890a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800890e:	f7ff bb8b 	b.w	8008028 <__ieee754_pow+0xc0>
 8008912:	4630      	mov	r0, r6
 8008914:	4639      	mov	r1, r7
 8008916:	f7ff bb87 	b.w	8008028 <__ieee754_pow+0xc0>
 800891a:	4693      	mov	fp, r2
 800891c:	f7ff bb98 	b.w	8008050 <__ieee754_pow+0xe8>
 8008920:	00000000 	.word	0x00000000
 8008924:	3fe62e43 	.word	0x3fe62e43
 8008928:	fefa39ef 	.word	0xfefa39ef
 800892c:	3fe62e42 	.word	0x3fe62e42
 8008930:	0ca86c39 	.word	0x0ca86c39
 8008934:	be205c61 	.word	0xbe205c61
 8008938:	72bea4d0 	.word	0x72bea4d0
 800893c:	3e663769 	.word	0x3e663769
 8008940:	c5d26bf1 	.word	0xc5d26bf1
 8008944:	3ebbbd41 	.word	0x3ebbbd41
 8008948:	af25de2c 	.word	0xaf25de2c
 800894c:	3f11566a 	.word	0x3f11566a
 8008950:	16bebd93 	.word	0x16bebd93
 8008954:	3f66c16c 	.word	0x3f66c16c
 8008958:	5555553e 	.word	0x5555553e
 800895c:	3fc55555 	.word	0x3fc55555
 8008960:	c2f8f359 	.word	0xc2f8f359
 8008964:	01a56e1f 	.word	0x01a56e1f
 8008968:	3fe00000 	.word	0x3fe00000
 800896c:	000fffff 	.word	0x000fffff
 8008970:	3ff00000 	.word	0x3ff00000
 8008974:	4090cbff 	.word	0x4090cbff
 8008978:	3f6f3400 	.word	0x3f6f3400
 800897c:	652b82fe 	.word	0x652b82fe
 8008980:	3c971547 	.word	0x3c971547

08008984 <__ieee754_sqrt>:
 8008984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008988:	4955      	ldr	r1, [pc, #340]	; (8008ae0 <__ieee754_sqrt+0x15c>)
 800898a:	ec55 4b10 	vmov	r4, r5, d0
 800898e:	43a9      	bics	r1, r5
 8008990:	462b      	mov	r3, r5
 8008992:	462a      	mov	r2, r5
 8008994:	d112      	bne.n	80089bc <__ieee754_sqrt+0x38>
 8008996:	ee10 2a10 	vmov	r2, s0
 800899a:	ee10 0a10 	vmov	r0, s0
 800899e:	4629      	mov	r1, r5
 80089a0:	f7f7 fe2a 	bl	80005f8 <__aeabi_dmul>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	4620      	mov	r0, r4
 80089aa:	4629      	mov	r1, r5
 80089ac:	f7f7 fc6e 	bl	800028c <__adddf3>
 80089b0:	4604      	mov	r4, r0
 80089b2:	460d      	mov	r5, r1
 80089b4:	ec45 4b10 	vmov	d0, r4, r5
 80089b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089bc:	2d00      	cmp	r5, #0
 80089be:	ee10 0a10 	vmov	r0, s0
 80089c2:	4621      	mov	r1, r4
 80089c4:	dc0f      	bgt.n	80089e6 <__ieee754_sqrt+0x62>
 80089c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80089ca:	4330      	orrs	r0, r6
 80089cc:	d0f2      	beq.n	80089b4 <__ieee754_sqrt+0x30>
 80089ce:	b155      	cbz	r5, 80089e6 <__ieee754_sqrt+0x62>
 80089d0:	ee10 2a10 	vmov	r2, s0
 80089d4:	4620      	mov	r0, r4
 80089d6:	4629      	mov	r1, r5
 80089d8:	f7f7 fc56 	bl	8000288 <__aeabi_dsub>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	f7f7 ff34 	bl	800084c <__aeabi_ddiv>
 80089e4:	e7e4      	b.n	80089b0 <__ieee754_sqrt+0x2c>
 80089e6:	151b      	asrs	r3, r3, #20
 80089e8:	d073      	beq.n	8008ad2 <__ieee754_sqrt+0x14e>
 80089ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80089ee:	07dd      	lsls	r5, r3, #31
 80089f0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80089f4:	bf48      	it	mi
 80089f6:	0fc8      	lsrmi	r0, r1, #31
 80089f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80089fc:	bf44      	itt	mi
 80089fe:	0049      	lslmi	r1, r1, #1
 8008a00:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008a04:	2500      	movs	r5, #0
 8008a06:	1058      	asrs	r0, r3, #1
 8008a08:	0fcb      	lsrs	r3, r1, #31
 8008a0a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008a0e:	0049      	lsls	r1, r1, #1
 8008a10:	2316      	movs	r3, #22
 8008a12:	462c      	mov	r4, r5
 8008a14:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008a18:	19a7      	adds	r7, r4, r6
 8008a1a:	4297      	cmp	r7, r2
 8008a1c:	bfde      	ittt	le
 8008a1e:	19bc      	addle	r4, r7, r6
 8008a20:	1bd2      	suble	r2, r2, r7
 8008a22:	19ad      	addle	r5, r5, r6
 8008a24:	0fcf      	lsrs	r7, r1, #31
 8008a26:	3b01      	subs	r3, #1
 8008a28:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008a2c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008a30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008a34:	d1f0      	bne.n	8008a18 <__ieee754_sqrt+0x94>
 8008a36:	f04f 0c20 	mov.w	ip, #32
 8008a3a:	469e      	mov	lr, r3
 8008a3c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008a40:	42a2      	cmp	r2, r4
 8008a42:	eb06 070e 	add.w	r7, r6, lr
 8008a46:	dc02      	bgt.n	8008a4e <__ieee754_sqrt+0xca>
 8008a48:	d112      	bne.n	8008a70 <__ieee754_sqrt+0xec>
 8008a4a:	428f      	cmp	r7, r1
 8008a4c:	d810      	bhi.n	8008a70 <__ieee754_sqrt+0xec>
 8008a4e:	2f00      	cmp	r7, #0
 8008a50:	eb07 0e06 	add.w	lr, r7, r6
 8008a54:	da42      	bge.n	8008adc <__ieee754_sqrt+0x158>
 8008a56:	f1be 0f00 	cmp.w	lr, #0
 8008a5a:	db3f      	blt.n	8008adc <__ieee754_sqrt+0x158>
 8008a5c:	f104 0801 	add.w	r8, r4, #1
 8008a60:	1b12      	subs	r2, r2, r4
 8008a62:	428f      	cmp	r7, r1
 8008a64:	bf88      	it	hi
 8008a66:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008a6a:	1bc9      	subs	r1, r1, r7
 8008a6c:	4433      	add	r3, r6
 8008a6e:	4644      	mov	r4, r8
 8008a70:	0052      	lsls	r2, r2, #1
 8008a72:	f1bc 0c01 	subs.w	ip, ip, #1
 8008a76:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008a7a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008a7e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008a82:	d1dd      	bne.n	8008a40 <__ieee754_sqrt+0xbc>
 8008a84:	430a      	orrs	r2, r1
 8008a86:	d006      	beq.n	8008a96 <__ieee754_sqrt+0x112>
 8008a88:	1c5c      	adds	r4, r3, #1
 8008a8a:	bf13      	iteet	ne
 8008a8c:	3301      	addne	r3, #1
 8008a8e:	3501      	addeq	r5, #1
 8008a90:	4663      	moveq	r3, ip
 8008a92:	f023 0301 	bicne.w	r3, r3, #1
 8008a96:	106a      	asrs	r2, r5, #1
 8008a98:	085b      	lsrs	r3, r3, #1
 8008a9a:	07e9      	lsls	r1, r5, #31
 8008a9c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008aa0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008aa4:	bf48      	it	mi
 8008aa6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008aaa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008aae:	461c      	mov	r4, r3
 8008ab0:	e780      	b.n	80089b4 <__ieee754_sqrt+0x30>
 8008ab2:	0aca      	lsrs	r2, r1, #11
 8008ab4:	3815      	subs	r0, #21
 8008ab6:	0549      	lsls	r1, r1, #21
 8008ab8:	2a00      	cmp	r2, #0
 8008aba:	d0fa      	beq.n	8008ab2 <__ieee754_sqrt+0x12e>
 8008abc:	02d6      	lsls	r6, r2, #11
 8008abe:	d50a      	bpl.n	8008ad6 <__ieee754_sqrt+0x152>
 8008ac0:	f1c3 0420 	rsb	r4, r3, #32
 8008ac4:	fa21 f404 	lsr.w	r4, r1, r4
 8008ac8:	1e5d      	subs	r5, r3, #1
 8008aca:	4099      	lsls	r1, r3
 8008acc:	4322      	orrs	r2, r4
 8008ace:	1b43      	subs	r3, r0, r5
 8008ad0:	e78b      	b.n	80089ea <__ieee754_sqrt+0x66>
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	e7f0      	b.n	8008ab8 <__ieee754_sqrt+0x134>
 8008ad6:	0052      	lsls	r2, r2, #1
 8008ad8:	3301      	adds	r3, #1
 8008ada:	e7ef      	b.n	8008abc <__ieee754_sqrt+0x138>
 8008adc:	46a0      	mov	r8, r4
 8008ade:	e7bf      	b.n	8008a60 <__ieee754_sqrt+0xdc>
 8008ae0:	7ff00000 	.word	0x7ff00000

08008ae4 <fabs>:
 8008ae4:	ec51 0b10 	vmov	r0, r1, d0
 8008ae8:	ee10 2a10 	vmov	r2, s0
 8008aec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008af0:	ec43 2b10 	vmov	d0, r2, r3
 8008af4:	4770      	bx	lr

08008af6 <finite>:
 8008af6:	ee10 3a90 	vmov	r3, s1
 8008afa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008afe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008b02:	0fc0      	lsrs	r0, r0, #31
 8008b04:	4770      	bx	lr

08008b06 <matherr>:
 8008b06:	2000      	movs	r0, #0
 8008b08:	4770      	bx	lr
 8008b0a:	0000      	movs	r0, r0
 8008b0c:	0000      	movs	r0, r0
	...

08008b10 <nan>:
 8008b10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008b18 <nan+0x8>
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	00000000 	.word	0x00000000
 8008b1c:	7ff80000 	.word	0x7ff80000

08008b20 <rint>:
 8008b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b22:	ec51 0b10 	vmov	r0, r1, d0
 8008b26:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008b2a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008b2e:	2e13      	cmp	r6, #19
 8008b30:	460b      	mov	r3, r1
 8008b32:	ee10 4a10 	vmov	r4, s0
 8008b36:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008b3a:	dc56      	bgt.n	8008bea <rint+0xca>
 8008b3c:	2e00      	cmp	r6, #0
 8008b3e:	da2b      	bge.n	8008b98 <rint+0x78>
 8008b40:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008b44:	4302      	orrs	r2, r0
 8008b46:	d023      	beq.n	8008b90 <rint+0x70>
 8008b48:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008b4c:	4302      	orrs	r2, r0
 8008b4e:	4254      	negs	r4, r2
 8008b50:	4314      	orrs	r4, r2
 8008b52:	0c4b      	lsrs	r3, r1, #17
 8008b54:	0b24      	lsrs	r4, r4, #12
 8008b56:	045b      	lsls	r3, r3, #17
 8008b58:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008b5c:	ea44 0103 	orr.w	r1, r4, r3
 8008b60:	460b      	mov	r3, r1
 8008b62:	492f      	ldr	r1, [pc, #188]	; (8008c20 <rint+0x100>)
 8008b64:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008b68:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	4639      	mov	r1, r7
 8008b70:	4630      	mov	r0, r6
 8008b72:	f7f7 fb8b 	bl	800028c <__adddf3>
 8008b76:	e9cd 0100 	strd	r0, r1, [sp]
 8008b7a:	463b      	mov	r3, r7
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b82:	f7f7 fb81 	bl	8000288 <__aeabi_dsub>
 8008b86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b8a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008b8e:	4639      	mov	r1, r7
 8008b90:	ec41 0b10 	vmov	d0, r0, r1
 8008b94:	b003      	add	sp, #12
 8008b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b98:	4a22      	ldr	r2, [pc, #136]	; (8008c24 <rint+0x104>)
 8008b9a:	4132      	asrs	r2, r6
 8008b9c:	ea01 0702 	and.w	r7, r1, r2
 8008ba0:	4307      	orrs	r7, r0
 8008ba2:	d0f5      	beq.n	8008b90 <rint+0x70>
 8008ba4:	0852      	lsrs	r2, r2, #1
 8008ba6:	4011      	ands	r1, r2
 8008ba8:	430c      	orrs	r4, r1
 8008baa:	d00b      	beq.n	8008bc4 <rint+0xa4>
 8008bac:	ea23 0202 	bic.w	r2, r3, r2
 8008bb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008bb4:	2e13      	cmp	r6, #19
 8008bb6:	fa43 f306 	asr.w	r3, r3, r6
 8008bba:	bf0c      	ite	eq
 8008bbc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008bc0:	2400      	movne	r4, #0
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	4916      	ldr	r1, [pc, #88]	; (8008c20 <rint+0x100>)
 8008bc6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008bca:	4622      	mov	r2, r4
 8008bcc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	f7f7 fb5a 	bl	800028c <__adddf3>
 8008bd8:	e9cd 0100 	strd	r0, r1, [sp]
 8008bdc:	4622      	mov	r2, r4
 8008bde:	462b      	mov	r3, r5
 8008be0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008be4:	f7f7 fb50 	bl	8000288 <__aeabi_dsub>
 8008be8:	e7d2      	b.n	8008b90 <rint+0x70>
 8008bea:	2e33      	cmp	r6, #51	; 0x33
 8008bec:	dd07      	ble.n	8008bfe <rint+0xde>
 8008bee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008bf2:	d1cd      	bne.n	8008b90 <rint+0x70>
 8008bf4:	ee10 2a10 	vmov	r2, s0
 8008bf8:	f7f7 fb48 	bl	800028c <__adddf3>
 8008bfc:	e7c8      	b.n	8008b90 <rint+0x70>
 8008bfe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8008c02:	f04f 32ff 	mov.w	r2, #4294967295
 8008c06:	40f2      	lsrs	r2, r6
 8008c08:	4210      	tst	r0, r2
 8008c0a:	d0c1      	beq.n	8008b90 <rint+0x70>
 8008c0c:	0852      	lsrs	r2, r2, #1
 8008c0e:	4210      	tst	r0, r2
 8008c10:	bf1f      	itttt	ne
 8008c12:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008c16:	ea20 0202 	bicne.w	r2, r0, r2
 8008c1a:	4134      	asrne	r4, r6
 8008c1c:	4314      	orrne	r4, r2
 8008c1e:	e7d1      	b.n	8008bc4 <rint+0xa4>
 8008c20:	080091f0 	.word	0x080091f0
 8008c24:	000fffff 	.word	0x000fffff

08008c28 <scalbn>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	ec55 4b10 	vmov	r4, r5, d0
 8008c2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008c32:	4606      	mov	r6, r0
 8008c34:	462b      	mov	r3, r5
 8008c36:	b9aa      	cbnz	r2, 8008c64 <scalbn+0x3c>
 8008c38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008c3c:	4323      	orrs	r3, r4
 8008c3e:	d03b      	beq.n	8008cb8 <scalbn+0x90>
 8008c40:	4b31      	ldr	r3, [pc, #196]	; (8008d08 <scalbn+0xe0>)
 8008c42:	4629      	mov	r1, r5
 8008c44:	2200      	movs	r2, #0
 8008c46:	ee10 0a10 	vmov	r0, s0
 8008c4a:	f7f7 fcd5 	bl	80005f8 <__aeabi_dmul>
 8008c4e:	4b2f      	ldr	r3, [pc, #188]	; (8008d0c <scalbn+0xe4>)
 8008c50:	429e      	cmp	r6, r3
 8008c52:	4604      	mov	r4, r0
 8008c54:	460d      	mov	r5, r1
 8008c56:	da12      	bge.n	8008c7e <scalbn+0x56>
 8008c58:	a327      	add	r3, pc, #156	; (adr r3, 8008cf8 <scalbn+0xd0>)
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	f7f7 fccb 	bl	80005f8 <__aeabi_dmul>
 8008c62:	e009      	b.n	8008c78 <scalbn+0x50>
 8008c64:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008c68:	428a      	cmp	r2, r1
 8008c6a:	d10c      	bne.n	8008c86 <scalbn+0x5e>
 8008c6c:	ee10 2a10 	vmov	r2, s0
 8008c70:	4620      	mov	r0, r4
 8008c72:	4629      	mov	r1, r5
 8008c74:	f7f7 fb0a 	bl	800028c <__adddf3>
 8008c78:	4604      	mov	r4, r0
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	e01c      	b.n	8008cb8 <scalbn+0x90>
 8008c7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008c82:	460b      	mov	r3, r1
 8008c84:	3a36      	subs	r2, #54	; 0x36
 8008c86:	4432      	add	r2, r6
 8008c88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008c8c:	428a      	cmp	r2, r1
 8008c8e:	dd0b      	ble.n	8008ca8 <scalbn+0x80>
 8008c90:	ec45 4b11 	vmov	d1, r4, r5
 8008c94:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008d00 <scalbn+0xd8>
 8008c98:	f000 f83c 	bl	8008d14 <copysign>
 8008c9c:	a318      	add	r3, pc, #96	; (adr r3, 8008d00 <scalbn+0xd8>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	ec51 0b10 	vmov	r0, r1, d0
 8008ca6:	e7da      	b.n	8008c5e <scalbn+0x36>
 8008ca8:	2a00      	cmp	r2, #0
 8008caa:	dd08      	ble.n	8008cbe <scalbn+0x96>
 8008cac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008cb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008cb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008cb8:	ec45 4b10 	vmov	d0, r4, r5
 8008cbc:	bd70      	pop	{r4, r5, r6, pc}
 8008cbe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008cc2:	da0d      	bge.n	8008ce0 <scalbn+0xb8>
 8008cc4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008cc8:	429e      	cmp	r6, r3
 8008cca:	ec45 4b11 	vmov	d1, r4, r5
 8008cce:	dce1      	bgt.n	8008c94 <scalbn+0x6c>
 8008cd0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008cf8 <scalbn+0xd0>
 8008cd4:	f000 f81e 	bl	8008d14 <copysign>
 8008cd8:	a307      	add	r3, pc, #28	; (adr r3, 8008cf8 <scalbn+0xd0>)
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	e7e0      	b.n	8008ca2 <scalbn+0x7a>
 8008ce0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ce4:	3236      	adds	r2, #54	; 0x36
 8008ce6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008cea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008cee:	4620      	mov	r0, r4
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	4b06      	ldr	r3, [pc, #24]	; (8008d10 <scalbn+0xe8>)
 8008cf6:	e7b2      	b.n	8008c5e <scalbn+0x36>
 8008cf8:	c2f8f359 	.word	0xc2f8f359
 8008cfc:	01a56e1f 	.word	0x01a56e1f
 8008d00:	8800759c 	.word	0x8800759c
 8008d04:	7e37e43c 	.word	0x7e37e43c
 8008d08:	43500000 	.word	0x43500000
 8008d0c:	ffff3cb0 	.word	0xffff3cb0
 8008d10:	3c900000 	.word	0x3c900000

08008d14 <copysign>:
 8008d14:	ec51 0b10 	vmov	r0, r1, d0
 8008d18:	ee11 0a90 	vmov	r0, s3
 8008d1c:	ee10 2a10 	vmov	r2, s0
 8008d20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008d24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008d28:	ea41 0300 	orr.w	r3, r1, r0
 8008d2c:	ec43 2b10 	vmov	d0, r2, r3
 8008d30:	4770      	bx	lr
	...

08008d34 <_init>:
 8008d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d36:	bf00      	nop
 8008d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d3a:	bc08      	pop	{r3}
 8008d3c:	469e      	mov	lr, r3
 8008d3e:	4770      	bx	lr

08008d40 <_fini>:
 8008d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d42:	bf00      	nop
 8008d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d46:	bc08      	pop	{r3}
 8008d48:	469e      	mov	lr, r3
 8008d4a:	4770      	bx	lr
